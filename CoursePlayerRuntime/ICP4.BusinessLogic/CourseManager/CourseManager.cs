using System;
using System.Data;
using System.Configuration;
using System.Web;
using System.Net;
using System.Xml;
using System.Xml.Serialization;
using System.Text;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using Microsoft.Practices.EnterpriseLibrary;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;
using ICP4.CommunicationLogic.CommunicationCommand;
using ICP4.BusinessLogic.CacheManager;
using System.Web.SessionState;
using iTextSharp.text.pdf;
using ICP4.BusinessLogic.ICPCourseService;
using _360Training.BusinessEntities;
using CommonAPI.Utility;
using ICP4.BusinessLogic.IntegerationManager;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using ICP4.BusinessLogic.ICPTrackingService;


namespace ICP4.BusinessLogic.CourseManager
{

    public class CourseManager : IDisposable
    {
        public CourseManager()
        {
            ServicePointManager.CertificatePolicy = new CommonAPI.AcceptAllCertificatePolicy();
        }

        /// <summary>
        /// This method loads the branding information into cache and sends the command object to client which will contain the elements of branding.
        /// </summary>
        /// <param name="variant">Variant string value</param>
        /// <param name="brandCode">BrandCode string value</param>
        /// <param name="learnerSessionID">LearnerSessionID string value generated by LMS</param>
        /// <returns>If successfully execute returns ShowResourceInfo command object</returns>
        public object InitializedCoursePlayer(string learnerSessionID, string brandCode, string variant, int courseID, bool isdemo, bool isRedirect, bool isPreview, int stateVertical, int sceneID, int assetID, string courseGUID)
        {
           try
            {
                if (System.Web.HttpContext.Current.Session["LearnerSessionID"] != null && !isRedirect)
                {
                    try
                    {
                        string prevlearnerSessionID = System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
                        int prevcourseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);

                        // LCMS-9278
                        //----------------------------------------------------------------------------
                        //this.EndSession(prevcourseID, prevlearnerSessionID, DateTime.Now);
                        //----------------------------------------------------------------------------
                        DateTime endTime = DateTime.Now;
                        if (System.Web.HttpContext.Current.Session["LastConnectedTime"] != null)
                        {                           
                           endTime = Convert.ToDateTime(System.Web.HttpContext.Current.Session["LastConnectedTime"]);
                        }                                     
                        
                        this.EndSession(prevcourseID, prevlearnerSessionID, endTime,DateTime.Now,true);
                        //----------------------------------------------------------------------------

                    }
                    catch (Exception exp1)
                    {
                        ExceptionPolicyForLCMS.HandleException(exp1, "ICPException");
                    }

                }
             
                int source = 0;
                if (!isPreview)
                {
                    brandCode = string.Empty;
                    variant = string.Empty;
                    using (ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
                    {
                        trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                        trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                        brandCode = trackingService.GetLearningSessionBrandcodeVariant(learnerSessionID, out variant);
                        source = trackingService.GetSource(learnerSessionID);
                    }
                }
                else
                {
                    System.Web.HttpContext.Current.Session.Add("PreviewSceneID", sceneID);
                    System.Web.HttpContext.Current.Session.Add("PreviewAssetID", assetID);
                }
                if (isdemo == true)
                {
                    using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
                    {
                        courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                        courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                        courseID= courseService.GetCourseID(courseGUID);
                    }
                }

                if (isRedirect)
                {
                    System.Web.HttpContext.Current.Session.Add("IsRedirect", isRedirect);
                    if (!isPreview)
                    {
                        string itemGUID = System.Web.HttpContext.Current.Session["ItemGUID"].ToString();
                        string sceneGUID = System.Web.HttpContext.Current.Session["SceneGUID"].ToString();
                        string itemType = "";
                        int learnerSessionIDPrimary = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerSessionIDPrimary"]);
                        DateTime assetStartTime = Convert.ToDateTime(System.Web.HttpContext.Current.Session["AssetStartTime"]);
                        itemType = LearnerStatisticsType.FlashAsset;


                        if (itemType != LearnerStatisticsType.PostAssessment && itemType != LearnerStatisticsType.PreAssessment && itemType != LearnerStatisticsType.Quiz)
                        {
                            SaveCourseStudentTrack(itemGUID, sceneGUID, learnerSessionIDPrimary, itemType, assetStartTime);
                        }
                    }
                }
                else
                {
                    System.Web.HttpContext.Current.Session.Add("Source", source);
                    System.Web.HttpContext.Current.Session.Add("BrandCode", brandCode);
                    System.Web.HttpContext.Current.Session.Add("Variant", variant);
                    System.Web.HttpContext.Current.Session.Add("CurrentIndex", -1);
                    System.Web.HttpContext.Current.Session.Add("LearnerSessionID", learnerSessionID);
                    System.Web.HttpContext.Current.Session.Add("DemoableCourseID", courseID);
                    System.Web.HttpContext.Current.Session.Add("IsDemoable", isdemo);
                    System.Web.HttpContext.Current.Session.Add("IsPreview", isPreview);
                    System.Web.HttpContext.Current.Session.Add("StateVertical", stateVertical);
                    System.Web.HttpContext.Current.Session.Add("CourseStartTime", DateTime.Now);
                    System.Web.HttpContext.Current.Session.Add("VisitedSceneList",new List<VisitedScene>());
                    // PreviousLearningSessionTotalTimeSpent Session Variable used in MustCourseCompleteWithinSpecificAmountOfTime() method
                    // PreviousLearningSessionTotalTimeSpent saved the Total Time Spent which learner spent.
                    System.Web.HttpContext.Current.Session.Add("PreviousLearningSessionTotalTimeSpent", 0);
                    // CourseLocked Session Variable use to checking either course has beed locked or not
                    System.Web.HttpContext.Current.Session.Add("CourseLocked", true);
                    // CourseCompleted Session Variable use to checking either course has beed completed or not
                    System.Web.HttpContext.Current.Session.Add("CourseCompleted", false);
                    System.Web.HttpContext.Current.Session.Add("CourseFirstAccessDateTime", DateTime.Now);
                    System.Web.HttpContext.Current.Session.Add("IntegerationStatistics", null);
                }
                                                    

                BrandManager.BrandManager brandManager = new ICP4.BusinessLogic.BrandManager.BrandManager();

                return brandManager.GetLocalResource(variant, brandCode);
            }
            catch (Exception ex)
            {
                ExceptionPolicyForLCMS.HandleException(ex, "ICPException");
                throw ex;
            }

        }


        /// <summary>
        /// This method loads the course configuration, course sequence into cache if dont exist and sends the command object to client which will contain course information.
        /// </summary>
        /// <param name="learnerSessionID">LearnerSessionID string value generated by LMS</param>
        /// <returns>If successfully execute returns ShowCourseInfo command object</returns>
        public object LoadCourse(string learnerSessionID)
        {
            HttpContext.Current.Session.Remove("LearnerCourseCompletionStatus");

            int LearningSessionExpirationTime = 0;
            ICP4.CommunicationLogic.CommunicationCommand.ShowCourseInfo.ShowCourseInfo showCourseInfo = new ICP4.CommunicationLogic.CommunicationCommand.ShowCourseInfo.ShowCourseInfo();
            ICP4.CommunicationLogic.CommunicationCommand.ShowCourseInfo.CourseInfo courseInfo = new ICP4.CommunicationLogic.CommunicationCommand.ShowCourseInfo.CourseInfo();
            if (Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]))
            {
                
                int demoCourseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["DemoableCourseID"]);
                //GetCourseImage(demoCourseID);
                int originalCourseID = GetOriginalCourseIDFromSubContentOwner(demoCourseID);
                if (originalCourseID > 0)
                {
                    demoCourseID = originalCourseID;
                    System.Web.HttpContext.Current.Session["DemoableCourseID"] = originalCourseID;
                    System.Web.HttpContext.Current.Session["CourseID"] = originalCourseID;
                }
                else
                {

                    System.Web.HttpContext.Current.Session["CourseID"] = demoCourseID;
                }

              


                bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsPreview"]);

                if (ConfigurationManager.AppSettings["ClearCache"] == "Yes" || isPreview == true)
                {
                    // Initialization of Course Service Object
                    ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService();
                    courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"]; courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                    courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                    ICPCourseService.Sequence courseDemoSequence = courseService.GetCourseDemoSequence(demoCourseID);
                    
                    // Updating Cache
//                    HttpRuntime.Cache[demoCourseID + "DemoCourseSequence"] = courseDemoSequence;
                    new CacheManager.CacheManager().UpdateDemoCourseSequenceInCache(demoCourseID, courseDemoSequence);


                    
                    //System.Web.HttpContext.Current.Cache.Remove(demoCourseID.ToString() + "DemoCourseSequence");
                }
                GetDemoableCourseSequence(demoCourseID);
                #region Create Load course command
                showCourseInfo.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowCourseInfo;
                courseInfo.CourseName = "";
                using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
                {
                    courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                    courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                    string[] courseNameandDescription = new string[2];
                    courseNameandDescription=courseService.GetCourseNameAndDescription(demoCourseID);
                    courseInfo.CourseName = courseNameandDescription[0].ToString();
                    courseInfo.CourseDescription = courseNameandDescription[1].ToString();
                    HttpContext.Current.Session["CourseName"] = courseInfo.CourseName;
                    HttpContext.Current.Session["CourseDescription"] = courseInfo.CourseDescription;
                }

                courseInfo.CourseTimer = -1;
                courseInfo.ExpireTimeout = -1;
                courseInfo.IdleTimeOut = -1;
                courseInfo.ValidationQuestionAskingTimer = -1;
                courseInfo.InitialValidationQuestionAskingTimer = -1;
                courseInfo.RestrictIncompleteJSTemplate = false;
                showCourseInfo.CourseInfo = courseInfo;

                #endregion



                return showCourseInfo;
            }
            else
            {                           
                                
                bool isRedirect = Convert.ToBoolean(System.Web.HttpContext.Current.Session["isRedirect"]);
                
                try
                {
                    
                    ICPTrackingService.LearnerCourseTrackInfo learnerCourseTrackInfo = new ICP4.BusinessLogic.ICPTrackingService.LearnerCourseTrackInfo();
                    string lockingReason = LockingReason.GeneralCase;
                    bool courseLocked = false;
                    string logOutText = "";
                    //fix for LCMS-11085
                    string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                    string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                    using (ICP4.BusinessLogic.CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                    {
                        if (cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentLogOutText, brandCode, variant) != null)
                        {
                            logOutText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentLogOutText, brandCode, variant);
                        }
                    }
                    //End fix for LCMS-11085
                        if (Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsPreview"]) == true)
                        {
                             if (!isRedirect)
                             {
                                // Changed By Waqas Zakai
                                // Get Original Course ID from Sub ContentOwner
                                // Start                   
                                 //GetCourseImage(Convert.ToInt32(System.Web.HttpContext.Current.Session["DemoableCourseID"]));
                                 int originalCourseID = GetOriginalCourseIDFromSubContentOwner(Convert.ToInt32(System.Web.HttpContext.Current.Session["DemoableCourseID"]));
                                if (originalCourseID > 0)
                                {
                                    System.Web.HttpContext.Current.Session["CourseID"] = originalCourseID;
                                }
                                else
                                {
                                    System.Web.HttpContext.Current.Session["CourseID"] = System.Web.HttpContext.Current.Session["DemoableCourseID"];
                                }
                                // End
                                System.Web.HttpContext.Current.Session["LearnerID"] = 0;
                                System.Web.HttpContext.Current.Session["EnrollmentID"] = 0;
                                System.Web.HttpContext.Current.Session["StatisticsType"] = string.Empty;
                                System.Web.HttpContext.Current.Session["ItemGUID"] = string.Empty;
                                System.Web.HttpContext.Current.Session["SceneGUID"] = string.Empty;
                                System.Web.HttpContext.Current.Session["AssessmentEndStats"] = null;
                                System.Web.HttpContext.Current.Session["AskedAssessments"] = null;
                                System.Web.HttpContext.Current.Session["ContentObjectName"] = null;                                
                                System.Web.HttpContext.Current.Session["AskedAssessmentItemsGUIDPRE"] = null;
                                System.Web.HttpContext.Current.Session["AskedAssessmentItemsGUIDPOST"] = null;
                                System.Web.HttpContext.Current.Session["AskedAssessmentItemsGUIDQUIZ"] = null;
                                System.Web.HttpContext.Current.Session["AskedAssessmentItemsGUIDPracticeExam"] = null;
                                System.Web.HttpContext.Current.Session["CourseApprovalID"] = 0;
                                System.Web.HttpContext.Current.Session["CourseConfigurationID"] = 0;
                                System.Web.HttpContext.Current.Session["AskedCourseApprovalAffidavit"] = false;
                                System.Web.HttpContext.Current.Session["IsCourseApprovalSelection"] = false;
                                System.Web.HttpContext.Current.Session["CancelSpecialPostAssessmentValidation"] = false;
                                System.Web.HttpContext.Current.Session["CourseLockedDuringAssessment"] = false;
                                System.Web.HttpContext.Current.Session["ShowAssessmentResult"] = false;
                            }
                            int previewSceneID=Convert.ToInt32(System.Web.HttpContext.Current.Session["PreviewSceneID"]);
                            if (previewSceneID > 0)
                            {
                                int previewAssetID = Convert.ToInt32(System.Web.HttpContext.Current.Session["PreviewAssetID"]);
                                using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
                                {
                                    courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                                    courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                                    string previewSceneGUID = courseService.GetSceneGUID(previewSceneID);
                                    System.Web.HttpContext.Current.Session["SceneGUID"] = previewSceneGUID;

                                    if (previewAssetID > 0)
                                    {
                                        string previewAssetGUID = courseService.GetAssetGUID(previewAssetID);
                                        System.Web.HttpContext.Current.Session["ItemGUID"] = previewAssetGUID;
                                    }
                                    else
                                    {
                                        System.Web.HttpContext.Current.Session["ItemGUID"] = previewSceneGUID;
                                    }
                                }
                            }
                            System.Web.HttpContext.Current.Session.Remove("PreviewSceneID");
                            System.Web.HttpContext.Current.Session.Remove("PreviewAssetID");

                        }
                        else
                        {
                            //Abdus Samad LCMS-13553
                            //Start
                            string endSessionForClosingSessionForcefully = string.Empty;
                            string courseIDForClosingSessionForcefully = string.Empty;


                            using (ICP4.BusinessLogic.ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
                            {
                                string iResult = string.Empty;

                                trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                                trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                                courseIDForClosingSessionForcefully = trackingService.GetCourseIDAgainstLearningSessionGUID(learnerSessionID);
                            }


                            endSessionForClosingSessionForcefully = CoursePlayerEndSession(learnerSessionID, Convert.ToInt32(courseIDForClosingSessionForcefully));
                            //Stop
                         


                            learnerCourseTrackInfo = GetPreviousInfo(learnerSessionID);
                            System.Web.HttpContext.Current.Session["PreviousLearningSessionTotalTimeSpent"] = learnerCourseTrackInfo.TotalTimeSpent.ToString();
                            System.Web.HttpContext.Current.Session["CourseLockedDuringAssessment"] = learnerCourseTrackInfo.IsLockedCourseDuringAssessment.ToString();
                            courseLocked = IsCourseLocked(learnerCourseTrackInfo.EnrollmentID, out lockingReason);
                            System.Web.HttpContext.Current.Session["CourseLocked"] = courseLocked;

                            //GetCourseImage(learnerCourseTrackInfo.CourseID);

                            // Changed By Waqas Zakai
                            // Get Original Course ID from Sub ContentOwner
                            // Start
                            int originalCourseID = GetOriginalCourseIDFromSubContentOwner(learnerCourseTrackInfo.CourseID);
                            if (originalCourseID > 0)
                            {
                                System.Web.HttpContext.Current.Session["CourseID"] = originalCourseID;
                                learnerCourseTrackInfo.CourseID = originalCourseID;
                            }
                            else
                            {
                                System.Web.HttpContext.Current.Session["CourseID"] = learnerCourseTrackInfo.CourseID;
                            }
                            // Emd

                                                       
                            System.Web.HttpContext.Current.Session["LearnerID"] = learnerCourseTrackInfo.LearnerID;
                            System.Web.HttpContext.Current.Session["ItemGUID"] = learnerCourseTrackInfo.ItemGUID == null ? "" : learnerCourseTrackInfo.ItemGUID;
                            System.Web.HttpContext.Current.Session["SceneGUID"] = learnerCourseTrackInfo.SceneGUID == null ? "" : learnerCourseTrackInfo.SceneGUID;
                            System.Web.HttpContext.Current.Session["StatisticsType"] = learnerCourseTrackInfo.StatisticsType == null ? "" : learnerCourseTrackInfo.StatisticsType;
                            System.Web.HttpContext.Current.Session["LearnerSessionIDPrimary"] = learnerCourseTrackInfo.LearnerSessionID;
                            System.Web.HttpContext.Current.Session["EnrollmentID"] = learnerCourseTrackInfo.EnrollmentID;
                            System.Web.HttpContext.Current.Session["RedirectURL"] = learnerCourseTrackInfo.RedirectURL;
                            System.Web.HttpContext.Current.Session["IsCourseCompleted"] = false;
                            System.Web.HttpContext.Current.Session["ValidationTimerExpired"] = false;
                            System.Web.HttpContext.Current.Session["CourseFirstAccessDateTime"] = learnerCourseTrackInfo.FirstAccessDateTime;
                            System.Web.HttpContext.Current.Session["CourseRegAccessDateTime"] = learnerCourseTrackInfo.RegAccessDateTime;
                            System.Web.HttpContext.Current.Session["LearningSessionStartDateTime"] = learnerCourseTrackInfo.LearningSessionStartDateTime;
                            System.Web.HttpContext.Current.Session["LearningSessionTimeSpentOnScene"] = 0;
                            System.Web.HttpContext.Current.Session["CourseApprovalID"] = learnerCourseTrackInfo.CourseApprovalID;
                            System.Web.HttpContext.Current.Session["CourseConfigurationID"] = learnerCourseTrackInfo.CourseConfigurationID; 
                            System.Web.HttpContext.Current.Session["AskedCourseApprovalAffidavit"] = false;
                            System.Web.HttpContext.Current.Session["IsCourseApprovalSelection"] = false;
                            System.Web.HttpContext.Current.Session["CancelSpecialPostAssessmentValidation"] = false;
                            System.Web.HttpContext.Current.Session["ShowAssessmentResult"] = false;                           

                            #region Course Completion

                            ICP4.BusinessLogic.ICPTrackingService.LearnerCourseCompletionStatus learnerCourseCompletionStatus = new ICP4.BusinessLogic.ICPTrackingService.LearnerCourseCompletionStatus();
                            learnerCourseCompletionStatus.IsCompleteAfterNOUniqueCourseVisitAchieved = learnerCourseTrackInfo.LearnerCourseCompletionStatus.IsCompleteAfterNOUniqueCourseVisitAchieved;
                            learnerCourseCompletionStatus.IsembeddedAcknowledgmentAchieved = learnerCourseTrackInfo.LearnerCourseCompletionStatus.IsembeddedAcknowledgmentAchieved;
                            learnerCourseCompletionStatus.IsViewEverySceneInCourseAchieved = learnerCourseTrackInfo.LearnerCourseCompletionStatus.IsViewEverySceneInCourseAchieved;
                            learnerCourseCompletionStatus.IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccess = learnerCourseTrackInfo.LearnerCourseCompletionStatus.IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccess;
                            learnerCourseCompletionStatus.IsMustCompleteWithinSpecifiedAmountOfTimeAfterRegDate = learnerCourseTrackInfo.LearnerCourseCompletionStatus.IsMustCompleteWithinSpecifiedAmountOfTimeAfterRegDate;
                            learnerCourseCompletionStatus.IsCourseCompleted = learnerCourseTrackInfo.LearnerCourseCompletionStatus.IsCourseCompleted;
                            learnerCourseCompletionStatus.IsRespondToCourseEvaluationAchieved = learnerCourseTrackInfo.LearnerCourseCompletionStatus.IsRespondToCourseEvaluationAchieved;
                            learnerCourseCompletionStatus.IsPostAssessmentAttempted = learnerCourseTrackInfo.LearnerCourseCompletionStatus.IsPostAssessmentAttempted;
                            learnerCourseCompletionStatus.IsPostAssessmentMasteryAchieved = learnerCourseTrackInfo.LearnerCourseCompletionStatus.IsPostAssessmentMasteryAchieved;
                            learnerCourseCompletionStatus.IsPreAssessmentMasteryAchieved = learnerCourseTrackInfo.LearnerCourseCompletionStatus.IsPreAssessmentMasteryAchieved;
                            learnerCourseCompletionStatus.IsQuizMasteryAchieved = learnerCourseTrackInfo.LearnerCourseCompletionStatus.IsQuizMasteryAchieved;
                            /*
                            if (learnerCourseCompletionStatus.IsCourseCompleted == false)
                            {
                                DateTime registrationDate = DateTime.Now;
                                if (System.Web.HttpContext.Current.Session["CourseRegAccessDateTime"] != null)
                                    DateTime.TryParse(System.Web.HttpContext.Current.Session["CourseRegAccessDateTime"].ToString(), out registrationDate);

                                int QuizCount = GetValidQuizCount(learnerCourseTrackInfo.CourseID);
                                using (ICP4.BusinessLogic.ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
                                {
                                    trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                                    trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                                    learnerCourseCompletionStatus = trackingService.GetCourseCompletionStatus(learnerCourseTrackInfo.CourseID, learnerCourseTrackInfo.LearnerID, learnerCourseTrackInfo.EnrollmentID, QuizCount, registrationDate);
                                }

                            }
                            */
                            HttpContext.Current.Session["LearnerCourseCompletionStatus"] = learnerCourseCompletionStatus;


                            #endregion                            

                            // LCMS-8422
                            int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);                            
                            
                            if (learnerCourseTrackInfo.CourseConfigurationID == 0)
                            {
                                System.Web.HttpContext.Current.Session["CourseConfigurationID"] = GetCourseConfigurationID(learnerCourseTrackInfo.CourseID, source);                                
                            }

                            ICPCourseService.CourseConfiguration courseConfiguration = GetCourseConfiguration(Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]));

                            int courseApproval = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseApprovalID"]);

                            if (courseApproval > 0 && source==0)
                            {
                                InsertCourseApprovalInCache(courseApproval);
                            }

                            if (courseConfiguration.MustStartCourseWithinSpecifiedAmountOfTimeAfterRegistrationDateTF == true && courseConfiguration.MustStartCourseWithinSpecifiedAmountOfTimeAfterRegistrationDate > 0 && (Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsPreview"]) == false) && (Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]) == false)) 
                            {
                                if (learnerCourseTrackInfo.FirstAccessDateTime == learnerCourseTrackInfo.LearningSessionStartDateTime)
                                {
                                    if (!IsCourseStartWithinSpecifiedTimeAfterRegistrationDate(courseConfiguration.MustStartCourseWithinSpecifiedAmountOfTimeAfterRegistrationDate, courseConfiguration.UnitMustStartCourseWithinSpecifiedAmountOfTimeAfterRegistrationDate))
                                    {
                                        //lock course
                                        int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
                                        int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
                                        int LearnerID = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerID"]);
                                        LockCourse(courseID, LearnerID, enrollmentID, LockingReason.MustStartCourseWithinSpecificAmountOfTimeAfterRegistration);
                                        System.Web.HttpContext.Current.Session["CourseLocked"] = true;
                                        return CreateCourseLockedCommandObject(courseID, LockingReason.MustStartCourseWithinSpecificAmountOfTimeAfterRegistration);
                                    }
                                }
                            }

                            int.TryParse(ConfigurationManager.AppSettings["LearningSessionExpirationTime"], out LearningSessionExpirationTime);
                            if (LearningSessionExpirationTime > 0 && DateTime.Now.Subtract(learnerCourseTrackInfo.LearningSessionStartDateTime).TotalMinutes >= LearningSessionExpirationTime)
                            {
                                System.Web.HttpContext.Current.Session.Abandon();
                                return CreateCustomeMessageForSessionEnd();//CreateCustomeMessageForLearningSessionExpire();
                            }
                        }
                        //Change Made by Waqas Zakai 1st March 2011
                        // LCMS-6461
                        // START                        
                        if (IsCoursePublished() == true)
                        {                            
                            object CoursePublishCommand=CreateCourseLockedCommandObject(learnerCourseTrackInfo.CourseID, LockingReason.CoursePublishedScene);                            
                            SessionAbandonOnScene();
                            return CoursePublishCommand;
                        }
                        //END

                        //Change Made by Waqas Zakai 23rd June 2010
                        // LCMS-4424
                        // START
                        if (MustCourseCompleteWithinSpecificAmountOfTime() == false) 
                        {                            
                            return CreateCourseLockedCommandObject(learnerCourseTrackInfo.CourseID, LockingReason.FailedCompletionMustCompleteWithinSpecificAmountOfTimeMinute);
                        }
                        // END
                        if (!courseLocked)
                        {
                            int courseId = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);

                            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsPreview"]);

                            if (ConfigurationManager.AppSettings["ClearCache"] == "Yes" || isPreview == true)
                            {
                                // Initialization of Course Service Object
                                ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService();
                                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"]; courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                                // Getting fresh course configuration from database and updating in cache
                                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                                ICPCourseService.CourseConfiguration courseConfigurationFromDatabase = null;                                
                                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                                if (courseConfigurationID == 0)                                
                                {                                    
                                    courseConfigurationID = GetCourseConfigurationID(courseId, source);
                                    System.Web.HttpContext.Current.Session["CourseConfigurationID"] = courseConfigurationID;
                                }
                                
                                courseConfigurationFromDatabase = courseService.GetCourseConfiguaration(courseConfigurationID);                                
                                new CacheManager.CacheManager().UpdateCourseConfigurationInCache(courseConfigurationID, courseConfigurationFromDatabase);
                                //HttpRuntime.Cache[courseId + "CourseConfiguration"] = courseConfigurationFromDatabase;
                            

                               //System.Web.HttpContext.Current.Cache.Remove(courseId.ToString() + "CourseConfiguration");                                                       
                                
                            }
                                                        
                            ICPCourseService.CourseConfiguration courseConfiguration = GetCourseConfiguration(Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]));
                            
                            // LCMS-3477 Add by Danish Khan
                            using (ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
                            {
                                trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                                trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                                string leanerSessionGUID = string.Empty;                    
                                leanerSessionGUID = Convert.ToString(System.Web.HttpContext.Current.Session["LearnerSessionID"]);

                                int source = trackingService.GetSource(leanerSessionGUID);
                                if (source == 1)
                                {
                                    if ((courseConfiguration.CertificateAssetID > 0) && (courseConfiguration.CertificateEnabled == true))
                                    {
                                        courseConfiguration.CertificateAssetID = 0;
                                        courseConfiguration.CertificateEnabled = false;
                                        GetCourseSequence(courseId, courseConfiguration);
                                    }
                                    else
                                    {
                                        GetCourseSequence(courseId, courseConfiguration);
                                    }
                                }
                                else 
                                {
                                    GetCourseSequence(courseId, courseConfiguration);
                                }
                            }

                            // End LCMS-3477

                            //if (!courseConfiguration.PlayerAllowUserToReviewCourseAfterCompletion && learnerCourseTrackInfo.StatisticsType.Equals("EndOfCourseScene"))
                            //{
                            //    return CreateReviewCourseAfterCompletionCommandObject(learnerCourseTrackInfo.CourseID);
                            //}

                            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                            {
                                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);                                
                                ICPCourseService.Sequence sequence = cacheManager.GetIFSequenceExistInCache(courseId, source, courseConfigurationID);
                                int noOFViewableScenes = CalculateTotalViewableScenes(sequence);
                                System.Web.HttpContext.Current.Session["TotalNoOfViewableScenes"] = noOFViewableScenes;
                                
                            }

                            #region Create Load course command
                            showCourseInfo.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowCourseInfo;
                            courseInfo.CourseName = "";
                            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
                            {
                                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                                string[] courseNameandDescription = new string[2];
                                courseNameandDescription = courseService.GetCourseNameAndDescription(courseId);
                                courseInfo.CourseName = courseNameandDescription[0].ToString();
                                courseInfo.CourseDescription = courseNameandDescription[1].ToString();

                                
            
                                string courseImagePrefix = ConfigurationManager.AppSettings["ICPFileSystem"].ToString();            
                                courseImagePrefix = courseImagePrefix.Replace("ICPFileSystem", "ICP4");            
                                string defaultCourseImage = courseImagePrefix + "/" + ConfigurationManager.AppSettings["DefaultCourseImage"].ToString();

                                courseInfo.CourseDefaultImage = defaultCourseImage;

                                using (ICP4.BusinessLogic.CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                                {
                                    string courseImage = cacheManager.GetIFCourseImageExistInCache(courseId);
                                    if (courseImage == null)
                                    {
                                        courseInfo.CourseImage = "";
                                    }
                                    else
                                    {
                                        courseInfo.CourseImage = courseImage;
                                    }
                                }
                                
                                courseInfo.CourseProductPageURL = "https://www.360training.com";
                                HttpContext.Current.Session["CourseName"] = courseInfo.CourseName;
                                HttpContext.Current.Session["CourseDescription"] = courseInfo.CourseDescription;
                            }

                            courseInfo.CourseTimer = -1;
                            courseInfo.ExpireTimeout = -1;
                               
                            if (courseConfiguration.PlayerIdleUserTimeout > 0)
                                courseInfo.IdleTimeOut = courseConfiguration.PlayerIdleUserTimeout;
                            else
                                courseInfo.IdleTimeOut = -1;

                                /*
                                * Code Review : Add a check for source VU, so VU students remain uneffected.
                                * DONE
                                */
                            //Load validation into session if policy allows
                                     DateTime dt = DateTime.Today;
                                    string ValidationCutOffDate = System.Configuration.ConfigurationManager.AppSettings["ValidationCutOffDate"];
                                    DateTime dt1 = DateTime.ParseExact(ValidationCutOffDate, "MM-dd-yyyy", null);

                                    int sourceVU = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);

                                    //if (dt < dt1 && System.Web.HttpContext.Current.Session["PreviousLearningSessionTotalTimeSpent"] != "0" && sourceVU == 0)
                                    //{

                                    if (courseConfiguration.ValidationRequireIdentityValidation &&
                                        Convert.ToBoolean(System.Web.HttpContext.Current.Session["isPreview"]) == false)
                                    {
                                        int secondsSinceLastValidation = 0;

                                        int unansweredQuestionID = 0;
                                        using (ValidationManager.ValidationManager validationManager = new ICP4.BusinessLogic.ValidationManager.ValidationManager())
                                        {

                                            validationManager.LoadValidationQuestions(learnerCourseTrackInfo.CourseID, learnerCourseTrackInfo.LearnerID, learnerCourseTrackInfo.EnrollmentID, out secondsSinceLastValidation, sourceVU, out unansweredQuestionID);
                                            //if (validationManager.LoadValidationQuestions(learnerCourseTrackInfo.CourseID, learnerCourseTrackInfo.LearnerID, learnerCourseTrackInfo.EnrollmentID, out secondsSinceLastValidation, sourceVU, out unansweredQuestionID) == true)
                                            //{
                                                courseInfo.ValidationQuestionAskingTimer = courseConfiguration.ValidationTimeBetweenQuestion;
                                                if (unansweredQuestionID > 0)
                                                {
                                                    courseInfo.InitialValidationQuestionAskingTimer = courseConfiguration.ValidationTimeBetweenQuestion;
                                                }
                                                else if (secondsSinceLastValidation < courseConfiguration.ValidationTimeBetweenQuestion && secondsSinceLastValidation > 0)
                                                {
                                                    secondsSinceLastValidation = courseConfiguration.ValidationTimeBetweenQuestion - secondsSinceLastValidation;
                                                    courseInfo.InitialValidationQuestionAskingTimer = secondsSinceLastValidation;
                                                }
                                                else if (secondsSinceLastValidation > courseConfiguration.ValidationTimeBetweenQuestion)
                                                {
                                                    courseInfo.InitialValidationQuestionAskingTimer = 0;
                                                }
                                                else
                                                {
                                                    courseInfo.InitialValidationQuestionAskingTimer = courseConfiguration.ValidationTimeBetweenQuestion;
                                                }
                                            //}
                                            //else
                                            //{
                                            //    courseInfo.ValidationQuestionAskingTimer = -1;
                                            //    courseInfo.InitialValidationQuestionAskingTimer = -1;
                                            //}
                                        }

                                    }
                                    else
                                    {
                                        courseInfo.ValidationQuestionAskingTimer = -1;
                                        courseInfo.InitialValidationQuestionAskingTimer = -1;
                                    }
                                    //}

                            // Change Made by Waqas Zakai 21-June-2010
                            // LCMS-4425
                            // START
                            courseInfo.TotalTimeSpent = learnerCourseTrackInfo.TotalTimeSpent;
                            // END
                            //Now we need to convert time to string format:LCMS-5228
                            TimeSpan timeSpan = TimeSpan.FromSeconds(courseInfo.TotalTimeSpent);

                            courseInfo.TotalTimeSpentStr = string.Format("{0:D2}:{1:D2}:{2:D2}",
                                                    (int)Math.Floor(timeSpan.TotalHours),
                                                    timeSpan.Minutes,
                                                    timeSpan.Seconds
                                                    ); 
                            //Now we need to convert time to string format:LCMS-5228


                            courseInfo.MinimumTimeBeforeStartingPostAssessment = 0;
                            courseInfo.MinimumTimeBeforeStartingPostAssessmentUnit = "";
                            if (courseConfiguration.PostAssessmentConfiguration.Enabled == true && courseConfiguration.PostAssessmentConfiguration.DisplaySeatTimeSatisfiedMessageTF == true)
                            {
                                courseInfo.MinimumTimeBeforeStartingPostAssessment = courseConfiguration.PostAssessmentConfiguration.MinimumTimeBeforeStart;
                                courseInfo.MinimumTimeBeforeStartingPostAssessmentUnit = courseConfiguration.PostAssessmentConfiguration.MinimumTimeBeforeStartUnit;
                            }
                            courseInfo.logOutText = logOutText;                            
                            courseInfo.ShowInstructorInfo = DisplayInstructorInfo(courseConfiguration);
                            if (courseInfo.ShowInstructorInfo)
                            {
                                courseInfo.ShowInstructorText = courseConfiguration.InstructorInfoText;
                                courseInfo.ShowInstructorImage = string.Empty;

                                if (Convert.ToString(HttpContext.Current.Session["BrandCode"]).ToLower() != "default" && Convert.ToString(HttpContext.Current.Session["Variant"]).ToLower() != "en-us")
                                {
                                    BusinessLogic.CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager();
                                    courseInfo.ShowInstructorImage = cacheManager.GetResourceValueByResourceKey(BusinessLogic.BrandManager.ResourceKeyNames.ImageComanyLogo, HttpContext.Current.Session["BrandCode"].ToString(), HttpContext.Current.Session["Variant"].ToString());
                                }
                            }

                            int sourceLMS = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                          
                            bool.TryParse(System.Web.HttpContext.Current.Session["isPreview"].ToString(), out isPreview);

                            if (sourceLMS == 0 && !isPreview)
                            {
                                courseInfo.ShowAmazonAffiliatePanel = courseConfiguration.PlayerShowAmazonAffiliatePanel;
                            }
                            else
                            {
                                // In case of VU Amazon Panel not shown.    
                                courseInfo.ShowAmazonAffiliatePanel = false;
                            }

                            //Abdus Samad
                            //LCMS-11878
                            //Start     
                            if (sourceLMS == 0)
                            {
                                courseInfo.ShowCoursesRecommendationPanel = courseConfiguration.PlayerShowCoursesRecommendationPanel;
                            }
                            else
                            {
                                // In case of VU Amazon Panel not shown.    
                                courseInfo.ShowCoursesRecommendationPanel = false;
                            }
                            //Stop
                            courseInfo.RestrictIncompleteJSTemplate = courseConfiguration.PlayerRestrictIncompleteJSTemplate;
                            showCourseInfo.CourseInfo = courseInfo;
                            //courseConfiguration

                            #endregion
                            
                            return showCourseInfo;
                            //}
                        }
                        else
                        {
                            return CreateCourseLockedCommandObject(learnerCourseTrackInfo.CourseID, lockingReason);
                        }

                      
                }
                catch (Exception ex)
                {
                    ExceptionPolicyForLCMS.HandleException(ex, "ICPException");
                    throw ex;
                }

            }
        }


        private bool ProctorLoginRequirementCriteriaMeets(string learningSessionGuid)
        {
           using (ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
            {
                trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                return trackingService.ProctorLoginRequirementCriteriaMeets(learningSessionGuid);
            }
        }

        /// <summary>
        /// This method create an appropriate command object based on previous/current pointer
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <param name="studentID">StudentID integer value</param>
        /// <param name="itemGUID">ItemGUID string value represents the pointer</param>
        /// <param name="sceneGUID">SceneGUID string value represents the pointer</param>
        /// <returns>If successfully execute returns any command object depanding on the pointer</returns>
        public object BeginCourse(int courseID, int studentID, string itemGUID, string sceneGUID, string statisticsType, bool isRedirect)
        {
            //System.Diagnostics.Trace.WriteLine("BeginCourse : 1");
            //System.Diagnostics.Trace.Flush();
            System.Web.HttpContext.Current.Session["CourseStartTime"] = DateTime.Now;
            object returnCommand = new object();
            ICPCourseService.SequenceItem sequenceItem = null;
            int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
            ICPCourseService.CourseConfiguration courseConfiguration = GetCourseConfiguration(courseConfigurationID);
            int seqNo = -1;

            #region Policy Time Based Policy
            if (courseConfiguration.CompletionMustCompleteWithinSpecifiedAmountOfTimeMinute > 0)
            {
                if (!IsCourseWithInTimeAfterFirstAccessDate(Convert.ToDateTime(System.Web.HttpContext.Current.Session["CourseFirstAccessDateTime"]), courseConfiguration.CompletionUnitOfMustCompleteWithInSpecifiedAmountOfTime, courseConfiguration.CompletionMustCompleteWithinSpecifiedAmountOfTimeMinute))
                {
                    //lock course
                    int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
                    string learnerSessionID = System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
                    if (System.Web.HttpContext.Current.Session["AssessmentStage"] !=null && System.Web.HttpContext.Current.Session["AssessmentStage"].ToString().Equals("AssessmentIsInProgress"))
                    {
                        System.Web.HttpContext.Current.Session["AssessmentStageDuringLock"] = "true";
                    }
                    this.EndSession(courseID, learnerSessionID, DateTime.Now, DateTime.Now, false);
                    LockCourse(courseID, studentID, enrollmentID, LockingReason.FailedCompletionMustCompleteWithinSpecificAmountOfTimeMinute);
                    System.Web.HttpContext.Current.Session["CourseLocked"] = true;
                    return CreateCourseLockedCommandObject(courseID, LockingReason.FailedCompletionMustCompleteWithinSpecificAmountOfTimeMinute);
                }
            }

            if (courseConfiguration.CompletionMustCompleteWithinSpecifiedAmountOfTimeDay > 0 && (Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsPreview"]) == false) && (Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]) == false))
            {
                if (!IsCourseWithInTimeAfterRegistrationDate(courseConfiguration.CompletionMustCompleteWithinSpecifiedAmountOfTimeDay))
                {
                    //lock course
                    int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
                    //Start
                    
                    //End
                    LockCourse(courseID, studentID, enrollmentID, LockingReason.FailedCompletionMustCompleteWithinSpecificAmountOfTimeAfterRegistration);
                    System.Web.HttpContext.Current.Session["CourseLocked"] = true;
                    return CreateCourseLockedCommandObject(courseID, LockingReason.FailedCompletionMustCompleteWithinSpecificAmountOfTimeAfterRegistration);
                }
            }

            #endregion Policy Time Based Policy

            #region Policy Allow User to review after course completion
            if (Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]) == false &&
                Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsPreview"]) == false)
            {
                using (ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
                {
                    trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                    trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                    bool isCourseCompleted = false;
                    int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
                    int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                    /*
                    if (source == 1)
                    {
                        using (LCMS_VUConnectorService.LCMS_VUConnectorServiceService lCMS_VUConnectorServiceService = new ICP4.BusinessLogic.LCMS_VUConnectorService.LCMS_VUConnectorServiceService())
                        {
                            lCMS_VUConnectorServiceService.Url = ConfigurationManager.AppSettings["LCMS_VUConnectorService"];
                            lCMS_VUConnectorServiceService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                            ServicePointManager.CertificatePolicy = new CommonAPI.AcceptAllCertificatePolicy();
                            lCMS_VUConnectorServiceService.UseDefaultCredentials = true;

                            int legacycompleted = (int)lCMS_VUConnectorServiceService.GetStudentCourseStatus((double)enrollmentID);
                            if (legacycompleted == 1 || legacycompleted == 5)
                            { 
                                isCourseCompleted = true;
                            }
                            
                        }
                    }
                    else
                    {
                        isCourseCompleted = trackingService.IsCourseCompleted(enrollmentID);
                    }
                     */
                    ICP4.BusinessLogic.ICPTrackingService.LearnerCourseCompletionStatus learnerCourseCompletionStatus = (ICP4.BusinessLogic.ICPTrackingService.LearnerCourseCompletionStatus)HttpContext.Current.Session["LearnerCourseCompletionStatus"];
                    if (learnerCourseCompletionStatus != null)
                        isCourseCompleted = learnerCourseCompletionStatus.IsCourseCompleted;

                    if (isCourseCompleted == true)
                    {
                        System.Web.HttpContext.Current.Session["IsCourseCompleted"] = true;
                        using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                        {   
                            if (courseConfiguration.PlayerAllowUserToReviewCourseAfterCompletion == false)
                            {
                                returnCommand = CreateReviewCourseAfterCompletionCommandObject(courseID);//CreateCustomeMessageForEnd  
                                return returnCommand;
                            }
                            else if (statisticsType == LearnerStatisticsType.PreAssessmentEnd ||
                                     statisticsType == LearnerStatisticsType.PostAssessmentEnd ||
                                    statisticsType == LearnerStatisticsType.QuizEnd)
                            {//set currrent item to something other than assessments
                                //LCMS-5883: There is no reason to have this logic as Assessments will itselft move to next item when course is completed.
                                /*
                                bool isfound = false;
                                ICPTrackingService.LearnerStatistics[] learnerStatistics = trackingService.GetPreviousLearnerStatistics(System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString(), itemGUID);
                                for (int index = 0; index <= learnerStatistics.Length - 1; index++)
                                {
                                    if (learnerStatistics[index].Statistic_Type == LearnerStatisticsType.ContentAsset ||
                                        learnerStatistics[index].Statistic_Type == LearnerStatisticsType.EndOfCourseScene ||
                                        learnerStatistics[index].Statistic_Type == LearnerStatisticsType.FlashAsset ||
                                        learnerStatistics[index].Statistic_Type == LearnerStatisticsType.IntroPage ||
                                        learnerStatistics[index].Statistic_Type == LearnerStatisticsType.LessonIntroductionScene ||
                                        learnerStatistics[index].Statistic_Type == LearnerStatisticsType.CourseIntroduction)
                                    {
                                        itemGUID = learnerStatistics[index].Item_GUID;
                                        sceneGUID = learnerStatistics[index].Scene_GUID;
                                        statisticsType = learnerStatistics[index].Statistic_Type;
                                        isfound = true;
                                        break;
                                    }
                                    
                                }
                                if (isfound == false)
                                    return CreateCustomeMessageForEnd();
                                */
                            }
                        }
                    }
                }
            }
            #endregion

            if (Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]))
            {
                seqNo = 0;
                sequenceItem = GetDemoSequenceItem(courseID, seqNo);
            }
            else
            {
                seqNo = GetSequenceNoByID(courseID, itemGUID, sceneGUID, statisticsType);
                if (seqNo < 0)
                {
                    seqNo = GetOtherPosibleSequenceNoByID(courseID, itemGUID, sceneGUID, statisticsType);
                    seqNo++;
                }
                if (seqNo < 0)
                    seqNo++;
				if (isRedirect)
                {
                    seqNo++;
                }
                sequenceItem = GetSequenceItem(courseID, seqNo);
            }
            
   
            if (sequenceItem == null)
            {
                returnCommand=CreateCustomeMessageForEnd();
            }
            else
            {
                returnCommand = LoadSequenceItemIntoCommand(courseID, seqNo, sequenceItem, true);
            }

            if (courseConfiguration.SeatTimeEnabled == true && (courseConfiguration.SeatTimeInHour > 0 || courseConfiguration.SeatTimeInMin > 0))
            {
                if (!Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]))
                {
                    object currentCommand = new object();
                    currentCommand = returnCommand;
                    System.Web.HttpContext.Current.Session["CurrentCommand"] = currentCommand;
                    returnCommand = LoadMaximumSeatTimeCourseLaunchScene();
                }
            }
           //--------------------------------------------LCMS-12532 Yasin----------------------------------------------------

            int sourceVU = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsPreview"]);
            if (courseConfiguration.ValidationRequireIdentityValidation == true && isPreview == false && sourceVU == 0)
            {
                bool isValidationIdentityQuestionAskedBefore = false;
                string ValidationCutOffDate = System.Configuration.ConfigurationManager.AppSettings["ValidationCutOffDate"];

                DateTime TodayDate = DateTime.Today;
                DateTime CutOffDate = DateTime.ParseExact(ValidationCutOffDate, "MM-dd-yyyy", null);
               
                int learnerID = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerID"]);

                using (ICP4.BusinessLogic.ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
                {
                    trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                    trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                    isValidationIdentityQuestionAskedBefore = trackingService.GetValidationIdendityQuestions(learnerID);
                }             
                
                if (CutOffDate > TodayDate)
                {
                    if (System.Web.HttpContext.Current.Session["PreviousLearningSessionTotalTimeSpent"].ToString() == "0" && isValidationIdentityQuestionAskedBefore == true)
                    {
                        object currentCommand = new object();
                        currentCommand = returnCommand;
                        System.Web.HttpContext.Current.Session["CurrentCommand"] = currentCommand;
                        returnCommand = LoadValidationQuestion();
                    }
                    else if (isValidationIdentityQuestionAskedBefore == true)
                    {
                        object currentCommand = new object();
                        currentCommand = returnCommand;
                        System.Web.HttpContext.Current.Session["CurrentCommand"] = currentCommand;
                        returnCommand = LoadValidationQuestion();

                    }

                }

                else if (isValidationIdentityQuestionAskedBefore == true)
                {
                    object currentCommand = new object();
                    currentCommand = returnCommand;
                    System.Web.HttpContext.Current.Session["CurrentCommand"] = currentCommand;
                    returnCommand = LoadValidationQuestion();

                }        
                  
            }
           //--------------------------------------------LCMS-12532 Yasin----------------------------------------------------
            System.Web.HttpContext.Current.Session["CourseStartTime"] = DateTime.Now;
            //System.Diagnostics.Trace.WriteLine("BeginCourse : 2");
            //System.Diagnostics.Trace.Flush();
           SynchToExternalSystem("BeginCourse");
            return returnCommand;
        }

        /// <summary>
        /// This method will check if time period from first access date is exceed.
        /// </summary>
        /// <param name="firstAccessDateTime"></param>
        /// <param name="CompletionUnitOfMustCompleteWithInSpecifiedAmountOfTime"></param>
        /// <param name="CompletionMustCompleteWithinSpecifiedAmountOfTimeMinute"></param>
        /// <returns></returns>
        public bool IsCourseWithInTimeAfterFirstAccessDate(DateTime firstAccessDateTime, string CompletionUnitOfMustCompleteWithInSpecifiedAmountOfTime, int CompletionMustCompleteWithinSpecifiedAmountOfTimeMinute)
        {
            bool isCourseCompletedViaCompletedWithinSpecifiedAmountOfTime = false;
            DateTime maximumDateTime = DateTime.Now;

            try
            {
                switch (CompletionUnitOfMustCompleteWithInSpecifiedAmountOfTime)
                {
                    case TimeUnit.Minutes:
                        maximumDateTime = firstAccessDateTime.AddMinutes(CompletionMustCompleteWithinSpecifiedAmountOfTimeMinute);
                        break;
                    case TimeUnit.Months:
                        maximumDateTime = firstAccessDateTime.AddMonths(CompletionMustCompleteWithinSpecifiedAmountOfTimeMinute);
                        maximumDateTime = new DateTime(maximumDateTime.Year, maximumDateTime.Month, maximumDateTime.Day, 23, 59, 59);
                        break;
                    case TimeUnit.Days:
                        maximumDateTime = firstAccessDateTime.AddDays(CompletionMustCompleteWithinSpecifiedAmountOfTimeMinute);
                        maximumDateTime = new DateTime(maximumDateTime.Year, maximumDateTime.Month, maximumDateTime.Day, 23, 59, 59);
                        break;
                    default:
                        maximumDateTime = firstAccessDateTime.AddMinutes(CompletionMustCompleteWithinSpecifiedAmountOfTimeMinute);
                        break;
                }
                if (maximumDateTime > DateTime.Now)
                {
                    isCourseCompletedViaCompletedWithinSpecifiedAmountOfTime = true;
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicyForLCMS.HandleException(ex, "ICPException");
                isCourseCompletedViaCompletedWithinSpecifiedAmountOfTime = true;
            }

            return isCourseCompletedViaCompletedWithinSpecifiedAmountOfTime;
        }


        /// <summary>
        /// This method will check if time period from Registration date.
        /// </summary>
        /// <param name="CompletionMustCompleteWithinSpecifiedAmountOfTimeDay"></param>
        /// <returns></returns>
        public bool IsCourseWithInTimeAfterRegistrationDate(int CompletionMustCompleteWithinSpecifiedAmountOfTimeDay)
        {
            bool isCourseCompletedViaCompletedWithinSpecifiedAmountOfDayFromRegistration = false;
            DateTime maximumDateTime = DateTime.Now;

            try
            {
                DateTime registrationDate = DateTime.Today;
                int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
                string regDateStr = string.Empty;
                if (Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]) == 0)
                {
                    DateTime.TryParse(System.Web.HttpContext.Current.Session["CourseRegAccessDateTime"].ToString(), out registrationDate);
                }
                else
                {
                    using (LCMS_VUConnectorService.LCMS_VUConnectorServiceService lCMS_VUConnectorServiceService = new ICP4.BusinessLogic.LCMS_VUConnectorService.LCMS_VUConnectorServiceService())
                    {
                        lCMS_VUConnectorServiceService.Url = ConfigurationManager.AppSettings["LCMS_VUConnectorService"];
                        lCMS_VUConnectorServiceService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                        ServicePointManager.CertificatePolicy = new CommonAPI.AcceptAllCertificatePolicy();
                        lCMS_VUConnectorServiceService.UseDefaultCredentials = true;

                        regDateStr = lCMS_VUConnectorServiceService.GetStudentCourseRegDate(enrollmentID);
                        DateTime.TryParse(regDateStr, out registrationDate);
                        System.Web.HttpContext.Current.Session["CourseRegAccessDateTime"] = registrationDate;
                    }

                }
                maximumDateTime = registrationDate.AddDays(CompletionMustCompleteWithinSpecifiedAmountOfTimeDay);
                maximumDateTime = new DateTime(maximumDateTime.Year, maximumDateTime.Month, maximumDateTime.Day, 23, 59, 59);

                if (maximumDateTime > DateTime.Now)
                {
                    isCourseCompletedViaCompletedWithinSpecifiedAmountOfDayFromRegistration = true;
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicyForLCMS.HandleException(ex, "ICPException");
                isCourseCompletedViaCompletedWithinSpecifiedAmountOfDayFromRegistration = true;
            }

            return isCourseCompletedViaCompletedWithinSpecifiedAmountOfDayFromRegistration;
        }



        /// <summary>
        /// This method finds the other suitable item to resume if the original item is not found in squence
        /// </summary>
        /// <param name="courseID">int courseID</param>
        /// <param name="itemGUID">string itemGUID</param>
        /// <param name="sceneGUID">string sceneGUID</param>
        /// <param name="statisticsType">string statisticsType</param>
        /// <returns>int sequence No</returns>
        private int GetOtherPosibleSequenceNoByID(int courseID, string itemGUID, string sceneGUID, string statisticsType)
        {
            int seqNo = -1;
            ICPTrackingService.LearnerStatistics[] learnerStatistics = null;
            using (ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
            {
                trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                string learningSessionID = System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
                learnerStatistics = trackingService.GetPreviousLearnerStatistics(learningSessionID, itemGUID);
            }
            for (int index = 0; index <= learnerStatistics.Length-1 && seqNo < 0; index++)
            {
                itemGUID = learnerStatistics[index].Item_GUID;
                sceneGUID = learnerStatistics[index].Scene_GUID;
                statisticsType = learnerStatistics[index].Statistic_Type;
                seqNo = GetSequenceNoByID(courseID, itemGUID, sceneGUID, statisticsType);
            }
            //If still no item found then the course should start from begining
            if (seqNo < 0)
                seqNo = 0;
            return seqNo;
        }
        /// <summary>
        /// This method create command object based on request(NEXT/BACK). Command object will contain slide information
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <param name="direction">Direction integer value, 1 represent NEXT : -1 represent BACK</param>
        /// <returns>If successfully execute returns ShowSlide command object</returns>
        public object NextBack(int courseID, int direction)
        {
            object returnCommand = new object();
            try
            {
                    
                //Change Made by Waqas Zakai 1st March 2011
                // LCMS-6461
                // START                        
                if (IsCoursePublished() == true)
                {
                    object CoursePublishCommand = CreateCourseLockedCommandObject(courseID, LockingReason.CoursePublishedScene);
                    SessionAbandonOnScene();
                    return CoursePublishCommand;
                }
                //END

                //Change Made by Waqas Zakai 1st July 2010
                // LCMS-4488
                // START
                if (MustCourseCompleteWithinSpecificAmountOfTime() == false)
                {
                    return CreateCourseLockedCommandObject(int.Parse(System.Web.HttpContext.Current.Session["CourseID"].ToString()), LockingReason.FailedCompletionMustCompleteWithinSpecificAmountOfTimeMinute);
                }
                // END

                int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["CurrentIndex"]);
                ICPCourseService.SequenceItem sequenceItem = null;
                if (Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]))
                {
                    sequenceItem = GetDemoNextBackItem(courseID, direction, seqNo);
                }
                else
                {

                    int studentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerID"]);
                    string itemGUID = System.Web.HttpContext.Current.Session["ItemGUID"].ToString();
                    string sceneGUID = System.Web.HttpContext.Current.Session["SceneGUID"].ToString();
                    string itemType = "";
                    int learnerSessionIDPrimary = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerSessionIDPrimary"]);
                    /*LCMS-8972 - Start*/
                    DateTime assetStartTime = Convert.ToDateTime(System.Web.HttpContext.Current.Session["AssetStartTime"]);
                    /*LCMS-8972 - End*/
                    ICPCourseService.SequenceItem ExamsequenceItem = null;
                    CacheManager.CacheManager ExamcacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager();
                    
                    using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                    {
                        int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                        int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                        itemType = cacheManager.GetSequenceItemType(courseID, seqNo, source, courseConfigurationID);
                    }
                    //LCMS-5883:No need save Exam Type
                    /*
                    ExamsequenceItem = ExamcacheManager.GetRequestedItemFromQueue(courseID, seqNo);

                    if (itemType == SequenceItemTypeName.Exam)
                    {
                        itemType = ExamsequenceItem.ExamType;
                    } 
                    */
                    
                    //Here we have to Save the current running item. ( We are saving the info at the end not at the beginning )
                    if (itemType != LearnerStatisticsType.PostAssessment && itemType != LearnerStatisticsType.PreAssessment && itemType != LearnerStatisticsType.Quiz && itemType != LearnerStatisticsType.PracticeExam)
                    {
                        /*LCMS-8972 - Start*/
                        SaveCourseStudentTrack(itemGUID, sceneGUID, learnerSessionIDPrimary, itemType, assetStartTime);
                        /*LCMS-8972 - End*/
                        
                        // LCMS-6865
                        // --------------------------------------------------------
                        if (itemType  ==  LearnerStatisticsType.EmbeddedAcknowledgmentScene && direction == 1)
                        {
                            /*LCMS-8972 - Start*/
                            SaveCourseStudentTrack(itemGUID, sceneGUID, learnerSessionIDPrimary, LearnerStatisticsType.EmbeddedAcknowledgmentAgreedScene, assetStartTime);
                            /*LCMS-8972 - End*/
                        }
                        // --------------------------------------------------------

                    }
                    // Waqas Zakai
                    // LCMS-10384
                    // START HERE
                    if (itemType.Equals("Exam"))
                    {
                        System.Web.HttpContext.Current.Session["IsAssessmentStarting"] = false;
                    }
                    // END HERE

                    //Check if Assessment is in start Mode
                    if (System.Web.HttpContext.Current.Session["IsAssessmentStarting"] != null && Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsAssessmentStarting"]) == true)
                    {
                        //System.Diagnostics.Trace.WriteLine(" IsAssessmentStarting Next " + seqNo);
                        //System.Diagnostics.Trace.Flush();

                        seqNo = seqNo - 1;
                        sequenceItem = GetNextBackItem(courseID, direction, seqNo);
                    }
                    else
                        sequenceItem = GetNextBackItem(courseID, direction, seqNo);

                    System.Web.HttpContext.Current.Session["IsAssessmentStarting"] = false;
                }


                if (sequenceItem != null)
                {
                    seqNo += direction;
                    bool isNormalDirection = false;
                    if (direction == 1)
                        isNormalDirection = true;
                    returnCommand = LoadSequenceItemIntoCommand(courseID, seqNo, sequenceItem, isNormalDirection);
                }
                else
                {
                    returnCommand = CreateCustomeMessageForEnd();
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicyForLCMS.HandleException(ex, "ICPException");
                throw ex;
            }
            return returnCommand;
        }
        

        /// <summary>
        /// The method create command object based on GOTO request(Clicking on TOC item). Command object will contain slide information
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <param name="contentObjectID">ContentObjectID integer value represent the TOC item's ID</param>
        /// <returns>If successfully execute returns ShowSlide command object</returns>
        public object Goto(int courseID, int contentObjectID, String type)
        {
            object returnCommand = new object();
            try
            {
                int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["CurrentIndex"]);
                int studentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerID"]);
                string itemGUID = System.Web.HttpContext.Current.Session["ItemGUID"].ToString();
                string sceneGUID = System.Web.HttpContext.Current.Session["SceneGUID"].ToString();
                string itemType = "";
                int learnerSessionIDPrimary = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerSessionIDPrimary"]);
                /*LCMS-8972 - Start*/
                DateTime assetStartTime = Convert.ToDateTime(System.Web.HttpContext.Current.Session["AssetStartTime"]);
                /*LCMS-8972 - End*/
                System.Web.HttpContext.Current.Session["IsAssessmentStarting"] = false;

                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {
                    int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                    int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                    itemType = cacheManager.GetSequenceItemType(courseID, seqNo, source, courseConfigurationID);

                }

                //Here we have to Save the current running item. (We are saving the info at the end not at the beginning) 
                //if (
                /*LCMS-8972 - Start*/
                SaveCourseStudentTrack(itemGUID, sceneGUID, learnerSessionIDPrimary, itemType, assetStartTime);
                /*LCMS-8972 - End*/
                //    )
                //{


                //Abdus Samad 
                //LCMS-13556
                //Start
                if (type == "Scene")
                {
                    type = "ContentAsset";
                }
                //Stop
                    seqNo = GetSequenceNoBySequenceItemID(courseID, contentObjectID, type);

                    ICPCourseService.SequenceItem sequenceItem = GetSequenceItem(courseID, seqNo);

                    returnCommand = LoadSequenceItemIntoCommand(courseID, seqNo, sequenceItem, true);

                //}
                //else
                //{
                //    returnCommand = CreateErrorMessageForInvalidMove();
                //}
            }
            catch (Exception ex)
            {
                ExceptionPolicyForLCMS.HandleException(ex, "ICPException");
                throw ex;
            }
            return returnCommand;


        }


        /// <summary>
        /// This method gets the TOC from course service and sends the command object to client which will contain TOC information
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <returns>If successfully execute returns ShowTableofContent command object</returns>
        public object GetTOC(int courseID, int studentID,int enrollmentID)
        {
            ICP4.CommunicationLogic.CommunicationCommand.ShowTableofContent.ShowTableofContent showTableofContent = new ICP4.CommunicationLogic.CommunicationCommand.ShowTableofContent.ShowTableofContent();
            showTableofContent.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowTableofContent;
            showTableofContent.TableOfContent = new ICP4.CommunicationLogic.CommunicationCommand.ShowTableofContent.TableOfContent();

            int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
            ICPCourseService.CourseConfiguration courseConfiguration = GetCourseConfiguration(courseConfigurationID);

            if (courseConfiguration.PlayerEnableContent)
            {

                ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService();
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                ICPCourseService.TableOfContent serviceTableOfContent = null;

                bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsPreview"]);
                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {
                    if (ConfigurationManager.AppSettings["ClearCache"] == "Yes" || isPreview == true)
                    {
                        //cacheManager.RemoveCourseTOCInCache(courseID);

                        serviceTableOfContent = courseService.GetTableOfContent(courseID);
                        HttpRuntime.Cache["COURSETOC" + "_" + courseID.ToString() + "_" + source.ToString()] = serviceTableOfContent;
                        
                    }
                    else
                    {
                        serviceTableOfContent = cacheManager.GetCourseTOCInCache(courseID, source);
                    }
                    
                    //serviceTableOfContent = cacheManager.GetCourseTOCInCache(courseID);

                    if (serviceTableOfContent == null)
                    {
                        serviceTableOfContent = courseService.GetTableOfContent(courseID);
                        cacheManager.CreateCourseTOCInCache(courseID, serviceTableOfContent, source);
                    }
                }


                


                ICP4.CommunicationLogic.CommunicationCommand.ShowTableofContent.TableOfContent tableOfContent = new ICP4.CommunicationLogic.CommunicationCommand.ShowTableofContent.TableOfContent();
                ICP4.CommunicationLogic.CommunicationCommand.ShowTableofContent.TOCItem contentObjectItem = new ICP4.CommunicationLogic.CommunicationCommand.ShowTableofContent.TOCItem();
                List<ICP4.CommunicationLogic.CommunicationCommand.ShowTableofContent.TOCItem> contentObjectItems = new List<ICP4.CommunicationLogic.CommunicationCommand.ShowTableofContent.TOCItem>();

                List<int> traversedContentObjectIDs = new List<int>();


                //byDefault represent isDisabled for content object in TOC
                bool byDefault = false;
                if (courseConfiguration.PlayerCourseFlow == "First Time Linear")
                {
                    traversedContentObjectIDs = CreateListOfTraversedContentObjects(courseID, studentID,enrollmentID);
                    byDefault = true;
                }

                try
                {

                    tableOfContent.TOCItems = new List<ICP4.CommunicationLogic.CommunicationCommand.ShowTableofContent.TOCItem>();
                    tableOfContent.TOCItems = ContentObjectsTranslator(serviceTableOfContent.TOCItems, traversedContentObjectIDs, byDefault);
                   // tableOfContent.ContentObjectItems = AppendBreadCrumbs(tableOfContent.ContentObjectItems, "");

                    showTableofContent.TableOfContent = tableOfContent;
                    return showTableofContent;

                }
                catch (Exception ex)
                {
                    ExceptionPolicyForLCMS.HandleException(ex, "ICPException");
                    throw ex;

                }
            }
            else
            {
                return showTableofContent;
            }
        }
      
        private List<ICP4.CommunicationLogic.CommunicationCommand.ShowTableofContent.TOCItem> AppendBreadCrumbs(List<ICP4.CommunicationLogic.CommunicationCommand.ShowTableofContent.TOCItem> contentObjects, string parentBreadCrumb)
        {
            foreach (ICP4.CommunicationLogic.CommunicationCommand.ShowTableofContent.TOCItem contentObject in contentObjects)
            {
                contentObject.BreadCrumb = parentBreadCrumb + contentObject.BreadCrumb;
                AppendBreadCrumbs(contentObject.TOCItems, contentObject.BreadCrumb);
            }
            return contentObjects;
        }

        /// <summary>
        /// This methods get all glossary from course service and send the command object to client which will contain the Glossary information
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <param name="sceneID">SceneID integer value</param>
        /// <returns>If successfully execute returns ShowGlossary command object</returns>
        public object GetGlossary(int courseID, int sceneID)
        {

            ICP4.CommunicationLogic.CommunicationCommand.ShowGlossary.ShowGlossary showGlossary = new ICP4.CommunicationLogic.CommunicationCommand.ShowGlossary.ShowGlossary();
            ICP4.CommunicationLogic.CommunicationCommand.ShowGlossary.Glossary glossary = new ICP4.CommunicationLogic.CommunicationCommand.ShowGlossary.Glossary();
            showGlossary.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowGlossary;
            showGlossary.Glossaries = new List<ICP4.CommunicationLogic.CommunicationCommand.ShowGlossary.Glossary>();
            int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
            ICPCourseService.CourseConfiguration courseConfiguration = GetCourseConfiguration(courseConfigurationID);

            if (courseConfiguration.PlayerEnableContent)
            {

                try
                {

                    ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService();
                    courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                    courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                    ICPCourseService.GlossaryItem[] glossaryItems;

                    if (sceneID == 0)
                        glossaryItems = courseService.GetCourseGlossaryItems(courseID);
                    else
                        glossaryItems = courseService.GetCourseSceneGlossaryItems(courseID, sceneID);


                    foreach (ICPCourseService.GlossaryItem glossaryItem in glossaryItems)
                    {
                        glossary = new ICP4.CommunicationLogic.CommunicationCommand.ShowGlossary.Glossary();
                        glossary.GlossaryID = glossaryItem.GlossaryItemID;
                        glossary.Term = glossaryItem.Term;

                        showGlossary.Glossaries.Add(glossary);
                    }

                    return showGlossary;
                }

                catch (Exception ex)
                {
                    ExceptionPolicyForLCMS.HandleException(ex, "ICPException");
                    throw ex;

                }
            }
            else
            {
                return showGlossary;
            }

        }

      

        /// <summary>
        /// This method get the detail of glossary item from course service and send the command object to client which will contain the Glossary in detail
        /// </summary>
        /// <param name="glossaryID">Glossary ID</param>
        /// <returns>If successfully execute returns ShowGlossaryInDetail command object</returns>
        public object GetGlossaryItem(int glossaryID)
        {
            ICP4.CommunicationLogic.CommunicationCommand.ShowGlossaryInDetail.ShowGlossaryInDetail showGlossaryInDetail = new ICP4.CommunicationLogic.CommunicationCommand.ShowGlossaryInDetail.ShowGlossaryInDetail();
            try
            {
                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {
              
                    string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                    string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();

                    ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService();
                    courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                    courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                    showGlossaryInDetail.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowGlossaryInDetail;
                    showGlossaryInDetail.GlossaryDetail = new ICP4.CommunicationLogic.CommunicationCommand.ShowGlossaryInDetail.GlossaryDetail();
                    showGlossaryInDetail.GlossaryDetail.GlossaryID = glossaryID;

                    showGlossaryInDetail.GlossaryDetail.GlossaryDefinition = ((ICPCourseService.GlossaryItem)courseService.GetGlossaryItemDefinition(glossaryID)).Definition;
                    showGlossaryInDetail.GlossaryDetail.HeadingGlossaryBoxTitle = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingGlossaryBoxTitle, brandCode, variant);
                    showGlossaryInDetail.GlossaryDetail.HeadingGlossaryDefinition = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingGlossaryDefinition, brandCode, variant);
                    showGlossaryInDetail.GlossaryDetail.HeadingGlossaryTerm = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingGlossaryTerm, brandCode, variant);
                    showGlossaryInDetail.GlossaryDetail.ButtonText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingGlossaryOkButton, brandCode, variant);
                }
                return showGlossaryInDetail;
            }

            catch (Exception ex)
            {
                ExceptionPolicyForLCMS.HandleException(ex, "ICPException");
                throw ex;

            }

        }


        /// <summary>
        /// This method get all bookmarks related to certain Course and Learner and send the command object to client which will contain all the bookmarks
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <param name="studentID">StudentID integer value</param>
        /// <returns>If successfully execute returns ShowBookmark command object</returns>
        public object GetCourseStudentBookmark(int courseID, int studentID,int enrollmentID)
        {
            ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.ShowBookmark showBookmark = new ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.ShowBookmark();
            showBookmark.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowBookMark;
            showBookmark.Bookmarks = new List<ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.Bookmark>();

            //Code for preview mode as in preview mode we do not want to save/load bookmarks
            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["isPreview"]);
            if (isPreview)
            {
                //return showBookmark;
            }
            ///////////////////////////////////////////////////////////////////////////////

            List<ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.Bookmark> bookmarks = new List<ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.Bookmark>();
            ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.Bookmark bookmark = new ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.Bookmark();

            try
            {
                using (ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
                {
                    trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                    trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                    ICPTrackingService.LearnerCourseBookMarkInfo[] learnerBookmarks = trackingService.GetAllLearnerCourseBookMarksInfo(courseID, studentID,enrollmentID);
                    if (learnerBookmarks.Length > 0)
                    {
                        foreach (ICPTrackingService.LearnerCourseBookMarkInfo learnerCourseBookMarkInfo in learnerBookmarks)
                        {
                            bookmark = new ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.Bookmark();
                            bookmark.BookMarkID = learnerCourseBookMarkInfo.BookMarkInfoID;
                            bookmark.BookMarkTitle = learnerCourseBookMarkInfo.BookMarkTitle;
                            if (!learnerCourseBookMarkInfo.CreatedDate.ToString().Equals("1/1/0001 12:00:00 AM"))
                            {
                                bookmark.BookMarkDate = string.Format("{0:MM/dd/yyyy}", learnerCourseBookMarkInfo.CreatedDate);
                                bookmark.BookMarkTime = string.Format("{0:hh:mm tt}", learnerCourseBookMarkInfo.CreatedDate);
                            }
                            else
                            {
                                bookmark.BookMarkDate = string.Empty;
                                bookmark.BookMarkTime = string.Empty;
                            }
                            bookmarks.Add(bookmark);
                        }
                        showBookmark.Bookmarks = bookmarks;

                    }

                }
                return showBookmark;
            }
            catch (Exception ex)
            {
                ExceptionPolicyForLCMS.HandleException(ex, "ICPException");
                throw ex;

            }

        }


        /// <summary>
        /// This methods get all course material from course service and send the command object to client which will contain the course material information
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <returns>If successfully execute returns ShowCourseMaterial command object</returns>
        public object GetCourseMaterial(int courseID)
        {

            ICP4.CommunicationLogic.CommunicationCommand.ShowCourseMaterial.ShowCourseMaterial showCourseMaterial = new ICP4.CommunicationLogic.CommunicationCommand.ShowCourseMaterial.ShowCourseMaterial();
            ICP4.CommunicationLogic.CommunicationCommand.ShowCourseMaterial.CourseMaterial courseMaterial = new ICP4.CommunicationLogic.CommunicationCommand.ShowCourseMaterial.CourseMaterial();
            showCourseMaterial.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowCourseMaterial;
            showCourseMaterial.CourseMaterials = new List<ICP4.CommunicationLogic.CommunicationCommand.ShowCourseMaterial.CourseMaterial>();


            try
            {

                ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService();
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                ICPCourseService.CourseMaterialInfo[] courseMaterialInfos;


                courseMaterialInfos = courseService.GetCourseMaterialInfo(courseID);


                foreach (ICPCourseService.CourseMaterialInfo courseMaterialInfo in courseMaterialInfos)
                {
                    courseMaterial = new ICP4.CommunicationLogic.CommunicationCommand.ShowCourseMaterial.CourseMaterial();

                    string iconURL = "images/ico_file.png";
                    if (courseMaterialInfo.CourseMaterialAssetLocation != "")
                    {
                        iconURL = FindAppropriateIcon(courseMaterialInfo.CourseMaterialAssetLocation);

                    }

                    courseMaterial.CourseMaterialIconUrl = iconURL;
                    courseMaterial.CourseMaterialURL = courseMaterialInfo.CourseMaterialAssetLocation;

                    if (courseMaterialInfo.CourseMaterialAssetLocation == "")
                    {
                        courseMaterial.CourseMaterialURL = "";
                    }
                    else if (courseMaterialInfo.CourseMaterialAssetLocation.IndexOf("http") == -1 && !courseMaterialInfo.CourseMaterialAssetLocation.ToLower().StartsWith("mailto:")) // else if (courseMaterialInfo.CourseMaterialAssetLocation.IndexOf("http") == -1)
                    {
                        courseMaterial.CourseMaterialURL = ConfigurationManager.AppSettings["ICPFileSystem"] + courseMaterialInfo.CourseMaterialAssetLocation;
                    }

                    courseMaterial.CourseMaterialTitle = courseMaterialInfo.CourseMaterialAssetName;
                    courseMaterial.CourseMaterialID = 0;

                    showCourseMaterial.CourseMaterials.Add(courseMaterial);
                }

                return showCourseMaterial;
            }

            catch (Exception ex)
            {
                ExceptionPolicyForLCMS.HandleException(ex, "ICPException");
                throw ex;

            }


        }

        /// <summary>
        /// This method save the student bookmark related to certain course and send the command object to client which will contain all the bookmarks
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <param name="studentID">StudentID integer value</param>
        /// <param name="item_GUID">ItemGUID string value whcih represent the asset</param>
        /// <param name="flashSceneNo">FlashSceneNo string value which represent the internal flash scene no</param>
        /// <param name="bookMarkTitle">BookmarkTitle string value</param>
        /// <param name="lastScene">LastScene string value which represent the internal flash file last scene</param>
        /// <param name="isMovieEnded">IsMovieEnded boolean value which represent the state of movie</param>
        /// <param name="nextButtonState">NextButtonState boolean value which represent the state of NEXT button</param>
        /// <returns>If successfully execute returns ShowBookmark command object</returns>
        public object SaveCourseStudentBookmark(int courseID, int studentID,int enrollmentID, string item_GUID, string scene_GUID, string flashSceneNo, string bookMarkTitle, string lastScene, bool isMovieEnded, bool nextButtonState, string firstSceneName)
        {
            //Code for preview mode as in preview mode we do not want to save bookmarks
            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["isPreview"]);
            if (isPreview)
            {
                ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.ShowBookmark showBookmark = new ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.ShowBookmark();
                showBookmark.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowBookMark;
                showBookmark.Bookmarks = new List<ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.Bookmark>();
                return showBookmark;
            }
            ///////////////////////////////////////////////////////////////////////////////

            bool isSaved = false;
            using (ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
            {
                trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                isSaved = trackingService.SaveLearnerCourseBookmark(courseID, studentID,enrollmentID, item_GUID, scene_GUID, flashSceneNo, bookMarkTitle, lastScene, isMovieEnded, nextButtonState, firstSceneName,DateTime.Now);
            }

            if (isSaved)
            {
                ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.ShowBookmark showBookmark = new ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.ShowBookmark();
                showBookmark.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowBookMark;
                showBookmark.Bookmarks = new List<ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.Bookmark>();
                List<ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.Bookmark> bookmarks = new List<ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.Bookmark>();
                ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.Bookmark bookmark = new ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.Bookmark();

                try
                {
                    using (ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
                    {
                        trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                        trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                        ICPTrackingService.LearnerCourseBookMarkInfo[] learnerBookmarks = trackingService.GetAllLearnerCourseBookMarksInfo(courseID, studentID,enrollmentID);
                        if (learnerBookmarks.Length > 0)
                        {
                            foreach (ICPTrackingService.LearnerCourseBookMarkInfo learnerCourseBookMarkInfo in learnerBookmarks)
                            {
                                bookmark = new ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.Bookmark();
                                bookmark.BookMarkID = learnerCourseBookMarkInfo.BookMarkInfoID;
                                bookmark.BookMarkTitle = learnerCourseBookMarkInfo.BookMarkTitle;
                                if (!learnerCourseBookMarkInfo.CreatedDate.ToString().Equals("1/1/0001 12:00:00 AM"))
                                {
                                    bookmark.BookMarkDate = string.Format("{0:MM/dd/yyyy}", learnerCourseBookMarkInfo.CreatedDate);
                                    bookmark.BookMarkTime = string.Format("{0:hh:mm tt}", learnerCourseBookMarkInfo.CreatedDate);
                                }
                                else
                                {
                                    bookmark.BookMarkDate = string.Empty;
                                    bookmark.BookMarkTime = string.Empty;
                                }                                
                                bookmarks.Add(bookmark);
                            }
                            showBookmark.Bookmarks = bookmarks;
                        }

                    }
                    return showBookmark;
                }
                catch (Exception ex)
                {
                    ExceptionPolicyForLCMS.HandleException(ex, "ICPException");
                    throw ex;

                }
            }
            else
            {
                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {
                    string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                    string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                    return CreateErrorMessage(courseID, cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingGlossaryBoxTitle, brandCode, variant));
                }

            }


        }

        /// <summary>
        /// This method delete the student bookmark against the bookmarkID 
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <param name="studentID">StudentID integer value</param>
        /// <param name="enrollmentID">EnrollmentID int value whcih represent the integer value</param>        
        /// <returns>If successfully execute returns ShowBookmark command object</returns>
        public object DeleteStudentBookmark(int courseID, int studentID, int enrollmentID, int bookmarkID)
        {
            //Code for preview mode as in preview mode we do not want to save bookmarks
            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["isPreview"]);
            if (isPreview)
            {
                ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.ShowBookmark showBookmark = new ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.ShowBookmark();
                showBookmark.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowBookMark;
                showBookmark.Bookmarks = new List<ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.Bookmark>();
                return showBookmark;
            }
            ///////////////////////////////////////////////////////////////////////////////

            bool isDeleted = false;
            using (ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
            {
                trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                isDeleted = trackingService.DeleteLearnerCourseBookMarksInfo(bookmarkID);
            }

            if (isDeleted)
            {
                ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.ShowBookmark showBookmark = new ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.ShowBookmark();
                showBookmark.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowBookMark;
                showBookmark.Bookmarks = new List<ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.Bookmark>();
                List<ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.Bookmark> bookmarks = new List<ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.Bookmark>();
                ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.Bookmark bookmark = new ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.Bookmark();

                try
                {
                    using (ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
                    {
                        trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                        trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                        ICPTrackingService.LearnerCourseBookMarkInfo[] learnerBookmarks = trackingService.GetAllLearnerCourseBookMarksInfo(courseID, studentID, enrollmentID);
                        if (learnerBookmarks.Length > 0)
                        {
                            foreach (ICPTrackingService.LearnerCourseBookMarkInfo learnerCourseBookMarkInfo in learnerBookmarks)
                            {
                                bookmark = new ICP4.CommunicationLogic.CommunicationCommand.ShowBookmark.Bookmark();
                                bookmark.BookMarkID = learnerCourseBookMarkInfo.BookMarkInfoID;
                                bookmark.BookMarkTitle = learnerCourseBookMarkInfo.BookMarkTitle;
                                if (!learnerCourseBookMarkInfo.CreatedDate.ToString().Equals("1/1/0001 12:00:00 AM"))
                                {
                                    bookmark.BookMarkDate = string.Format("{0:MM/dd/yyyy}", learnerCourseBookMarkInfo.CreatedDate);
                                    bookmark.BookMarkTime = string.Format("{0:hh:mm tt}", learnerCourseBookMarkInfo.CreatedDate);
                                }
                                else
                                {
                                    bookmark.BookMarkDate = string.Empty;
                                    bookmark.BookMarkTime = string.Empty;
                                }                                
                                bookmarks.Add(bookmark);
                            }
                            showBookmark.Bookmarks = bookmarks;
                        }

                    }
                    return showBookmark;
                }
                catch (Exception ex)
                {
                    ExceptionPolicyForLCMS.HandleException(ex, "ICPException");
                    throw ex;

                }
            }
            else
            {
                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {
                    string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                    string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                    return CreateErrorMessage(courseID, cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingGlossaryBoxTitle, brandCode, variant));
                }

            }
        }

        /// <summary>
        /// This method get the information related to Bookmark and send the command object to client which will contain the the slide information.
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <param name="bookmarkID">BookmarkId integer value</param>
        /// <returns>If successfully execute returns ShowSlide command object</returns>
        public object LoadBookmark(int courseID, int bookmarkID)
        {
            ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide showSlide = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide();
            showSlide.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowSlide;
            showSlide.MediaAsset = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset();
            ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset slideMediaAsset = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset();


            // slideMediaAsset.IsJSPlayerEnabled = System.Configuration.ConfigurationManager.AppSettings["isJSPlayerEnabled"];
            slideMediaAsset.IsJSPlayerEnabled = CheckForJSEnabledForCourse(Convert.ToString(courseID)); 
            
            
            string icpFileSystem = ConfigurationManager.AppSettings["ICPFileSystem"];
            string courseName = Convert.ToString(HttpContext.Current.Session["CourseName"]);
            bool isDemoable = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]);
            double percentageCourseProgress = 0;
            ICPCourseService.CourseConfiguration courseConfiguration = null;
            int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);

            try
            {
                using (ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
                {
                    trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                    trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                    ICPTrackingService.LearnerCourseBookMarkInfo learnerCourseBookMarkInfo = trackingService.GetLearnerCourseBookMarkInfo(bookmarkID);
                    slideMediaAsset.IsMovieEnded = learnerCourseBookMarkInfo.IsMovieEnded;
                    slideMediaAsset.LastScene = learnerCourseBookMarkInfo.LastScene;
                    slideMediaAsset.NextButtonState = learnerCourseBookMarkInfo.NextButtonState;
                    slideMediaAsset.FlashSceneNo = learnerCourseBookMarkInfo.FlashSceneNo;
                    slideMediaAsset.FlashFirstSceneName = learnerCourseBookMarkInfo.FirstSceneName;


                    //search cache and send the asset 
                    using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                    {

                        //Here we are tracking currently running slide and setting pointer for slide which is about to load due to book mark
                        #region Tracking and Updating Pointers
                        int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                        int seqNo = cacheManager.GetRequestedItemNoFromQueueOnItemGUIDAndScenGUID(courseID, learnerCourseBookMarkInfo.Item_GUID, learnerCourseBookMarkInfo.Scene_GUID, source, courseConfigurationID);
                        if (seqNo == -1)
                            seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["CurrentIndex"]);

                        int studentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerID"]);
                        string itemGUID = System.Web.HttpContext.Current.Session["ItemGUID"].ToString();
                        string sceneGUID = System.Web.HttpContext.Current.Session["SceneGUID"].ToString();
                        string itemType = "";
                        int learnerSessionIDPrimary = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerSessionIDPrimary"]);
                        /*LCMS-8972 - Start*/
                        DateTime assetStartTime = Convert.ToDateTime(System.Web.HttpContext.Current.Session["AssetStartTime"]);
                        /*LCMS-8972 - End*/

                        
                        itemType = cacheManager.GetSequenceItemType(courseID, seqNo, source, courseConfigurationID);


                        //Here we have to Save the current running item. (We are saving the info at the end not at the beginning) 
                        /*LCMS-8972 - Start*/
                        SaveCourseStudentTrack(itemGUID, sceneGUID, learnerSessionIDPrimary, itemType, assetStartTime);
                        /*LCMS-8972 - End*/


                        ICPCourseService.SequenceItem sequenceItem = cacheManager.GetRequestedItemFromQueue(courseID, seqNo, source, courseConfigurationID);

                        System.Web.HttpContext.Current.Session["CurrentIndex"] = seqNo;
                        System.Web.HttpContext.Current.Session["ItemGUID"] = sequenceItem.Item_GUID.ToString();
                        System.Web.HttpContext.Current.Session["SceneGUID"] = sequenceItem.SceneGUID.ToString();
                        //System.Web.HttpContext.Current.Session["AssetStartTime"] = DateTime.Now;
                        #endregion

                        slideMediaAsset.MediaAssetID = sequenceItem.Item_GUID;
                        slideMediaAsset.MediaAssetType = sequenceItem.SequenceItemType;
                        slideMediaAsset.MediaAssetSceneID = sequenceItem.SceneGUID;
                        slideMediaAsset.ContentObjectID = sequenceItem.ParentID;
                        if (isDemoable == false)
                        {
                            slideMediaAsset.TitleBreadCrumb = GetTitleBreadCrumb(courseID, seqNo);
                            #region Course Progress Bar
                            {
                                try
                                {
                                    int visitedSceneCount;
                                    int totalSceneCount;
                                    percentageCourseProgress = CalculateCourseProgressPercentageFromSequence(courseID, seqNo, Convert.ToInt32(System.Web.HttpContext.Current.Session["TotalNoOfViewableScenes"]), out visitedSceneCount, out totalSceneCount);

                                    if (percentageCourseProgress > 0)
                                    {
                                        slideMediaAsset.CourseProgressPercentage = Convert.ToInt32(Math.Round(percentageCourseProgress));
                                        slideMediaAsset.CourseProgressToolTip = GetToolTipForProgressBar(courseID, courseName, seqNo, totalSceneCount, visitedSceneCount);
                                    }
                                }
                                catch (Exception exception)
                                {
                                    ExceptionPolicyForLCMS.HandleException(exception, "ICPException");
                                    slideMediaAsset.CourseProgressPercentage = 0;
                                    slideMediaAsset.CourseProgressToolTip = string.Empty;
                                }
                            }
                            #endregion

                        }
                        else
                        {
                            slideMediaAsset.TitleBreadCrumb = string.Empty;
                            slideMediaAsset.CourseProgressPercentage = 0;
                            slideMediaAsset.CourseProgressToolTip = string.Empty;

                        }
                        slideMediaAsset.ViewStreaming = sequenceItem.IsViewStreamingInScene;

                        slideMediaAsset.PlayPauseFeature = sequenceItem.IsPlayPauseFeatureInScene; //Added By Abdus Samad For lcms-12267
                     
                        courseConfiguration = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);
                        if (Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]) == false)
                        {
                            # region Policy checking for scene Duration
                            if (courseConfiguration.PlayerEnforceTimedOutline)
                            {
                                slideMediaAsset.SceneDurationTimer = sequenceItem.SceneDuration;
                            }
                            else
                            {
                                slideMediaAsset.SceneDurationTimer = 0;
                            }
                            #endregion
                        }
                        else
                        {
                            slideMediaAsset.SceneDurationTimer = 0;
                        }
                        if (sequenceItem.SequenceItemType == "FlashAsset")
                        {
                            if (sequenceItem.Assets != null)
                            {
                                if (sequenceItem.Assets[0].URL.IndexOf("http") == -1)
                                    slideMediaAsset.FlashURL = icpFileSystem + sequenceItem.Assets[0].URL;
                                else
                                    slideMediaAsset.FlashURL = sequenceItem.Assets[0].URL;
                            }
                        }
                        else if (sequenceItem.SequenceItemType == "ContentAsset")
                        {
                            string HTML = "";
                            bool isVOText = false;
                            bool isText = false;
                            bool isVisualTop = false;
                            bool isHeading = false;
                            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
                            {
                                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                                if (sequenceItem.Assets != null)
                                {
                                    foreach (ICPCourseService.Asset localasset in sequenceItem.Assets)
                                    {
                                        if (localasset.AssetSceneOrientation == "$Text" && localasset.ContentText != string.Empty)
                                        {
                                            isText = true;
                                        }
                                        if (localasset.AssetSceneOrientation == "$VOText" && localasset.ContentText != string.Empty)
                                        {
                                            isVOText = true;
                                        }
                                        if (localasset.AssetSceneOrientation == "$Heading")
                                        {
                                            if (localasset.ContentText != string.Empty || localasset.IsTopicTitleVisible == true)
                                                isHeading = true;
                                        }
                                        if (localasset.AssetSceneOrientation == "$VisualTop" && localasset.URL != string.Empty)
                                        {
                                            isVisualTop = true;
                                        }
                                    }
                                }
                                // isVisualTop = true;//There is no variant defined for visual top
                                isText = true;//There is no variant defined for text area.
                                ICPCourseService.SceneTemplate sceneTemplate = new ICP4.BusinessLogic.ICPCourseService.SceneTemplate();
                                sceneTemplate = courseService.GetSceneTemplateWithHTMLVariant(sequenceItem.SceneTemplateID, isText, isVOText, isVisualTop, isHeading);
                                HTML = sceneTemplate.TemplateHTML;
                                StringBuilder sb = new StringBuilder(HTML);
                                string sceneName = string.Empty;
                                bool isShowHeading = false;
                                bool isShowTopicTitle = false;
                                if (sequenceItem.Assets != null)
                                {
                                    foreach (ICPCourseService.Asset localasset in sequenceItem.Assets)
                                    {
                                        if (localasset.AssetSceneOrientation == "$Heading")
                                        {
                                            isShowHeading = true;
                                            if (localasset.IsTopicTitleVisible == true)
                                            {
                                                isShowTopicTitle = true;
                                            }
                                            sceneName = localasset.ContentText;
                                        }
                                        if (localasset.AssetSceneOrientation == "$Text")
                                        {
                                            sb.Replace("$Text", localasset.ContentText);
                                        }
                                        if (localasset.AssetSceneOrientation == "$VOText")
                                        {
                                            sb.Replace("$VOText", localasset.ContentText);
                                        }
                                        if (localasset.AssetSceneOrientation == "$VisualTop")
                                        {
                                            string visualTopUrl = "";
                                            if (localasset.URL.IndexOf('.') != -1)
                                                slideMediaAsset.VisualTopType = System.IO.Path.GetExtension(localasset.URL).Remove(0, 1);

                                            if (localasset.URL.IndexOf("http") == -1 && localasset.URL != string.Empty)
                                                visualTopUrl = icpFileSystem + localasset.URL;
                                            else
                                                visualTopUrl = localasset.URL;

                                            sb.Replace("$VisualTop", visualTopUrl);
                                            //if (visualTopUrl.IndexOf('.')!=-1)
                                            //    slideMediaAsset.VisualTopType = System.IO.Path.GetExtension(visualTopUrl).Remove(0,1);
                                        }
                                        if (localasset.AssetSceneOrientation == "$Audio")
                                        {
                                            if (localasset.URL.IndexOf("http") == -1)
                                                slideMediaAsset.AudioURL = icpFileSystem + localasset.URL;
                                            else
                                                slideMediaAsset.AudioURL = localasset.URL;
                                        }

                                    }
                                }

                                sb.Replace("$VOText", "");
                                sb.Replace("$Text", "");
                                bool isVisualTopFound = false;
                                if (sb.ToString().Contains("$VisualTop") == false)
                                    isVisualTopFound = true;
                                #region Code specific to the SceneTemplateTypes
                                switch (sceneTemplate.SceneTemplateType)
                                {
                                    case SceneTemplateType.SI:
                                        {

                                            if (isVisualTopFound == false)
                                            {

                                                string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                                                string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                                                string imageURL = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageDefaultSpecialInstructionsImage, brandCode, variant);
                                                if (imageURL.IndexOf('.') != -1)
                                                    slideMediaAsset.VisualTopType = System.IO.Path.GetExtension(imageURL).Remove(0, 1);
                                                sb.Replace("$VisualTop", imageURL);

                                            }
                                            if (isShowHeading == true)
                                            {
                                                sb.Replace("$Heading", sceneName);
                                            }
                                            if (isDemoable == false)
                                                slideMediaAsset.TitleBreadCrumb = string.Empty;
                                            break;

                                        }
                                    case SceneTemplateType.SME:
                                        {

                                            if (isVisualTopFound == false)
                                            {

                                                string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                                                string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                                                string imageURL = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageDefaultSMEImage, brandCode, variant);
                                                if (imageURL.IndexOf('.') != -1)
                                                    slideMediaAsset.VisualTopType = System.IO.Path.GetExtension(imageURL).Remove(0, 1);
                                                sb.Replace("$VisualTop", imageURL);

                                            }
                                            if (isShowHeading == true)
                                            {
                                                sb.Replace("$Heading", sceneName);
                                            }
                                            if (isDemoable == false)
                                                slideMediaAsset.TitleBreadCrumb = string.Empty;
                                            break;

                                        }

                                    case SceneTemplateType.CD:
                                        {
                                            if (isVisualTopFound == false)
                                            {

                                                string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                                                string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                                                string imageURL = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageDefaultCourseDescriptionImage, brandCode, variant);
                                                if (imageURL.IndexOf('.') != -1)
                                                    slideMediaAsset.VisualTopType = System.IO.Path.GetExtension(imageURL).Remove(0, 1);
                                                sb.Replace("$VisualTop", imageURL);

                                            }
                                            if (isShowHeading == true)
                                            {
                                                sb.Replace("$Heading", sceneName);
                                            }
                                            if (isDemoable == false)
                                                slideMediaAsset.TitleBreadCrumb = string.Empty;
                                            break;

                                        }

                                    case SceneTemplateType.CLO:
                                        {
                                            if (isVisualTopFound == false)
                                            {

                                                string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                                                string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                                                string imageURL = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageDefaultCourseLearningObjectivesImage, brandCode, variant);
                                                if (imageURL.IndexOf('.') != -1)
                                                    slideMediaAsset.VisualTopType = System.IO.Path.GetExtension(imageURL).Remove(0, 1);
                                                sb.Replace("$VisualTop", imageURL);

                                            }
                                            if (isShowHeading == true)
                                            {
                                                sb.Replace("$Heading", sceneName);
                                            }
                                            if (isDemoable == false)
                                                slideMediaAsset.TitleBreadCrumb = string.Empty;
                                            break;


                                        }

                                    case SceneTemplateType.LI:
                                        {
                                            if (isVisualTopFound == false)
                                            {

                                                string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                                                string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                                                string imageURL = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageDefaultLessonIntroImage, brandCode, variant);
                                                if (imageURL.IndexOf('.') != -1)
                                                    slideMediaAsset.VisualTopType = System.IO.Path.GetExtension(imageURL).Remove(0, 1);
                                                sb.Replace("$VisualTop", imageURL);

                                            }
                                            if (isShowHeading == true)
                                            {
                                                sb.Replace("$Heading", sceneName);
                                            }
                                            if (isDemoable == false)
                                                slideMediaAsset.TitleBreadCrumb = string.Empty;
                                            break;

                                        }

                                    case SceneTemplateType.LT:
                                        {
                                            if (isVisualTopFound == false)
                                            {

                                                string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                                                string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                                                string imageURL = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageDefaultLessonTopicsImage, brandCode, variant);
                                                if (imageURL.IndexOf('.') != -1)
                                                    slideMediaAsset.VisualTopType = System.IO.Path.GetExtension(imageURL).Remove(0, 1);
                                                sb.Replace("$VisualTop", imageURL);

                                            }
                                            if (isShowHeading == true)
                                            {
                                                sb.Replace("$Heading", sceneName);
                                            }
                                            if (isDemoable == false)
                                                slideMediaAsset.TitleBreadCrumb = string.Empty;
                                            break;

                                        }

                                    case SceneTemplateType.LS:
                                        {
                                            if (isVisualTopFound == false)
                                            {

                                                string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                                                string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                                                string imageURL = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageDefaultLessonSummaryImage, brandCode, variant);
                                                if (imageURL.IndexOf('.') != -1)
                                                    slideMediaAsset.VisualTopType = System.IO.Path.GetExtension(imageURL).Remove(0, 1);
                                                sb.Replace("$VisualTop", imageURL);

                                            }
                                            if (isShowHeading == true)
                                            {
                                                sb.Replace("$Heading", sceneName);
                                            }
                                            if (isDemoable == false)
                                                slideMediaAsset.TitleBreadCrumb = string.Empty;
                                            break;

                                        }
                                    case SceneTemplateType.MC:
                                        {
                                            slideMediaAsset.MCSceneXml = sequenceItem.MCSceneXml;
                                            if (isShowHeading == true)
                                            {
                                                string sceneBreadcrumb = string.Empty;
                                                if (isShowTopicTitle == true && isDemoable == false)
                                                {
                                                    string topicTitle = GetSceneBreadCrumb(courseID, seqNo);
                                                    if (sceneName != string.Empty)
                                                        sceneBreadcrumb = topicTitle + ": ";
                                                    else
                                                        sceneBreadcrumb = topicTitle;
                                                }
                                                sceneBreadcrumb += sceneName;
                                                sb.Replace("$Heading", sceneBreadcrumb);
                                            }                                            
                                            break;

                                        }
                                    default:
                                        {
                                            if (isVisualTopFound == false)
                                            {
                                                sb.Replace("$VisualTop", "");
                                                slideMediaAsset.VisualTopType = string.Empty;
                                            }
                                            if (isShowHeading == true)
                                            {
                                                string sceneBreadcrumb = string.Empty;
                                                if (isShowTopicTitle == true && isDemoable == false)
                                                {
                                                    string topicTitle = GetSceneBreadCrumb(courseID, seqNo);
                                                    if (sceneName != string.Empty)
                                                        sceneBreadcrumb = topicTitle + ": ";
                                                    else
                                                        sceneBreadcrumb = topicTitle;
                                                }
                                                sceneBreadcrumb += sceneName;
                                                sb.Replace("$Heading", sceneBreadcrumb);
                                            }
                                            if (isDemoable == false)
                                                slideMediaAsset.TitleBreadCrumb = GetTitleBreadCrumb(courseID, seqNo);
                                            break;
                                        }
                                }
                                #endregion
                                HTML = sb.ToString();

                            }

                            slideMediaAsset.TemplateHtml = HTML;
                            slideMediaAsset.TemplateHtml = slideMediaAsset.TemplateHtml.Replace("\n", "");
                        }                       

                    }

                    showSlide.MediaAsset = slideMediaAsset;
                }
                return showSlide;
            }
            catch (Exception ex)
            {
                ExceptionPolicyForLCMS.HandleException(ex, "ICPException");
                throw ex;
            }
        }

        /// <summary>
        /// This method perform the funcationality of logout and put learner track.
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <param name="learnerSessionID">LearnerSessionID string value</param>
        /// <param name="endTime">Endtime datetime value</param>
        public object EndSession(int courseID, string learnerSessionID, DateTime endTime,DateTime oldLearningSessionStartTime,bool EndingLearningSession)
        {

            //// LCMS-9213
            //// --------------------------------------------------------------------
            //HttpContext.Current.Session.Remove("askedAssessmentItemsAttributes");
            //HttpContext.Current.Session.Remove("SelectedQuestionSequenceNo");
            //HttpContext.Current.Session.Remove("Current_Assessment_LearnerStatistics_ID");
            //// --------------------------------------------------------------------


            bool TimeloggedOnServer = false;
            try
            {
                bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["isPreview"]);
                bool isDemoable = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]);

                ICPTrackingService.TrackingService trckingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();
                trckingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                trckingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                ICPTrackingService.LearnerStatistics[] learnerStatistics = null;
                double postAssessmentScore = -1;
                bool isPostAssessmentPassed = false;
                double percentageCourseProgress = 0.0;

                bool isCourseApprovalSelection = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsCourseApprovalSelection"]);

                if (isPreview == false && isDemoable == false && isCourseApprovalSelection == false)
                {
                    string itemType;
                    string itemGUID = System.Web.HttpContext.Current.Session["ItemGUID"].ToString();
                    string sceneGUID = System.Web.HttpContext.Current.Session["SceneGUID"].ToString();
                    int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["CurrentIndex"]);
                    int learnerSessionIDPrimary = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerSessionIDPrimary"]);
                    string learnerSessioGUID = Convert.ToString(System.Web.HttpContext.Current.Session["LearnerSessionID"]);
                    int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
                    /*LCMS-8972 - Start*/
                    DateTime assetStartTime = Convert.ToDateTime(System.Web.HttpContext.Current.Session["AssetStartTime"]);
                    /*LCMS-8972 - End*/
                    string lockingReason = LockingReason.GeneralCase;
                    bool courseLocked = IsCourseLocked(enrollmentID, out lockingReason);
                    ICPCourseService.CourseConfiguration courseConfiguration = null;

                    using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                    {
                        int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                        int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                        courseConfiguration = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);
                    }

                    if (courseConfiguration.PostAssessmentConfiguration.ScoreType.ToUpper().Equals(ICP4.BusinessLogic.AssessmentManager.ScoreType.NoResults.ToUpper()))
                    {
                        postAssessmentScore = -1;
                        isPostAssessmentPassed = false;
                    }
                    else
                    {
                        learnerStatistics = trckingService.GetPostAssessmentResult(learnerSessionID);
                        if (learnerStatistics != null && learnerStatistics.Length > 0)
                        {
                            postAssessmentScore = learnerStatistics[learnerStatistics.Length - 1].RawScore;
                            isPostAssessmentPassed = learnerStatistics[learnerStatistics.Length - 1].IsPass;
                        }
                    }

                    if (!courseLocked)
                    {
                        ICPCourseService.SequenceItem sequenceItem = null;
                        using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                        {
                            int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                            int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                            itemType = cacheManager.GetSequenceItemType(courseID, seqNo, source, courseConfigurationID);
                            sequenceItem = cacheManager.GetRequestedItemFromQueue(courseID, seqNo, source, courseConfigurationID);
                            //if(itemType == string.Empty)
                            //  return null;
                            if (itemType == SequenceItemTypeName.Exam)
                            {
                                itemType = sequenceItem.ExamType;
                            }
                        }


                        ////////Incase of any Assessment////////////////////
                        if (itemType == SequenceItemTypeName.PreAssessment ||
                            itemType == SequenceItemTypeName.PostAssessment ||
                            itemType == SequenceItemTypeName.Quiz ||
                            itemType == SequenceItemTypeName.PracticeExam)
                        {

                            string assessmentStage = Convert.ToString(System.Web.HttpContext.Current.Session["AssessmentStage"]);
                            /*****************/


                            if (assessmentStage == "AssessmentIsInProgress")
                            {
 
                                int masteryScore = 0;
                                switch (itemType)
                                {
                                    case SequenceItemTypeName.PreAssessment:
                                        masteryScore = courseConfiguration.PreAssessmentConfiguration.MasteryScore;
                                        break;
                                    case SequenceItemTypeName.PostAssessment:
                                        masteryScore = courseConfiguration.PostAssessmentConfiguration.MasteryScore;
                                        break;
                                    case SequenceItemTypeName.Quiz:
                                        masteryScore = courseConfiguration.QuizConfiguration.MasteryScore;
                                        break;
                                    case SequenceItemTypeName.PracticeExam:
                                        ICPCourseService.AssessmentConfiguration assessmentConfiguration = new ICP4.BusinessLogic.ICPCourseService.AssessmentConfiguration();
                                        assessmentConfiguration = (ICPCourseService.AssessmentConfiguration)System.Web.HttpContext.Current.Session["PracticeExamAssessmentConfiguration"];
                                        masteryScore = assessmentConfiguration.MasteryScore;
                                        break;
                                }
                                using (AssessmentManager.AssessmentManager assessmentManager = new ICP4.BusinessLogic.AssessmentManager.AssessmentManager())
                                {
                                    assessmentManager.EndAssessmentForcefully(masteryScore);
                                    System.Web.HttpContext.Current.Session["AssessmentStage"] = "AssessmentCompleted";
                                }

                            }
                            assessmentStage = Convert.ToString(System.Web.HttpContext.Current.Session["AssessmentStage"]);
                            if (assessmentStage == "AssessmentCompleted")
                            {
                                //CurrentAttemptNo
                                // Fix for LCMS-11161
                                double rawScore=0;
                                ICPTrackingService.LearnerStatistics[] updatedLearnerStatistics = trckingService.GetPostAssessmentResult(learnerSessionID);
                                if (updatedLearnerStatistics != null && updatedLearnerStatistics.Length > 0)
                                {

                                    rawScore = updatedLearnerStatistics[updatedLearnerStatistics.Length - 1].RawScore;
                                }
                                // End Fix for LCMS-11161
                                if (rawScore != -2) //Fix for LCMS-11161
                                {
                                    ContinueAfterAssessment(courseID);
                                }
                                courseLocked = IsCourseLocked(enrollmentID, out lockingReason);
                            }
                            else
                            {

                                if (itemType != null && itemType != string.Empty)
                                    SaveCourseStudentTrack(itemGUID, sceneGUID, learnerSessionIDPrimary, itemType, assetStartTime);
                            }

                        }
                        else ////////Incase of anything other then assessment i.e any scene
                        {
                            if (itemType != null && itemType != string.Empty)
                            {
                                /*LCMS-8972 - Start*/
                                SaveCourseStudentTrack(itemGUID, sceneGUID, learnerSessionIDPrimary, itemType, assetStartTime);
                                /*LCMS-8972 - End*/
                            }
                        }
                        // in case of course evaluation we need to save evaluation stats as well 
                        if (itemType == SequenceItemTypeName.CourseEvaluation)
                        {
                            using (CourseEvaluation.CourseEvaluationManager courseEvaluationManager = new ICP4.BusinessLogic.CourseEvaluation.CourseEvaluationManager())
                            {
                                courseEvaluationManager.SaveCourseEvaluationStatsIfCompleted();
                            }
                        }
                    }
                    using (ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
                    {
                        DateTime courseStartTime = Convert.ToDateTime(System.Web.HttpContext.Current.Session["CourseStartTime"]);
                        int totalTimeSpent = Convert.ToInt32(Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval.Second, courseStartTime, endTime, Microsoft.VisualBasic.FirstDayOfWeek.System, Microsoft.VisualBasic.FirstWeekOfYear.System));
                        trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                        trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                        int visitedSceneCount;
                        int totalSceneCount;
                        percentageCourseProgress = CalculateCourseProgressPercentageFromSequence(courseID, seqNo, Convert.ToInt32(System.Web.HttpContext.Current.Session["TotalNoOfViewableScenes"]), out visitedSceneCount, out totalSceneCount);
                        int source = trackingService.GetSource(learnerSessioGUID);
                        int learnerID = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerID"]);

                        // LCMS-9070 START 
                        int totalTimeSpentinDay = 0;
                        int days = Math.Abs(endTime.DayOfYear - courseStartTime.DayOfYear);
                        if (days > 0)
                        {
                            DateTime courseEndTimeinDay = new DateTime(courseStartTime.Year, courseStartTime.Month, courseStartTime.Day, 23, 59, 59);
                            totalTimeSpentinDay = Convert.ToInt32(Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval.Second, courseStartTime, courseEndTimeinDay, Microsoft.VisualBasic.FirstDayOfWeek.System, Microsoft.VisualBasic.FirstWeekOfYear.System));
                            trackingService.EndSession(learnerSessionID, courseEndTimeinDay, totalTimeSpentinDay, percentageCourseProgress, enrollmentID);                          
                        }

                        if (totalTimeSpentinDay > 0)
                            totalTimeSpent = totalTimeSpent - totalTimeSpentinDay;
                        // LCMS-9070 END

                        if (EndingLearningSession == true)
                        {
                                int totalTimeSpentFromStoredProcedure = 0;
                               
                                totalTimeSpentFromStoredProcedure = trackingService.GetTotalTimeSpent(learnerSessionID, enrollmentID);                                
                               
                                if (totalTimeSpent < totalTimeSpentFromStoredProcedure)
                                {
                                    totalTimeSpent = totalTimeSpentFromStoredProcedure;                                
                                }                      
                         }

                        trackingService.EndSession(learnerSessionID, endTime, totalTimeSpent, percentageCourseProgress, enrollmentID);                  
                        TimeloggedOnServer = true;

                        Integeration integeration = IntegerationFactory.GetObject(source);
                        IntegerationStatistics integerationStatistics = new IntegerationStatistics();

                        if (source == 1)
                        {
                            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
                            {
                                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                                string courseGUID = string.Empty;
                                courseGUID = courseService.GetCourseGUID(courseID);

                                integerationStatistics.PercentageCourseProgress = percentageCourseProgress;
                                integerationStatistics.IsCourseLocked = courseLocked;
                                integerationStatistics.LockReason = lockingReason;
                                integerationStatistics.LearningSessionGuid = learnerSessioGUID;
                                integerationStatistics.IsAssessmentPassed = isPostAssessmentPassed;
                                integerationStatistics.AssessmentScore = postAssessmentScore;
                                integerationStatistics.Enrollment_Id = enrollmentID;
                                int totalPreviouslyTimeSpent =  trackingService.GetLearnerTimeSpent(enrollmentID, learnerSessionID);
                                int courseTimeSpent = totalPreviouslyTimeSpent;//totalTimeSpent
                                integerationStatistics.CourseTimeSpent = courseTimeSpent;
                                integerationStatistics.IntegerationStatisticsType = IntegerationStatisticsType.CourseCompletion;

                            }
                        }
                        else
                        {
                            integerationStatistics = (IntegerationStatistics)HttpContext.Current.Session["IntegerationStatistics"];
                            //Integeration integeration = IntegerationFactory.GetObject(source);
                            HttpContext.Current.Session["IntegerationStatistics"] = null;
                            if (integerationStatistics != null && integerationStatistics.IntegerationStatisticsType == IntegerationStatisticsType.AssessmentCompletion)
                            {
                                integeration.SynchStatsToExternalSystem(integerationStatistics);
                            }

                            if (integerationStatistics == null)
                                integerationStatistics = new IntegerationStatistics();
                            integerationStatistics.IntegerationStatisticsType = IntegerationStatisticsType.ProgressCompletion;
                            integerationStatistics.CourseTimeSpent = totalTimeSpent;
                            integerationStatistics.PercentageCourseProgress = percentageCourseProgress;
                            integerationStatistics.LearningSessionGuid = learnerSessionID;

                        }

                        #region Course Completion
                        ICP4.BusinessLogic.ICPTrackingService.LearnerCourseCompletionStatus learnerCourseCompletionStatus = (ICP4.BusinessLogic.ICPTrackingService.LearnerCourseCompletionStatus)HttpContext.Current.Session["LearnerCourseCompletionStatus"];

                        //if (learnerCourseCompletionStatus == null)
                        //{
                        DateTime registrationDate = DateTime.Now;
                        if (System.Web.HttpContext.Current.Session["CourseRegAccessDateTime"] != null)
                            DateTime.TryParse(System.Web.HttpContext.Current.Session["CourseRegAccessDateTime"].ToString(), out registrationDate);

                        int QuizCount = GetValidQuizCount(courseID);
                        
                        int courseApprovalID = 0;
                        if (System.Web.HttpContext.Current.Session["CourseApprovalID"] != null)
                        {
                            courseApprovalID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseApprovalID"]);
                        }                       

                        learnerCourseCompletionStatus = trackingService.GetCourseCompletionStatus(courseID, CourseCompletionPolicyEntity2BizTranslator(courseConfiguration), learnerID, enrollmentID, QuizCount, registrationDate, percentageCourseProgress,courseApprovalID,source);
                        Logger.Write(learnerCourseCompletionStatus, "PlayerCourseCache", 2, 2000, System.Diagnostics.TraceEventType.Information, "");
                        
                        //}
                        #endregion



                        integerationStatistics.IsCourseCompleted = learnerCourseCompletionStatus.IsCourseCompleted;
                        integeration.SynchStatsToExternalSystem(integerationStatistics);

                    }

                }
                /*
                //Create thank you message
                string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.ShowCustomMessage showCustomMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.ShowCustomMessage();
                ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.CustomMessage customMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.CustomMessage();
                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {
                    customMessage.MessageHeading = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingThankYouMessage, brandCode, variant);
                    customMessage.MessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentThankYouMessage, brandCode, variant);
                    customMessage.MessageImageURL = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageThankYouMessage, brandCode, variant);
                    customMessage.ButtonText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentThankYouMessageOkButton, brandCode, variant);
                    if (isPreview == false && isDemoable == false)
                    {
                        customMessage.RedirectURL = System.Web.HttpContext.Current.Session["RedirectURL"].ToString();
                    }
                    else
                    {
                        customMessage.RedirectURL = string.Empty;
                    }
                    customMessage.CustomMessageType = "SessionEnd";

                }
                showCustomMessage.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowCustomMessage;
                showCustomMessage.CustomMessage = customMessage;
                return showCustomMessage;*/
                return null;
            }
            catch (Exception exp)
            {
                Exception ex1 = new Exception("learnerSessionID : " + learnerSessionID + " " + exp.Message, exp.InnerException);
                ExceptionPolicyForLCMS.HandleException(ex1, "ICPException");

                if (TimeloggedOnServer == false)
                {
                    using (ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
                    {
                        DateTime courseStartTime = Convert.ToDateTime(System.Web.HttpContext.Current.Session["CourseStartTime"]);
                        int totalTimeSpent = Convert.ToInt32(Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval.Second, courseStartTime, endTime, Microsoft.VisualBasic.FirstDayOfWeek.System, Microsoft.VisualBasic.FirstWeekOfYear.System));
                        trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                        trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                        int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["CurrentIndex"]);
                        int learnerSessionIDPrimary = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerSessionIDPrimary"]);
                        string learnerSessioGUID = Convert.ToString(System.Web.HttpContext.Current.Session["LearnerSessionID"]);
                        int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
                        int visitedSceneCount;
                        int totalSceneCount;
                        double percentageCourseProgress = 0.0;
                        percentageCourseProgress = CalculateCourseProgressPercentageFromSequence(courseID, seqNo, Convert.ToInt32(System.Web.HttpContext.Current.Session["TotalNoOfViewableScenes"]), out visitedSceneCount, out totalSceneCount);
                        int source = trackingService.GetSource(learnerSessioGUID);
                        int learnerID = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerID"]);

                        // LCMS-9070 START 
                        int totalTimeSpentinDay = 0;
                        int days = Math.Abs(endTime.DayOfYear - courseStartTime.DayOfYear);
                        if (days > 0)
                        {
                            DateTime courseEndTimeinDay = new DateTime(courseStartTime.Year, courseStartTime.Month, courseStartTime.Day, 23, 59, 59);
                            totalTimeSpentinDay = Convert.ToInt32(Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval.Second, courseStartTime, courseEndTimeinDay, Microsoft.VisualBasic.FirstDayOfWeek.System, Microsoft.VisualBasic.FirstWeekOfYear.System));
                            trackingService.EndSession(learnerSessionID, courseEndTimeinDay, totalTimeSpentinDay, percentageCourseProgress, enrollmentID);                     
                        }

                        if (totalTimeSpentinDay > 0)
                            totalTimeSpent = totalTimeSpent - totalTimeSpentinDay;
                        // LCMS-9070 END
                                             
                        trackingService.EndSession(learnerSessionID, endTime, totalTimeSpent, percentageCourseProgress, enrollmentID);                     
                    }
                }
            }
            // LCMS-9213
            // --------------------------------------------------------------------
            finally
            {
                 // LCMS-9213
                // --------------------------------------------------------------------
                HttpContext.Current.Session.Remove("askedAssessmentItemsAttributes");
                HttpContext.Current.Session.Remove("SelectedQuestionSequenceNo");
                HttpContext.Current.Session.Remove("Current_Assessment_LearnerStatistics_ID");
                // --------------------------------------------------------------------
                //LCMS-10266
                HttpContext.Current.Session.Remove("RandomAlternateWithPauseResume");
                //End LCMS-10266
                //Fix for LCMS-11066
                HttpContext.Current.Session.Remove("AssessmentAllQuestionsAttempted");
                //Fix for LCMS-11066
                HttpContext.Current.Session.Remove("AssessmentAllQuestionsDisplayed");
            }            
            // --------------------------------------------------------------------

            return null;
        }

        public object EndSessionForAssessment(int courseID, string learnerSessionID, DateTime endTime)
        {
            string itemType;
            string itemGUID = System.Web.HttpContext.Current.Session["ItemGUID"].ToString();
            string sceneGUID = System.Web.HttpContext.Current.Session["SceneGUID"].ToString();
            int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["CurrentIndex"]);
            int learnerSessionIDPrimary = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerSessionIDPrimary"]);
            string learnerSessioGUID = Convert.ToString(System.Web.HttpContext.Current.Session["LearnerSessionID"]);
            int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
            //DateTime assetStartTime = Convert.ToDateTime(System.Web.HttpContext.Current.Session["AssetStartTime"]);
            string lockingReason = LockingReason.GeneralCase;
            bool courseLocked = IsCourseLocked(enrollmentID, out lockingReason);
            ICPCourseService.CourseConfiguration courseConfiguration = null;

            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                courseConfiguration = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);
            }
            
            ICPCourseService.SequenceItem sequenceItem = null;
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                itemType = cacheManager.GetSequenceItemType(courseID, seqNo, source, courseConfigurationID);
                sequenceItem = cacheManager.GetRequestedItemFromQueue(courseID, seqNo, source, courseConfigurationID);
                //if(itemType == string.Empty)
                //  return null;
                if (itemType == SequenceItemTypeName.Exam)
                {
                    itemType = sequenceItem.ExamType;
                }
            }


            ////////Incase of any Assessment////////////////////
            if (itemType == SequenceItemTypeName.PreAssessment ||
                itemType == SequenceItemTypeName.PostAssessment ||
                itemType == SequenceItemTypeName.Quiz ||
                itemType == SequenceItemTypeName.PracticeExam)
            {

                string assessmentStage = Convert.ToString(System.Web.HttpContext.Current.Session["AssessmentStage"]);
                /*****************/



                if (assessmentStage == "AssessmentIsInProgress")
                {
                    int masteryScore = 0;
                    switch (itemType)
                    {
                        case SequenceItemTypeName.PreAssessment:
                            masteryScore = courseConfiguration.PreAssessmentConfiguration.MasteryScore;
                            break;
                        case SequenceItemTypeName.PostAssessment:
                            masteryScore = courseConfiguration.PostAssessmentConfiguration.MasteryScore;
                            break;
                        case SequenceItemTypeName.Quiz:
                            masteryScore = courseConfiguration.QuizConfiguration.MasteryScore;
                            break;
                        case SequenceItemTypeName.PracticeExam:
                            ICPCourseService.AssessmentConfiguration assessmentConfiguration = new ICP4.BusinessLogic.ICPCourseService.AssessmentConfiguration();
                            assessmentConfiguration = (ICPCourseService.AssessmentConfiguration)System.Web.HttpContext.Current.Session["PracticeExamAssessmentConfiguration"];
                            masteryScore = assessmentConfiguration.MasteryScore;
                            break;
                    }
                    using (AssessmentManager.AssessmentManager assessmentManager = new ICP4.BusinessLogic.AssessmentManager.AssessmentManager())
                    {
                        assessmentManager.EndAssessmentForcefully(masteryScore);
                        System.Web.HttpContext.Current.Session["AssessmentStage"] = "AssessmentCompleted";
                    }

                }
                assessmentStage = Convert.ToString(System.Web.HttpContext.Current.Session["AssessmentStage"]);
                if (assessmentStage == "AssessmentCompleted")
                {
                    //CurrentAttemptNo
                    ContinueAfterAssessment(courseID);                    
                }
            }

            return null;
        }

        public object EndSessionWithReturn(int courseID, string learnerSessionID, DateTime endTime)
        {

            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["isPreview"]);
            bool isDemoable = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]);

            //Create thank you message
            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
            ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.ShowCustomMessage showCustomMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.ShowCustomMessage();
            ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.CustomMessage customMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.CustomMessage();
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                customMessage.MessageHeading = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingThankYouMessage, brandCode, variant);
                customMessage.MessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentThankYouMessage, brandCode, variant);
                customMessage.MessageImageURL = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageThankYouMessage, brandCode, variant);
                customMessage.ButtonText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentThankYouMessageOkButton, brandCode, variant);
                if (isPreview == false && isDemoable == false)
                {
                    customMessage.RedirectURL = System.Web.HttpContext.Current.Session["RedirectURL"].ToString();
                }
                else
                {
                    customMessage.RedirectURL = string.Empty;
                }
                customMessage.CustomMessageType = "SessionEnd";

            }
            showCustomMessage.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowCustomMessage;
            showCustomMessage.CustomMessage = customMessage;
            return showCustomMessage;
        }

        public int GetValidQuizCount(int CourseId)
        {
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);                
                ICPCourseService.Sequence Sequence = cacheManager.GetIFSequenceExistInCache(CourseId, source, courseConfigurationID);  
                int QuizCount = 0;

                foreach (ICPCourseService.SequenceItem sequnceItem in Sequence.SequenceItems)
                {
                    if (sequnceItem.SequenceItemType == SequenceItemType.Quiz && sequnceItem.IsValidQuiz == true)
                        QuizCount++;
                    else if (sequnceItem.SequenceItemType == SequenceItemType.Exam && sequnceItem.ExamType == SequenceItemType.Quiz && sequnceItem.IsValidQuiz == true)
                        QuizCount++;

                }

                return QuizCount;
            }
        }
        //public bool UpdateSessionEnd(string learnerSessionID,DateTime dateTime)
        //{
        //    using (ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
        //    {
        //        trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];

        //        return trackingService.EndSession(learnerSessionID, dateTime);
        //    }
        //}
        /// <summary>
        /// This method performs necessary operation when users cicks in  ContinueGradingWithoutAnswering button
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <returns>ShowAssessmentScoreSummary command object</returns>
        public object ContinueGradingWithoutAnswering(int courseID)
        {
            int masteryScore = 80;
            bool showPercentageScore = false;
            object returnObject = new object();

            SetMasteryScoreAndScoreType(courseID, out masteryScore, out showPercentageScore);

            using (AssessmentManager.AssessmentManager assessmentManager = new ICP4.BusinessLogic.AssessmentManager.AssessmentManager())
            {
                returnObject = assessmentManager.ContinueGradingWithoutAnswering(masteryScore, showPercentageScore);
            }
            return returnObject;
        }


        /// <summary>
        /// This method performs necessary operation when users cicks in  Return To Assessment Results button
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <returns>ShowAssessmentScoreSummary command object</returns>
        public object ReturnToAssessmentResults(int courseID)
        {
            int masteryScore = 80;
            bool showPercentageScore = false;
            object returnObject = new object();

            SetMasteryScoreAndScoreType(courseID, out masteryScore, out showPercentageScore);

            using (AssessmentManager.AssessmentManager assessmentManager = new ICP4.BusinessLogic.AssessmentManager.AssessmentManager())
            {
                returnObject = assessmentManager.ReturnToAssessmentResults(masteryScore, showPercentageScore);
            }
            return returnObject;
            
        }

        /// <summary>
        /// This method performs necessary operation when users cicks in FinishGrading button
        /// </summary>
        /// <param name="courseID"CourseID integer value></param>
        /// <returns>ShowAssessmentScoreSummary command object</returns>
        public object FinishGrading(int courseID)
        {
            object returnObject = new object();
            int masteryScore = 80;
            bool showPercentageScore = false;

            SetMasteryScoreAndScoreType(courseID, out masteryScore, out showPercentageScore);

            using (AssessmentManager.AssessmentManager assessmentManager = new ICP4.BusinessLogic.AssessmentManager.AssessmentManager())
            {
                returnObject = assessmentManager.FinishGradingAssessment(masteryScore, showPercentageScore);
            }            
            return returnObject;
        }



        /// <summary>
        /// The method performs necessary operation when users cicks in Next button on ShowIndividualQuestion page
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <returns>Command object based on policies</returns>
        public object ContinueAfterAssessment(int courseID)
        {



            ////code for the preview mode.In preview mode assessment can be given only one time
            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["isPreview"]);
            //if (isPreview)
            //{
            //    return NextBack(courseID, 1);
            //}
            /////////////////////////////////////////////////////

            object returnCommand = new object();
            string itemType = "";
            int seqNo = 0;
            bool continueWithCourse = false;
            bool isPass = false;
            int lastAttemptNo = 0;
            string learnerSessionID = string.Empty;
            string actionToTakeAfterFailingMaxAttempt = string.Empty;
            bool actionTaken = false;
            long learnerStatisticsID = 0;
            string itemIDForPreview = string.Empty;
            int remediationCount = 0;
            string ContentObjectName = string.Empty;            
            ICPCourseService.CourseConfiguration courseConfiguration = new ICP4.BusinessLogic.ICPCourseService.CourseConfiguration();
            ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();
            ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService();
            courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
            courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]); ;
            trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
            trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
            ICPCourseService.SequenceItem ExamsequenceItem = null;

            bool isPreAssessmentNoResult = false;
            bool isQuizAssessmentNoResult = false;
            bool isPostAssessmentNoResult = false;
            bool isPracticeAssessmentNoResult = false;

            ICPTrackingService.LearnerStatistics[] learnerStatistics = null;

            System.Web.HttpContext.Current.Session["CourseLockedDuringAssessment"] = "False";

            seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["CurrentIndex"]);
            learnerSessionID = System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();

            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                courseConfiguration = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);
                ExamsequenceItem = cacheManager.GetRequestedItemFromQueue(courseID, seqNo, source, courseConfigurationID);
                itemType = cacheManager.GetSequenceItemType(courseID, seqNo, source, courseConfigurationID);
            }

            if (itemType == SequenceItemTypeName.Exam)
            {
                itemType = ExamsequenceItem.ExamType;
            }

            switch (itemType)
            {
                case SequenceItemTypeName.PreAssessment:
                    if (isPreview == false)
                    {
                        learnerStatistics = trackingService.GetPreAssessmentResult(learnerSessionID);
                    }
                    else
                    {
                        learnerStatistics = (ICPTrackingService.LearnerStatistics[])System.Web.HttpContext.Current.Session["AssessmentEndStats"];
                        itemIDForPreview = SequenceItemTypeName.PreAssessment;
                    }
                    GetLastAssessmentResult(learnerStatistics, courseConfiguration.PreAssessmentConfiguration.MasteryScore, out isPass, out lastAttemptNo, out actionTaken, out learnerStatisticsID, out remediationCount);


                    if (courseConfiguration.PreAssessmentConfiguration.ScoreType == ScoreType.NoResults)
                    {
                        isPreAssessmentNoResult = true;
                    }


                    //if (courseConfiguration.PreAssessmentConfiguration.MaximumNOAttempt > lastAttemptNo && !isPass)
                    if ((courseConfiguration.PreAssessmentConfiguration.MaximumNOAttempt > lastAttemptNo && !isPass && !isPreAssessmentNoResult) || (!isPass && !courseConfiguration.PreAssessmentConfiguration.MaxAttemptHandlerEnabled && !isPreAssessmentNoResult))
                    {
                        continueWithCourse = false;
                    }
                    else
                    {
                        continueWithCourse = true;
                        actionToTakeAfterFailingMaxAttempt = courseConfiguration.PreAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt;
                    }
                  
                    break;
                case SequenceItemTypeName.PostAssessment:
                    if (isPreview == false)
                    {
                        learnerStatistics = trackingService.GetPostAssessmentResult(learnerSessionID);
                    }
                    else
                    {
                        learnerStatistics = (ICPTrackingService.LearnerStatistics[])System.Web.HttpContext.Current.Session["AssessmentEndStats"];
                        itemIDForPreview = SequenceItemTypeName.PostAssessment;
                    }
                    GetLastAssessmentResult(learnerStatistics, courseConfiguration.PostAssessmentConfiguration.MasteryScore, out isPass, out lastAttemptNo, out actionTaken, out learnerStatisticsID, out remediationCount);
                    if (courseConfiguration.PostAssessmentConfiguration.ScoreType == ScoreType.NoResults)
                    {
                        isPostAssessmentNoResult = true;
                    }

                    // Added by Mustafa for LCMS-2694
                    //---------------------------------------
                    if (courseConfiguration.PostAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt == AfterMaxFailAction.RetakeCourse)
                    {
                        if (courseConfiguration.PostAssessmentConfiguration.MaximumNOAttempt == lastAttemptNo && !isPass)
                        {
                            // Do Nothing
                        }
                        else if ((lastAttemptNo % courseConfiguration.PostAssessmentConfiguration.MaximumNOAttempt) == 0 && !isPass)
                        {
                            // Do Nothing 
                        }
                        else if (courseConfiguration.PostAssessmentConfiguration.MaximumNOAttempt < lastAttemptNo && !isPass)
                        {
                            lastAttemptNo = lastAttemptNo % courseConfiguration.PostAssessmentConfiguration.MaximumNOAttempt;
                        }
                    }
                    //---------------------------------------

                    //if (courseConfiguration.PostAssessmentConfiguration.MaximumNOAttempt > lastAttemptNo && !isPass)
                    if ((courseConfiguration.PostAssessmentConfiguration.MaximumNOAttempt > lastAttemptNo && !isPass) || (!isPass && !courseConfiguration.PostAssessmentConfiguration.MaxAttemptHandlerEnabled))
                    {
                        continueWithCourse = false;
                    }
                    else if (courseConfiguration.PostAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt == AfterMaxFailAction.RetakeCourse && !isPass && !isPostAssessmentNoResult
                        )
                    {
                        continueWithCourse = true;
                        seqNo = 0;
                        System.Web.HttpContext.Current.Session["CurrentIndex"] = "0";
                        actionToTakeAfterFailingMaxAttempt = courseConfiguration.PostAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt;
                    }
                    else
                    {
                        HttpContext.Current.Session["IsPostAssessmentCrossed"] = true; // added for LCMS-2869
                        continueWithCourse = true;
                        actionToTakeAfterFailingMaxAttempt = courseConfiguration.PostAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt;
                    }
                    break;
                case SequenceItemTypeName.Quiz:
                    if (isPreview == false)
                    {
                        ICPCourseService.SequenceItem sequenceItem = GetSequenceItem(courseID, seqNo);
                        learnerStatistics = trackingService.GetQuizResult(learnerSessionID, sequenceItem.Item_GUID);
                        ContentObjectName = courseService.GetContentObjectNameByGUID(sequenceItem.Item_GUID);
                        System.Web.HttpContext.Current.Session["ContentObjectName"] = ContentObjectName;
                    }
                    else
                    {
                        learnerStatistics = (ICPTrackingService.LearnerStatistics[])System.Web.HttpContext.Current.Session["AssessmentEndStats"];
                        itemIDForPreview = learnerStatistics[0].Item_GUID;
                        ContentObjectName = courseService.GetContentObjectNameByGUID(learnerStatistics[0].Item_GUID);
                        System.Web.HttpContext.Current.Session["ContentObjectName"] = ContentObjectName;
                    }
                    GetLastAssessmentResult(learnerStatistics, courseConfiguration.QuizConfiguration.MasteryScore, out isPass, out lastAttemptNo, out actionTaken, out learnerStatisticsID, out remediationCount);

                    // Added by Mustafa for LCMS-2694
                    //---------------------------------------
                    if (courseConfiguration.QuizConfiguration.ActionToTakeAfterFailingMaxAttempt == AfterMaxFailAction.RetakeLesson)
                    {
                        if (courseConfiguration.QuizConfiguration.MaximumNOAttempt == lastAttemptNo && !isPass)
                        {
                            // Do Nothing
                        }
                        else if ((lastAttemptNo % courseConfiguration.QuizConfiguration.MaximumNOAttempt) == 0 && !isPass)
                        {
                            // Do Nothing 
                        }
                        else if (courseConfiguration.QuizConfiguration.MaximumNOAttempt < lastAttemptNo && !isPass)
                        {
                            lastAttemptNo = lastAttemptNo % courseConfiguration.QuizConfiguration.MaximumNOAttempt;
                        }
                    }
                    //---------------------------------------


                    if (courseConfiguration.QuizConfiguration.ScoreType == ScoreType.NoResults)
                    {
                        isQuizAssessmentNoResult = true;
                    }

                    //if (courseConfiguration.QuizConfiguration.MaximumNOAttempt > lastAttemptNo && !isPass)
                    if ((courseConfiguration.QuizConfiguration.MaximumNOAttempt > lastAttemptNo && !isPass && !isQuizAssessmentNoResult) || (!isPass && !courseConfiguration.QuizConfiguration.MaxAttemptHandlerEnabled && !isQuizAssessmentNoResult))
                    {
                        continueWithCourse = false;
                    }
                    else
                    {
                        continueWithCourse = true;
                        actionToTakeAfterFailingMaxAttempt = courseConfiguration.QuizConfiguration.ActionToTakeAfterFailingMaxAttempt;
                    }

                   
                    break;
                case SequenceItemTypeName.PracticeExam:
                    ICPCourseService.AssessmentConfiguration assessmentConfiguration = new ICP4.BusinessLogic.ICPCourseService.AssessmentConfiguration();
                    assessmentConfiguration = (ICPCourseService.AssessmentConfiguration)System.Web.HttpContext.Current.Session["PracticeExamAssessmentConfiguration"];
                    if (isPreview == false)
                    {
                        ICPCourseService.SequenceItem sequenceItem = GetSequenceItem(courseID, seqNo);
                        learnerStatistics = trackingService.GetPracticeExamResult(learnerSessionID, sequenceItem.Item_GUID);
                        ContentObjectName = courseService.GetContentObjectNameByExamGUID(sequenceItem.Item_GUID);
                        System.Web.HttpContext.Current.Session["ContentObjectName"] = ContentObjectName;
                    }
                    else
                    {
                        learnerStatistics = (ICPTrackingService.LearnerStatistics[])System.Web.HttpContext.Current.Session["AssessmentEndStats"];
                        itemIDForPreview = learnerStatistics[0].Item_GUID;
                        ContentObjectName = courseService.GetContentObjectNameByExamGUID(learnerStatistics[0].Item_GUID);
                        System.Web.HttpContext.Current.Session["ContentObjectName"] = ContentObjectName;
                    }
                    GetLastAssessmentResult(learnerStatistics, assessmentConfiguration.MasteryScore, out isPass, out lastAttemptNo, out actionTaken, out learnerStatisticsID, out remediationCount);                    
                    // Added by Mustafa for LCMS-2694
                    //---------------------------------------
                    if (assessmentConfiguration.ActionToTakeAfterFailingMaxAttempt == AfterMaxFailAction.RetakeLesson)
                    {
                        if (assessmentConfiguration.MaximumNOAttempt == lastAttemptNo && !isPass)
                        {
                            // Do Nothing
                        }
                        else if ((lastAttemptNo % assessmentConfiguration.MaximumNOAttempt) == 0 && !isPass)
                        {
                            // Do Nothing 
                        }
                        else if (assessmentConfiguration.MaximumNOAttempt < lastAttemptNo && !isPass)
                        {
                            lastAttemptNo = lastAttemptNo % assessmentConfiguration.MaximumNOAttempt;
                        }
                    }
                    //---------------------------------------


                    if (assessmentConfiguration.ScoreType == ScoreType.NoResults)
                    {
                        isPracticeAssessmentNoResult = true;
                    }
                    
                    //if (assessmentConfiguration.MaximumNOAttempt > lastAttemptNo && !isPass)
                    if ((assessmentConfiguration.MaximumNOAttempt > lastAttemptNo && !isPass && !isPracticeAssessmentNoResult) || (!isPass && !assessmentConfiguration.MaxAttemptHandlerEnabled && !isPracticeAssessmentNoResult))
                    {
                        continueWithCourse = false;
                    }
                    else
                    {
                        continueWithCourse = true;
                        actionToTakeAfterFailingMaxAttempt = assessmentConfiguration.ActionToTakeAfterFailingMaxAttempt;
                    }

                  
                    break;
            }


            
            
            if (isPass)//means go to the next item as he has passed
            {
                //as we are moving to the next item in sequence therefore removing old stats from session
                System.Web.HttpContext.Current.Session.Remove("AssessmentEndStats");
                System.Web.HttpContext.Current.Session.Remove("PracticeExamAssessmentConfiguration");
                System.Web.HttpContext.Current.Session.Remove("ExamID");
                System.Web.HttpContext.Current.Session.Remove("PracticeExamAttemptNo");

                if (isPreview == true)
                {
                    //This is a temporary fix for LCMS-2025 and must be replaced in future builds///
                    List<string> askedAssessments = (List<string>)System.Web.HttpContext.Current.Session["AskedAssessments"];
                    if (askedAssessments == null)
                        askedAssessments = new List<string>();

                    askedAssessments.Add(itemIDForPreview);
                    System.Web.HttpContext.Current.Session["AskedAssessments"] = askedAssessments;

                    // Changed By Waqas Zakai
                    // LCMS-6984
                    // START
                    switch (itemType)
                    {
                        case SequenceItemTypeName.PreAssessment:
                            System.Web.HttpContext.Current.Session.Remove("AskedAssessmentItemsGUIDPRE");                            
                            break;
                        case SequenceItemTypeName.Quiz:
                            System.Web.HttpContext.Current.Session.Remove("AskedAssessmentItemsGUIDQUIZ");                            
                            break;
                        case SequenceItemTypeName.PostAssessment:
                            System.Web.HttpContext.Current.Session.Remove("AskedAssessmentItemsGUIDPOST");                            
                            break;
                        case SequenceItemTypeName.PracticeExam:
                            System.Web.HttpContext.Current.Session.Remove("AskedAssessmentItemsGUIDPracticeExam");                            
                            break;
                    }
                    // END
                    ////////////////////////////////////////////////////////////////////////
                }

                returnCommand = CheckSeatTime(1);

                if (returnCommand == null)
                {
                    returnCommand = NextBack(courseID, 1);                   
                }
            }
            else if (continueWithCourse)
            {
                //as we are taking the action and assessment is finished therefore removing the old stats from session
                System.Web.HttpContext.Current.Session.Remove("AssessmentEndStats");

                //if (isPreAssessmentNoResult == false && isPostAssessmentNoResult == false && isQuizAssessmentNoResult == false && isPracticeAssessmentNoResult == false)
                // {
                if (isPreview == true)
                {
                    //This is a temporary fix for LCMS-2025 and must be replaced in future builds///
                    List<string> askedAssessments = (List<string>)System.Web.HttpContext.Current.Session["AskedAssessments"];
                    if (askedAssessments == null)
                        askedAssessments = new List<string>();








                    switch (itemType)
                    {
                        case SequenceItemTypeName.Quiz:
                            if (courseConfiguration.QuizConfiguration.ActionToTakeAfterFailingMaxAttempt != AfterMaxFailAction.RetakeLesson || isQuizAssessmentNoResult == true)
                            {
                                askedAssessments.Add(itemIDForPreview);
                            }
                            break;
                        case SequenceItemTypeName.PostAssessment:
                            if (courseConfiguration.PostAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt != AfterMaxFailAction.RetakeCourse || isPostAssessmentNoResult == true)
                            {
                                askedAssessments.Add(itemIDForPreview);
                            }
                            break;
                        default:
                            askedAssessments.Add(itemIDForPreview);
                            break;
                    }

                    System.Web.HttpContext.Current.Session["AskedAssessments"] = askedAssessments;
                    ////////////////////////////////////////////////////////////////////////
                }

                returnCommand = CheckSeatTime(1);

                if (returnCommand == null)
                {
                    //we are assuming here that 'actionTaken' will always be false in this case hence action should always be taken

                    if (actionToTakeAfterFailingMaxAttempt == AfterMaxFailAction.GoToNextLesson)
                    {
                        System.Web.HttpContext.Current.Session.Remove("ExamID");
                    }
                    else if (actionToTakeAfterFailingMaxAttempt == AfterMaxFailAction.RetakeLesson)
                    {
                        System.Web.HttpContext.Current.Session.Remove("ExamID");
                    }
                    else if (actionToTakeAfterFailingMaxAttempt == AfterMaxFailAction.RetakeCourse)
                    {
                        System.Web.HttpContext.Current.Session.Remove("ExamID");
                    }


                    if (isPreAssessmentNoResult == false && isPostAssessmentNoResult == false && isQuizAssessmentNoResult == false && isPracticeAssessmentNoResult == false)
                    {
                        switch (actionToTakeAfterFailingMaxAttempt)
                        {
                            case AfterMaxFailAction.GoToNextLesson:
                                {
                                    // Changed By Waqas Zakai
                                    // LCMS-6984
                                    // START
                                    switch (itemType)
                                    {
                                        case SequenceItemTypeName.PreAssessment:
                                            System.Web.HttpContext.Current.Session.Remove("AskedAssessmentItemsGUIDPRE");
                                            break;
                                        case SequenceItemTypeName.Quiz:
                                            System.Web.HttpContext.Current.Session.Remove("AskedAssessmentItemsGUIDQUIZ");
                                            break;
                                        case SequenceItemTypeName.PostAssessment:
                                            System.Web.HttpContext.Current.Session.Remove("AskedAssessmentItemsGUIDPOST");
                                            System.Web.HttpContext.Current.Session["AskedCourseApprovalAffidavit"] = false;
                                            break;
                                        case SequenceItemTypeName.PracticeExam:
                                            System.Web.HttpContext.Current.Session.Remove("AskedAssessmentItemsGUIDPracticeExam");
                                            System.Web.HttpContext.Current.Session.Remove("PracticeExamAssessmentConfiguration");
                                            break;
                                    }
                                    // END 
                                    returnCommand = NextBack(courseID, 1);
                                    actionTaken = true;
                                    break;
                                }
                            case AfterMaxFailAction.RetakeLesson:
                                {
                                    // Changed By Waqas Zakai
                                    // LCMS-6984
                                    // START
                                    switch (itemType)
                                    {
                                        case SequenceItemTypeName.PreAssessment:
                                            System.Web.HttpContext.Current.Session.Remove("AskedAssessmentItemsGUIDPRE");
                                            break;
                                        case SequenceItemTypeName.Quiz:
                                            System.Web.HttpContext.Current.Session.Remove("AskedAssessmentItemsGUIDQUIZ");
                                            break;
                                        case SequenceItemTypeName.PostAssessment:
                                            System.Web.HttpContext.Current.Session.Remove("AskedAssessmentItemsGUIDPOST");
                                            System.Web.HttpContext.Current.Session["AskedCourseApprovalAffidavit"] = false;
                                            break;
                                    }
                                    // END
                                    //The below check is because it is not possible to retake lessons for pre and post
                                    if (itemType != SequenceItemTypeName.PreAssessment && itemType != SequenceItemTypeName.PostAssessment)
                                    {
                                        ICPCourseService.SequenceItem sequenceItem = GetSequenceItem(courseID, seqNo);
                                        int contentObjectSeqNo = GetSequenceNoBySequenceItemID(courseID, sequenceItem.ParentID, null/*sequenceItem.SequenceItemType*/);
                                        ICPCourseService.SequenceItem contentObjectSequenceItem = GetSequenceItem(courseID, contentObjectSeqNo);
                                        returnCommand = LoadSequenceItemIntoCommand(courseID, contentObjectSeqNo, contentObjectSequenceItem, true);

                                    }
                                    else
                                    {
                                        returnCommand = NextBack(courseID, 1);
                                    }
                                    actionTaken = true;
                                    break;
                                }
                            case AfterMaxFailAction.LockCourse:
                                //TODO:Provide Implementation of lock course
                                {
                                    if (isPreview == false)
                                    {
                                        //trackingService.LockUnlockCourse(courseID, Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerID"]), System.DateTime.Now, true);
                                        int learnerID = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerID"]);
                                        int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);

                                        switch (itemType)
                                        {
                                            case SequenceItemTypeName.Quiz:
                                                LockCourse(courseID, learnerID, enrollmentID, LockingReason.MaxAttemptReachLessonAssessment);
                                                break;
                                            case SequenceItemTypeName.PostAssessment:
                                                LockCourse(courseID, learnerID, enrollmentID, LockingReason.MaxAttemptReachPostAssessment);
                                                break;
                                            case SequenceItemTypeName.PreAssessment:
                                                LockCourse(courseID, learnerID, enrollmentID, LockingReason.MaxAttemptReachPreAssessment);
                                                break;
                                            case SequenceItemTypeName.PracticeExam:
                                                LockCourse(courseID, learnerID, enrollmentID, LockingReason.MaxAttemptReachPracticeExam);
                                                break;
                                        }

                                    }
                                    switch (itemType)
                                    {
                                        case SequenceItemTypeName.Quiz:
                                            returnCommand = CreateCourseLockedCommandObject(courseID, LockingReason.MaxAttemptReachLessonAssessment);
                                            break;
                                        case SequenceItemTypeName.PostAssessment:
                                            returnCommand = CreateCourseLockedCommandObject(courseID, LockingReason.MaxAttemptReachPostAssessment);
                                            break;
                                        case SequenceItemTypeName.PreAssessment:
                                            returnCommand = CreateCourseLockedCommandObject(courseID, LockingReason.MaxAttemptReachPreAssessment);
                                            break;
                                        case SequenceItemTypeName.PracticeExam:
                                            returnCommand = CreateCourseLockedCommandObject(courseID, LockingReason.MaxAttemptReachPracticeExam);
                                            break;
                                    }
                                    actionTaken = true;
                                    break;
                                }
                            case AfterMaxFailAction.RetakeCourse:
                                //TODO:Provide Implementation of lock course
                                {
                                    // Changed By Waqas Zakai
                                    // LCMS-6984
                                    // START
                                    switch (itemType)
                                    {
                                        case SequenceItemTypeName.PreAssessment:
                                            System.Web.HttpContext.Current.Session.Remove("AskedAssessmentItemsGUIDPRE");
                                            break;
                                        case SequenceItemTypeName.Quiz:
                                            System.Web.HttpContext.Current.Session.Remove("AskedAssessmentItemsGUIDQUIZ");
                                            break;
                                        case SequenceItemTypeName.PostAssessment:
                                            System.Web.HttpContext.Current.Session.Remove("AskedAssessmentItemsGUIDPOST");
                                            System.Web.HttpContext.Current.Session["AskedCourseApprovalAffidavit"] = false;
                                            break;
                                    }
                                    // END
                                    //trackingService.LockUnlockCourse(courseID, Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerID"]), System.DateTime.Now, true);
                                    ICPCourseService.SequenceItem sequenceItem = GetSequenceItem(courseID, seqNo);
                                    int contentObjectSeqNo = GetSequenceNoBySequenceItemID(courseID, sequenceItem.ParentID, null/*sequenceItem.SequenceItemType*/);
                                    sequenceItem = GetSequenceItem(courseID, contentObjectSeqNo);
                                    returnCommand = LoadSequenceItemIntoCommand(courseID, contentObjectSeqNo, sequenceItem, true);
                                    break;
                                }
                                // Changed By Waqas Zakai
                                // LCMS-11500
                                // START
                              case AfterMaxFailAction.ContinueCourse:
                                {

                                    switch (itemType)
                                    {
                                        case SequenceItemTypeName.PreAssessment:
                                            System.Web.HttpContext.Current.Session.Remove("AskedAssessmentItemsGUIDPRE");
                                            break;
                                        case SequenceItemTypeName.Quiz:
                                            System.Web.HttpContext.Current.Session.Remove("AskedAssessmentItemsGUIDQUIZ");
                                            break;
                                        case SequenceItemTypeName.PostAssessment:
                                            System.Web.HttpContext.Current.Session.Remove("AskedAssessmentItemsGUIDPOST");
                                            System.Web.HttpContext.Current.Session["AskedCourseApprovalAffidavit"] = false;
                                            break;
                                        case SequenceItemTypeName.PracticeExam:
                                            System.Web.HttpContext.Current.Session.Remove("AskedAssessmentItemsGUIDPracticeExam");
                                            System.Web.HttpContext.Current.Session.Remove("PracticeExamAssessmentConfiguration");
                                            break;
                                    }                                    
                                    returnCommand = NextBack(courseID, 1);
                                    actionTaken = true;
                                    break;
                                }
                            // END 
                        }
                    }
                    else
                    {
                        returnCommand = NextBack(courseID, 1);
                    }
                }

                if (isPreAssessmentNoResult == false && isPostAssessmentNoResult == false && isQuizAssessmentNoResult == false && isPracticeAssessmentNoResult == false)
                {
                    UpdateActionAfterFailingMaxAttempt(actionTaken, learnerStatisticsID);
                }
                //}
                //else
                // {
                //returnCommand = NextBack(courseID, 1);
                //}
            }
            else //means again go to the sequence item pointing to the same quiz
            {
                /*if (itemType == SequenceItemTypeName.PostAssessment)
                {
                    if (courseConfiguration.IsProctorLoginEnabled)
                    {
                        if ((isPreview) || (ProctorLoginRequirementCriteriaMeets(Convert.ToString(System.Web.HttpContext.Current.Session["LearnerSessionID"]))))
                        {
                            returnCommand = NextBack(courseID, -1);
                            return returnCommand;
                        }
                    }
                }*/
                
                ICPCourseService.SequenceItem sequenceItem = GetSequenceItem(courseID, seqNo);
                returnCommand = LoadSequenceItemIntoCommand(courseID, seqNo, sequenceItem, true);

            }

            //if (removeExamFromSession)
            //{
            //    System.Web.HttpContext.Current.Session.Remove("ExamID");
            //}

            return returnCommand;

        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="actionTaken"></param>
        /// <param name="learnerStatisticsID"></param>
        private bool UpdateActionAfterFailingMaxAttempt(bool actionTaken, long learnerStatisticsID)
        {
            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["isPreview"]);
            if (isPreview)//as we do not want tracking in preview mode
            {
                return UpdateActionAfterFailingMaxAttemptinSession(actionTaken,learnerStatisticsID);
            }
            ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();
            trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
            trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
            

            return trackingService.UpdateLearnerStatisticsMaximumAttemptAction(learnerStatisticsID, actionTaken);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="actionTaken"></param>
        /// <param name="learnerStatisticsID"></param>
        private bool UpdateActionAfterFailingMaxAttemptinSession(bool actionTaken, long learnerStatisticsID)
        {
            try
            {
                ICPTrackingService.LearnerStatistics[] learnerStatistics = (ICPTrackingService.LearnerStatistics[])System.Web.HttpContext.Current.Session["AssessmentEndStats"];
                if (learnerStatistics != null)
                {
                    for (int index = 0; index <= learnerStatistics.Length - 1; index++)
                    {
                        if (learnerStatistics[index].LearnerStatisticsID == learnerStatisticsID)
                            learnerStatistics[index].MaxAtemptActionTaken = actionTaken;
                    }
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicyForLCMS.HandleException(ex, "ICPException");
                return false;
            }
            return true;
        }
        /// <summary>
        /// The method performs necessary operation when users cicks in Next button on ShowAssessmentScoreSummary page
        /// </summary>
        /// <param name="courseID">CourseID integer value<</param>
        /// <returns>Command object based on policies</returns>
        public object ContinueAfterAssessmentScore(int courseID)
        {

            object returnCommand = new object();

            CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager();
            ICPCourseService.CourseConfiguration courseConfiguration = new ICP4.BusinessLogic.ICPCourseService.CourseConfiguration();
            int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
            courseConfiguration = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);

            if (courseConfiguration.PostAssessmentConfiguration.AssessmentResultEnabled == true && Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsPreview"]) == false && Convert.ToBoolean(System.Web.HttpContext.Current.Session["ShowAssessmentResult"]) == true)
            {
                returnCommand = CreateAssessmentResultCommandObject();
                System.Web.HttpContext.Current.Session["ShowAssessmentResult"] = "false";
                if (returnCommand != null)
                {
                    return returnCommand;
                }
            }

            //bool showIndivialQuestionResult = false;
            //string itemType = "";
            //int seqNo = 0;
            //ICPCourseService.CourseConfiguration courseConfiguration = new ICP4.BusinessLogic.ICPCourseService.CourseConfiguration();
            //using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            //{
            //    seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["CurrentIndex"]);
            //    courseConfiguration = cacheManager.GetIFConfigurationExistInCache(courseID);
            //    itemType = cacheManager.GetSequenceItemType(courseID, seqNo);
            //    switch (itemType)
            //    {
            //        case SequenceItemTypeName.PreAssessment:
            //            showIndivialQuestionResult = courseConfiguration.PreAssessmentConfiguration.ShowQuestionAnswerSummary;
            //            break;
            //        case SequenceItemTypeName.PostAssessment:
            //            showIndivialQuestionResult = courseConfiguration.PostAssessmentConfiguration.ShowQuestionAnswerSummary;

            //            break;
            //        case SequenceItemTypeName.Quiz:
            //            showIndivialQuestionResult = courseConfiguration.QuizConfiguration.ShowQuestionAnswerSummary;
            //            break;
            //    }
            //}

            //if (showIndivialQuestionResult)
            //{
            //    using (AssessmentManager.AssessmentManager assessmentManager = new ICP4.BusinessLogic.AssessmentManager.AssessmentManager())
            //    {
            //        returnCommand = assessmentManager.CreateIndividualQuestionScoreCommandObject();
            //    }
            //}
            //else
            //{
            //    returnCommand = ContinueAfterAssessment(courseID);
            //}

            returnCommand = ContinueAfterAssessment(courseID);
            return returnCommand;

        }

        /// <summary>
        /// This method locks the course 
        /// </summary>
        /// <param name="courseID">int courseID</param>
        /// <param name="learnerID">int learnerID</param>
        /// <returns>returns trueif successfull,else false</returns>
        public bool LockCourse(int courseID, int learnerID,int enrollmentID,string lockingReason)
        {
            //Code for preview mode as in preview mode we do not want to track course locks
            bool Result = false;
            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["isPreview"]);
            if (isPreview)
            {
                return true;
            }
            ///////////////////////////////////////////////////////////////////////////////
            ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();
            trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
            trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

            Result = trackingService.LockUnlockCourse(courseID, learnerID, enrollmentID, DateTime.Now, lockingReason, true);
            LockCourseDuringAssessment(courseID, enrollmentID, lockingReason);
            return Result;
            
        }    

        public bool UpdateCourseStatusDuringAssessment(int courseID, int enrollmentID)
        {
            try {
                ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();
                trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                return trackingService.UpdateCourseStatusDuringAssessment(courseID, enrollmentID);
                   
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        
        public bool LockCourseDuringAssessment(int courseID, int enrollmentID, string lockingReason)
        {


            try
            {
                string assessmentStage = Convert.ToString(System.Web.HttpContext.Current.Session["AssessmentStageDuringLock"]);



                if (assessmentStage == "true")
                {
                    ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();
                    trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                    trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                    System.Web.HttpContext.Current.Session["AssessmentStageDuringLock"] = "false";
                    return trackingService.LockCourseDuringAssessment(courseID, enrollmentID, DateTime.Now, lockingReason, true);
                   
                }
                else
                {
                    return false;
                }
            }
            catch (Exception)
            {
                
                throw;
            }
        }

        /// <summary>
        /// This method sends ShowCourseLocked command
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <returns>ShowCourseLocked command object</returns>
        public object CreateCourseLockedCommandObject(int courseID, string lockingReason)
        {
            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
            string paramValue=string.Empty;
            string queryParam = string.Empty;
            int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
            int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
            ICPCourseService.CourseConfiguration courseConfiguration = (HttpRuntime.Cache["COURSECONFIGURATION" + "_" + courseConfigurationID.ToString()] as ICPCourseService.CourseConfiguration);

            //LCMS-4145 Starts
            #region Clear Assessment Session Variables
            if ((System.Web.HttpContext.Current.Session["CourseLockedDuringAssessment"].ToString()=="True" ||
                courseConfiguration.PostAssessmentConfiguration.AllowPauseResumeAssessment) && (courseConfiguration.PostAssessmentConfiguration.AdvanceQuestionSelectionType == ICP4.BusinessLogic.AssessmentManager.ExamPrepConstants.ADVANCEQUESTIONSELECTIONTYPE_RANDOMALTERNATE ||
                                                                                               courseConfiguration.PostAssessmentConfiguration.AdvanceQuestionSelectionType == ICP4.BusinessLogic.AssessmentManager.ExamPrepConstants.ADVANCEQUESTIONSELECTIONTYPE_RANDOMALTERNATE_MULTIPLEITEMBANKS))
            {
            }
            else
            {
                System.Web.HttpContext.Current.Session.Remove("AssessmentItemList");
                System.Web.HttpContext.Current.Session.Remove("SelectedQuestionSequence");
                System.Web.HttpContext.Current.Session.Remove("SelectedQuestionSequenceNo");
                System.Web.HttpContext.Current.Session.Remove("AssessmentFlow");
                System.Web.HttpContext.Current.Session.Remove("AssessmentStage");

                System.Web.HttpContext.Current.Session.Remove("RemidiationIndexSequence");
                System.Web.HttpContext.Current.Session.Remove("RemidiationSequenceNumber");

                System.Web.HttpContext.Current.Session.Remove("ContentRemidiationAssessmentID");
                System.Web.HttpContext.Current.Session.Remove("AssessmentRemediatonCount");

                System.Web.HttpContext.Current.Session.Remove("AssessmentStartTime");
            }
            #endregion
            //LCMS-4145 Ends

            ICP4.CommunicationLogic.CommunicationCommand.ShowCourseLocked.ShowCourseLocked showCourseLocked = new ICP4.CommunicationLogic.CommunicationCommand.ShowCourseLocked.ShowCourseLocked();
            ICP4.CommunicationLogic.CommunicationCommand.ShowCourseLocked.CourseLockedMessage courseLockedMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowCourseLocked.CourseLockedMessage();
            //int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
            //int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
            //ICPCourseService.CourseConfiguration courseConfiguration = (HttpRuntime.Cache["COURSECONFIGURATION" + "_" + courseConfigurationID.ToString()] as ICPCourseService.CourseConfiguration);
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                courseLockedMessage.CourseLockedMessageHeading = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingCourseLocked, brandCode, variant);
                courseLockedMessage.CourseLockedMessageImageUrl = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageCourseLocked, brandCode, variant);
                courseLockedMessage.ContentUnlockCourseButton = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentUnlockCourseButton, brandCode, variant);

                if (lockingReason == LockingReason.ValidationFailed)
                {
                    courseLockedMessage.CourseLockedMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentCourseLockedDueToValidationFail, brandCode, variant);
                    courseLockedMessage.LockType = LockingReason.ValidationFailed;
                    if (Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]) == 0)
                    {
                        courseLockedMessage.RedirectURL = GetUrlPath(HttpContext.Current.Request.Url.ToString(),ConfigurationManager.AppSettings["SelfPacedCourseUnlockURL"].ToString());
                        queryParam = "LSID";
                        paramValue= System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
                    }
                    else
                    {
                        courseLockedMessage.RedirectURL = ConfigurationManager.AppSettings["LegacyCourseUnlockURL"].ToString();
                        queryParam = "ENRID";
                        paramValue= System.Web.HttpContext.Current.Session["EnrollmentID"].ToString();
                    }
                    if (courseLockedMessage.RedirectURL != string.Empty)
                    {
                        courseLockedMessage.RedirectURL += "?"+ queryParam+"=" + paramValue; 
                    }
                }
                else if (lockingReason == LockingReason.MaxAttemptReach)
                {
                    courseLockedMessage.CourseLockedMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentCourseLockedDueToAssessmentFail, brandCode, variant);
                    courseLockedMessage.LockType = LockingReason.MaxAttemptReach;
                    courseLockedMessage.RedirectURL = string.Empty;
                }
                else if (lockingReason == LockingReason.MaxAttemptReachPostAssessment)
                {
                    string msg = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentCourseLockedDueToPostAssessmentFail, brandCode, variant);
                    msg = msg.Replace("$NUMBERINWORDS", NumberToWordConvertor.NumberToText(courseConfiguration.PostAssessmentConfiguration.MaximumNOAttempt, false, cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words0, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words1, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words2, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words3, brandCode, variant)));

                    courseLockedMessage.CourseLockedMessageText = msg; // cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentCourseLockedDueToPostAssessmentFail, brandCode, variant);
                    courseLockedMessage.LockType = LockingReason.MaxAttemptReachPostAssessment; 
                    courseLockedMessage.RedirectURL = string.Empty;
                }
                else if (lockingReason == LockingReason.MaxAttemptReachLessonAssessment)
                {
                    string ContentObjectName = "";
                    if (System.Web.HttpContext.Current.Session["ContentObjectName"] != null)
                    {
                        ContentObjectName = System.Web.HttpContext.Current.Session["ContentObjectName"].ToString();
                    }                    
                    string CourseLockMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentCourseLockedDueToLessonAssessmentFail, brandCode, variant);
                    CourseLockMessageText = CourseLockMessageText.Replace("$MAXATTEMPTNUMBER", NumberToWordConvertor.NumberToText(courseConfiguration.QuizConfiguration.MaximumNOAttempt, false, cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words0, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words1, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words2, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words3, brandCode, variant)));
                    CourseLockMessageText = CourseLockMessageText.Replace("$CONTENTOBJECTNAME", ContentObjectName);
                    if (ContentObjectName.Equals(""))
                    {
                        CourseLockMessageText = CourseLockMessageText.Replace("quiz - ", "quiz");
                    }
                    courseLockedMessage.CourseLockedMessageText = CourseLockMessageText;
                    courseLockedMessage.LockType = LockingReason.MaxAttemptReachLessonAssessment; 
                    courseLockedMessage.RedirectURL = string.Empty;
                }
                else if (lockingReason == LockingReason.MaxAttemptReachPracticeExam)
                {
                    string ContentObjectName = "";
                    if (System.Web.HttpContext.Current.Session["ContentObjectName"] != null)
                    {
                        ContentObjectName = System.Web.HttpContext.Current.Session["ContentObjectName"].ToString();
                    }
                    string CourseLockMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentCourseLockedDueToPracticeExamFail, brandCode, variant);
                    CourseLockMessageText = CourseLockMessageText.Replace("$MAXATTEMPTNUMBER", NumberToWordConvertor.NumberToText(courseConfiguration.QuizConfiguration.MaximumNOAttempt, false, cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words0, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words1, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words2, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words3, brandCode, variant)));
                    CourseLockMessageText = CourseLockMessageText.Replace("$CONTENTOBJECTNAME", ContentObjectName);
                    if (ContentObjectName.Equals(""))
                    {
                        CourseLockMessageText = CourseLockMessageText.Replace("practice exam - ", "practice exam");
                    }
                    courseLockedMessage.CourseLockedMessageText = CourseLockMessageText;
                    courseLockedMessage.LockType = LockingReason.MaxAttemptReachLessonAssessment;
                    courseLockedMessage.RedirectURL = string.Empty;
                }
                else if (lockingReason == LockingReason.MaxAttemptReachPreAssessment)
                {
                    string CourseLockMessageText=cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentCourseLockedDueToPreAssessmentFail, brandCode, variant);
                    CourseLockMessageText = CourseLockMessageText.Replace("$MAXATTEMPTNUMBER", NumberToWordConvertor.NumberToText(courseConfiguration.PreAssessmentConfiguration.MaximumNOAttempt, false, cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words0, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words1, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words2, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words3, brandCode, variant)));
                    courseLockedMessage.CourseLockedMessageText = CourseLockMessageText; 
                    courseLockedMessage.LockType = LockingReason.MaxAttemptReachPreAssessment; 
                    courseLockedMessage.RedirectURL = string.Empty;
                }
                else if (lockingReason == LockingReason.FailedCompletionMustCompleteWithinSpecificAmountOfTimeMinute)
                {
                    //LCMS-4979
                    // ---------------------------------------------------------------------------------------
                    string msg = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentCourseLockedDueToMaximumAllotedTimeReached, brandCode, variant);                    
                    string numDuration = (HttpRuntime.Cache["COURSECONFIGURATION" + "_" + courseConfigurationID.ToString()] as ICPCourseService.CourseConfiguration).CompletionMustCompleteWithinSpecifiedAmountOfTimeMinute.ToString();
                    string duration = (HttpRuntime.Cache["COURSECONFIGURATION" + "_" + courseConfigurationID.ToString()] as ICPCourseService.CourseConfiguration).CompletionUnitOfMustCompleteWithInSpecifiedAmountOfTime;
                    if (duration.ToLower().EndsWith("s"))
                    {
                        duration = duration.Replace("s", "(s)");
                    }

                    msg = msg.Replace("$DURATION", numDuration + " " + duration);
                    courseLockedMessage.CourseLockedMessageText = msg; // cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentCourseLockedDueToMaximumAllotedTimeReached, brandCode, variant);
                    // ---------------------------------------------------------------------------------------

                    courseLockedMessage.LockType = LockingReason.FailedCompletionMustCompleteWithinSpecificAmountOfTimeMinute; 
                }
                else if (lockingReason == LockingReason.FailedCompletionMustCompleteWithinSpecificAmountOfTimeAfterRegistration)
                {
                    //LCMS-4979
                    // ---------------------------------------------------------------------------------------
                    string msg = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentCourseLockedDueToMaximumAllotedTimeReachedRegDate, brandCode, variant);
                    string numDuration = (HttpRuntime.Cache["COURSECONFIGURATION" + "_" + courseConfigurationID.ToString()] as ICPCourseService.CourseConfiguration).CompletionMustCompleteWithinSpecifiedAmountOfTimeDay.ToString();
                    
                    msg = msg.Replace("$DURATION", numDuration + " " + "Day(s)");
                    courseLockedMessage.CourseLockedMessageText = msg; // cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentCourseLockedDueToMaximumAllotedTimeReached, brandCode, variant);
                    // ---------------------------------------------------------------------------------------

                    courseLockedMessage.LockType = LockingReason.FailedCompletionMustCompleteWithinSpecificAmountOfTimeAfterRegistration;
                }
                else if (lockingReason == LockingReason.MustStartCourseWithinSpecificAmountOfTimeAfterRegistration)
                {
                    //LCMS-4979
                    // ---------------------------------------------------------------------------------------
                    string msg = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentCourseLockedDueToMustStartCourseWithinSpecificAmountOfTimeAfterRegistration, brandCode, variant);
                    int numDuration = courseConfiguration.MustStartCourseWithinSpecifiedAmountOfTimeAfterRegistrationDate;
                    string UnitMustStartWithinSpecifiedAmountOfTimeAfterRegistrationDate = courseConfiguration.UnitMustStartCourseWithinSpecifiedAmountOfTimeAfterRegistrationDate; 

                    switch (UnitMustStartWithinSpecifiedAmountOfTimeAfterRegistrationDate)
                    {
                        case TimeUnit.Minutes:
                            if (numDuration == 1)
                            {
                                msg = msg.Replace("#DURATION", "(" + numDuration.ToString() + " " + "Minute)");
                            }
                            else
                            {
                                msg = msg.Replace("#DURATION", "(" + numDuration.ToString()  + " " + "Minutes)");
                            }
                            break;
                        case TimeUnit.Months:
                            if (numDuration == 1)
                            {
                                msg = msg.Replace("#DURATION", "(" + numDuration.ToString() + " " + "Month)");                                
                            }
                            else
                            {
                                msg = msg.Replace("#DURATION", "(" + numDuration.ToString() + " " + "Months)");                                
                            }
                            
                            break;
                        case TimeUnit.Days:
                            if (numDuration == 1)
                            {
                                msg = msg.Replace("#DURATION", "(" + numDuration.ToString() + " " + "Day)");
                            }
                            else
                            {
                                msg = msg.Replace("#DURATION", "(" + numDuration.ToString() + " " + "Days)");
                            }                            
                            break;                        
                    }
                    //msg = msg.Replace("$DURATION", numDuration + " " + "Day(s)");
                    courseLockedMessage.CourseLockedMessageText = msg;
                    courseLockedMessage.LockType = LockingReason.MustStartCourseWithinSpecificAmountOfTimeAfterRegistration;
                }
                else if (lockingReason == LockingReason.NothingEnable)
                {
                    courseLockedMessage.CourseLockedMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentCourseLockedDueToNothingEnable, brandCode, variant);
                }
                else if (lockingReason == LockingReason.GeneralCase)
                {
                    courseLockedMessage.CourseLockedMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentCourseLockedDueToGeneralCase, brandCode, variant);
                }
                else if (lockingReason == LockingReason.IdleUserTimeElapsed)
                {
                    courseLockedMessage.CourseLockedMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentCourseLockedDueToIdleTime, brandCode, variant);
                    courseLockedMessage.LockType = LockingReason.IdleUserTimeElapsed;
                    courseLockedMessage.RedirectURL = string.Empty;
                }
                else if (lockingReason == LockingReason.CoursePublishedScene)
                {
                    courseLockedMessage.CourseLockedMessageHeading = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.CoursePublishHeading, brandCode, variant);
                    courseLockedMessage.CourseLockedMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.CoursePublishSceneMessage, brandCode, variant);                    
                    courseLockedMessage.RedirectURL = string.Empty;
                    courseLockedMessage.LockType = LockingReason.CoursePublishedScene;
                }
                else if (lockingReason == LockingReason.CoursePublishedAssessment)
                {
                    courseLockedMessage.CourseLockedMessageHeading = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.CoursePublishHeading, brandCode, variant);
                    courseLockedMessage.CourseLockedMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.CoursePublishAssessmentMessage, brandCode, variant);
                    courseLockedMessage.LockType = LockingReason.CoursePublishedAssessment;
                    courseLockedMessage.RedirectURL = string.Empty;
                }
                else if (lockingReason == LockingReason.ReportingFieldMisMatch)
                {
                    courseLockedMessage.CourseLockedMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.CARealStateValidationMessageLockedDueToFailedAttempt, brandCode, variant);
                    courseLockedMessage.LockType = LockingReason.ReportingFieldMisMatch;
                    courseLockedMessage.RedirectURL = string.Empty;
                }
                else if (lockingReason == LockingReason.CourseApprovalNotAttachedWithCourse)
                {
                    courseLockedMessage.CourseLockedMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.CARealStateValidationMessageLockedDueToFieldNotSet, brandCode, variant);
                    courseLockedMessage.LockType = LockingReason.CourseApprovalNotAttachedWithCourse;
                    courseLockedMessage.RedirectURL = string.Empty;
                }
                else if (lockingReason == LockingReason.ReportingFieldNotAttachedWithCourseApproval)
                {
                    courseLockedMessage.CourseLockedMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.CARealStateValidationMessageLockedDueToFieldNotSet, brandCode, variant);
                    courseLockedMessage.LockType = LockingReason.ReportingFieldNotAttachedWithCourseApproval;
                    courseLockedMessage.RedirectURL = string.Empty;
                }
                else if (lockingReason == LockingReason.MonitorFieldMisMatch)
                {
                    courseLockedMessage.CourseLockedMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NYInsuranceValidationMessageLockedDueToFailedAttempt, brandCode, variant);
                    courseLockedMessage.LockType = LockingReason.MonitorFieldMisMatch; 
                    courseLockedMessage.RedirectURL = string.Empty;
                }
                else if (lockingReason == LockingReason.ClickingAwayFromActiveWindow)
                {
                    courseLockedMessage.CourseLockedMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentCourseLockedDueClickAwayToActiveWindow, brandCode, variant);
                    courseLockedMessage.LockType = LockingReason.ClickingAwayFromActiveWindow;
                    courseLockedMessage.RedirectURL = string.Empty;
                }
                else if (lockingReason == LockingReason.ProctorLoginFailed)
                {
                    courseLockedMessage.CourseLockedMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ProctorLoginMessageCourseLockedDueToFailedLoginAttempts, brandCode, variant);
                    courseLockedMessage.LockType = LockingReason.ProctorLoginFailed;
                    courseLockedMessage.RedirectURL = string.Empty;
                }
                else if (lockingReason == LockingReason.ProctorAccountNotActive)
                {
                    courseLockedMessage.CourseLockedMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ProctorLoginScreenErrAccountNotActive, brandCode, variant);
                    courseLockedMessage.LockType = LockingReason.ProctorAccountNotActive;
                    courseLockedMessage.RedirectURL = string.Empty;
                }
                else if (lockingReason == LockingReason.ProctorNotPartOfCredential)
                {
                    courseLockedMessage.CourseLockedMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ProctorLoginScreenErrCurrentProctorNotAssociated, brandCode, variant);
                    courseLockedMessage.LockType = LockingReason.ProctorNotPartOfCredential;
                    courseLockedMessage.RedirectURL = string.Empty;
                }
            }
            showCourseLocked.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowCourseLocked;
            showCourseLocked.CourseLockedMessage = courseLockedMessage;
            return showCourseLocked;

        }

        /// <summary>
        /// This method create the command object of error
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <param name="errorMessageString">ErrorMessageString string value represent any error</param>
        /// <returns></returns>
        public object CreateErrorMessage(int courseID, string errorMessageString)
        {
            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
            ICP4.CommunicationLogic.CommunicationCommand.ShowErrorMessage.ShowErrorMessage showErrorMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowErrorMessage.ShowErrorMessage();
            ICP4.CommunicationLogic.CommunicationCommand.ShowErrorMessage.ErrorMessage errorMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowErrorMessage.ErrorMessage();
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                errorMessage.ErrorMessageHeading = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingInvalidMoveMessage, brandCode, variant);
                errorMessage.ErrorMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.GenericInvalidMoveErrorMessage, brandCode, variant);  // errorMessageString;
                errorMessage.ErrorMessageImageURL = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageInvalidMoveMessage, brandCode, variant);
                errorMessage.ErrorMessageButtonText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingInvalidMoveMessageOkButton, brandCode, variant);
            }
            showErrorMessage.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowErrorMessage;
            showErrorMessage.ErrorMessage = errorMessage;
            return showErrorMessage;

        }


        /// <summary>
        /// This method finds the last result of student on any Assessment attempt.
        /// </summary>
        /// <param name="learnerStatistics">LearnerStatistics, array of ICPTrackingService.LearnerStatistics</param>
        /// <param name="masteryScore">MasteryScore integer value, represent a score which should be achieve inorder to pass the assessment</param>
        /// <param name="isPass">IsPass boolean value</param>
        /// <param name="attempNo">AttempNo integer value</param>
        public void GetLastAssessmentResult(ICPTrackingService.LearnerStatistics[] learnerStatistics, int masteryScore, out bool isPass, out int attempNo, out bool actionTaken, out long learnerStatisticsID,out int remediationCount)
        {

            if (learnerStatistics != null && learnerStatistics.Length > 0)
            {
                attempNo = learnerStatistics[learnerStatistics.Length - 1].AssessmentAttemptNumber;
                int noAnswerCorrect = learnerStatistics[learnerStatistics.Length - 1].NumberAnswersCorrect;
                int noAnswerIncorrect = learnerStatistics[learnerStatistics.Length - 1].NumberAnswersIncorrect;
                int totalQuestions = noAnswerCorrect + noAnswerIncorrect;
                //double percentCorrect = learnerStatistics[learnerStatistics.Length - 1].RawScore;
                isPass = learnerStatistics[learnerStatistics.Length - 1].IsPass;
                //decimal percentCorrect = (noAnswerCorrect / Convert.ToDecimal(totalQuestions)) * 100;
                //if (percentCorrect >= masteryScore)
                //{
                //    isPass = true;
                //}
                //else
                //{
                //    isPass = false;
                //}
                attempNo = learnerStatistics[learnerStatistics.Length - 1].AssessmentAttemptNumber;
                actionTaken = learnerStatistics[learnerStatistics.Length - 1].MaxAtemptActionTaken;
                learnerStatisticsID = learnerStatistics[learnerStatistics.Length - 1].LearnerStatisticsID;
                remediationCount = learnerStatistics[learnerStatistics.Length - 1].RemediationCount;
            }
            else
            {
                isPass = false;
                attempNo = 0;
                actionTaken = false;
                learnerStatisticsID = 0;
                remediationCount = 0;
            }
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="assessmentItemID"></param>
        /// <param name="courseID"></param>
        /// <returns></returns>
        public object ShowContent(int assessmentItemID, int courseID)
        {
            List<int> remidationIndexSequence = new List<int>();
            ICPAssessmentService.AssessmentItem[] assessmentItems = (ICPAssessmentService.AssessmentItem[])System.Web.HttpContext.Current.Session["AssessmentItemList"];
            string assessmentItemGUID = string.Empty;

            using (AssessmentManager.AssessmentManager assessmentManager = new ICP4.BusinessLogic.AssessmentManager.AssessmentManager())
            {
                assessmentItemGUID = assessmentManager.GetAssessmentItemGUID(assessmentItemID, assessmentItems);
            }

            ICPAssessmentService.AssessmentService assessmentService = new ICP4.BusinessLogic.ICPAssessmentService.AssessmentService();
            assessmentService.Url = ConfigurationManager.AppSettings["ICPAssessmentService"];
            assessmentService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]); 

            string[] sceneGUIDs = assessmentService.GetAssessmentItemScene(assessmentItemGUID, courseID);

            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);                
                ICPCourseService.Sequence sequence = cacheManager.GetIFSequenceExistInCache(courseID, source, courseConfigurationID);
                remidationIndexSequence = GetRemidationIndexSequence(sceneGUIDs, sequence);
            }


            System.Web.HttpContext.Current.Session["RemidiationIndexSequence"] = remidationIndexSequence;
            System.Web.HttpContext.Current.Session["RemidiationSequenceNumber"] = -1;
            return NextBackRemidationScene(courseID, 1, assessmentItemID);
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="courseID"></param>
        /// <param name="direction"></param>
        /// <param name="contentRemidiationAssessmentID"></param>
        /// <returns></returns>
        public object NextBackRemidationScene(int courseID, int direction, int contentRemidiationAssessmentID)
        {
            object returnCommand = new object();
            int remidationseqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["RemidiationSequenceNumber"]);
            List<int> remidationIndexSequence = (List<int>)System.Web.HttpContext.Current.Session["RemidiationIndexSequence"];

            int courseSequenceNo = GetNextBackRemidationSequenceItem(remidationseqNo, direction, remidationIndexSequence);
            if (courseSequenceNo >= 0)
            {
                ICPCourseService.SequenceItem sequenceItem = GetSequenceItem(courseID, courseSequenceNo);


                switch (sequenceItem.SequenceItemType)
                {
                    case SequenceItemTypeName.FlashAsset:
                        {
                            //Load Flash Based Asset
                            returnCommand = LoadFlashAsset(sequenceItem, true);
                            break;
                        }
                    case SequenceItemTypeName.ContentAsset:
                        {
                            //Load Template based Asset
                            returnCommand = LoadContentAsset(sequenceItem, true);
                            break;
                        }

                }
                remidationseqNo += direction;
                System.Web.HttpContext.Current.Session["RemidiationSequenceNumber"] = remidationseqNo;
            }
            else
            {
                using (AssessmentManager.AssessmentManager assessmentManager = new AssessmentManager.AssessmentManager())
                {
                    returnCommand = assessmentManager.ShowSpecifiedRemidationQuestion(contentRemidiationAssessmentID);
                }
            }

            return returnCommand;
        }

        public void ValidationTimerExpired()
        {
            System.Web.HttpContext.Current.Session["ValidationTimerExpired"] = true;
        }
        public object StartValidation(object currentCommand)
        {
            //Change Made by Waqas Zakai 1st March 2011
            // LCMS-6461
            // START                        
            if (IsCoursePublished() == true)
            {
                string assessmentStage = Convert.ToString(System.Web.HttpContext.Current.Session["AssessmentStage"]);
                if (assessmentStage == "AssessmentIsInProgress")
                {
                    ICP4.BusinessLogic.AssessmentManager.AssessmentManager assessmentManager = new ICP4.BusinessLogic.AssessmentManager.AssessmentManager();
                    object CoursePublishCommand = CreateCourseLockedCommandObject(int.Parse(System.Web.HttpContext.Current.Session["CourseID"].ToString()), LockingReason.CoursePublishedAssessment);
                    assessmentManager.SessionAbandonOnAssessment();
                    return CoursePublishCommand;
                }
                else
                {
                    object CoursePublishCommand = CreateCourseLockedCommandObject(int.Parse(System.Web.HttpContext.Current.Session["CourseID"].ToString()), LockingReason.CoursePublishedScene);
                    SessionAbandonOnScene();
                    return CoursePublishCommand;
                }
            }
            //END
            object newComand = new object();
            System.Web.HttpContext.Current.Session["CurrentCommand"] = currentCommand;
            using (ValidationManager.ValidationManager validationManager = new ValidationManager.ValidationManager())
            {
                newComand= validationManager.StartValidation();
            }
            return newComand;
        }
        public object ResumeCourseAfterValidation()
        {
            object command = new object();
            command = CheckSeatTime(1);
            if (command != null)
            {
                return command;
            }
            else
            {
                //Change Made by Waqas Zakai 1st March 2011
                // LCMS-6461
                // START                        
                if (IsCoursePublished() == true)
                {
                    string assessmentStage = Convert.ToString(System.Web.HttpContext.Current.Session["AssessmentStage"]);
                    if (assessmentStage == "AssessmentIsInProgress")
                    {
                        ICP4.BusinessLogic.AssessmentManager.AssessmentManager assessmentManager = new ICP4.BusinessLogic.AssessmentManager.AssessmentManager();    
                        object CoursePublishCommand = CreateCourseLockedCommandObject(int.Parse(System.Web.HttpContext.Current.Session["CourseID"].ToString()), LockingReason.CoursePublishedAssessment);
                        assessmentManager.SessionAbandonOnAssessment();
                        return CoursePublishCommand;
                    }
                    else
                    {
                        object CoursePublishCommand = CreateCourseLockedCommandObject(int.Parse(System.Web.HttpContext.Current.Session["CourseID"].ToString()), LockingReason.CoursePublishedScene);
                        SessionAbandonOnScene();
                        return CoursePublishCommand;
                    }
                }
                //END
                else
                {
                    command = System.Web.HttpContext.Current.Session["CurrentCommand"];
                    System.Web.HttpContext.Current.Session.Remove("CurrentCommand");
                    System.Web.HttpContext.Current.Session["ValidationTimerExpired"] = false;
                }
            }
            return command;
        }
        public string ContinueAfterEndOfCourse()
        {
            string redirectURL=System.Web.HttpContext.Current.Session["RedirectURL"].ToString();
            return redirectURL;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="courseID"></param>
        /// <param name="masteryScore"></param>
        /// <param name="showPercentageScore"></param>
        private void SetMasteryScoreAndScoreType(int courseID, out int masteryScore, out bool showPercentageScore)
        {
            string itemType = string.Empty;
            masteryScore = 80;
            showPercentageScore = false;
            int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["CurrentIndex"]);
            ICPCourseService.CourseConfiguration courseConfiguration = null;
            object returnObject = new object();
            ICPCourseService.SequenceItem sequenceItem = null;
            


            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                itemType = cacheManager.GetSequenceItemType(courseID, seqNo, source, courseConfigurationID);
                sequenceItem = cacheManager.GetRequestedItemFromQueue(courseID, seqNo, source, courseConfigurationID);                
                courseConfiguration = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);

                if (itemType == SequenceItemTypeName.Exam) 
                {
                    itemType = sequenceItem.ExamType; 
                } 

                switch (itemType)
                {
                    case SequenceItemTypeName.PreAssessment:
                        {
                            masteryScore = courseConfiguration.PreAssessmentConfiguration.MasteryScore;
                            if (courseConfiguration.PreAssessmentConfiguration.ScoreType == AssessmentManager.ScoreType.PassFail)
                            {
                                showPercentageScore = false;
                            }
                            else
                            {
                                showPercentageScore = true;
                            }
                            break;
                        }
                    case SequenceItemTypeName.PostAssessment:
                        {
                            masteryScore = courseConfiguration.PostAssessmentConfiguration.MasteryScore;
                            if (courseConfiguration.PostAssessmentConfiguration.ScoreType == AssessmentManager.ScoreType.PassFail)
                            {
                                showPercentageScore = false;
                            }
                            else
                            {
                                showPercentageScore = true;
                            }
                            break;
                        }
                    case SequenceItemTypeName.Quiz:
                        {
                            masteryScore = courseConfiguration.QuizConfiguration.MasteryScore;
                            if (courseConfiguration.QuizConfiguration.ScoreType == AssessmentManager.ScoreType.PassFail)
                            {
                                showPercentageScore = false;
                            }
                            else
                            {
                                showPercentageScore = true;
                            }
                            break;
                        }
                    case SequenceItemTypeName.PracticeExam:
                        {
                            ICPCourseService.AssessmentConfiguration assessmentConfiguration = new ICP4.BusinessLogic.ICPCourseService.AssessmentConfiguration();
                            assessmentConfiguration = (ICPCourseService.AssessmentConfiguration)System.Web.HttpContext.Current.Session["PracticeExamAssessmentConfiguration"];
                            masteryScore = assessmentConfiguration.MasteryScore;
                            if (assessmentConfiguration.ScoreType == AssessmentManager.ScoreType.PassFail)
                            {
                                showPercentageScore = false;
                            }
                            else
                            {
                                showPercentageScore = true;
                            }
                            break;
                        }                 
                }
            }
        }

        /// <summary>
        /// This method loads Sequence Item into appropriate command.
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <param name="studentID">StudentID integer value</param>
        /// <param name="seqNo">seqNo integer value</param>
        /// <param name="sequenceItem">CourseID integer value</param>
        /// <returns></returns>
        private object LoadSequenceItemIntoCommand(int courseID, int seqNo, ICP4.BusinessLogic.ICPCourseService.SequenceItem sequenceItem, bool isNormalDirection)
        {

            object returnCommand = new object();

            System.Web.HttpContext.Current.Session["CurrentIndex"] = seqNo;
            System.Web.HttpContext.Current.Session["ItemGUID"] = sequenceItem.Item_GUID.ToString();
            System.Web.HttpContext.Current.Session["SceneGUID"] = sequenceItem.SceneGUID.ToString();
            /*LCMS-8972 - Start*/
            System.Web.HttpContext.Current.Session["AssetStartTime"] = DateTime.Now;
            /*LCMS-8972 - End*/

            //clearing all sessions related to assessment
            System.Web.HttpContext.Current.Session.Remove("AssessmentItemList");
            System.Web.HttpContext.Current.Session.Remove("SelectedQuestionSequence");
            System.Web.HttpContext.Current.Session.Remove("SelectedQuestionSequenceNo");
            System.Web.HttpContext.Current.Session.Remove("AssessmentFlow");
            System.Web.HttpContext.Current.Session.Remove("AssessmentStage");

            System.Web.HttpContext.Current.Session.Remove("RemidiationIndexSequence");
            System.Web.HttpContext.Current.Session.Remove("RemidiationSequenceNumber");

            System.Web.HttpContext.Current.Session.Remove("ContentRemidiationAssessmentID");
            System.Web.HttpContext.Current.Session.Remove("AssessmentRemediatonCount");

            System.Web.HttpContext.Current.Session.Remove("AssessmentStartTime");

            //Sesions related to knowledge check
            System.Web.HttpContext.Current.Session.Remove("KnowledgeCheckAssessmentItems");
            System.Web.HttpContext.Current.Session.Remove("KnowledgeCheckSequenceNo");
            System.Web.HttpContext.Current.Session.Remove("KnowledgeCheckInProgress");

            //if (seqNo == 1 && LoadDisplayText1())
            //if (seqNo == 1)
            if (seqNo >=0)
            {
                if (System.Web.HttpContext.Current.Session["isDisplayTextCrossed"] == null)
                {
                    System.Web.HttpContext.Current.Session["isDisplayTextCrossed"] = false;
                }
                if (!(bool)System.Web.HttpContext.Current.Session["isDisplayTextCrossed"])
                {
                    returnCommand = LoadDocuSignRequirement(sequenceItem);
                    if (returnCommand != null)
                    {
                        using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
                        {
                            courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                            courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                            int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
                            if (!courseService.GetDocuSignedAffidavitStatus(enrollmentID))
                            {
                                return returnCommand;    
                            }
                        }
                        
                    }
                }
            }

            switch (sequenceItem.SequenceItemType)
            {
                case SequenceItemTypeName.PreAssessment:
                    {
                        //Load Pre Assessment
                        returnCommand = StartOrContinuePreAssessment(courseID,sequenceItem,isNormalDirection, 0);
                        break;
                    }
                case SequenceItemTypeName.IntroPage:
                    {
                        //Load Intro Slide
                        returnCommand = LoadIntroPage(courseID, sequenceItem);
                        break;
                    }
                case SequenceItemTypeName.ContentObject:
                    {
                        //IMPORTANT NOTE! We do not load ContentObject into command instead of it we always find First occurance of Asset Or Quiz whenever course pointer reaches to ContentObject Marker
                        //Load Content Object(Find very next instance of Asset or Quiz and return appropriate object)
                        returnCommand = LoadContentObject(courseID, seqNo, sequenceItem, isNormalDirection);
                        break;
                    }
                case SequenceItemTypeName.FlashAsset:
                    {
                        //Load Flash Based Asset
                        returnCommand = LoadFlashAsset(sequenceItem, false);
                        break;
                    }
                case SequenceItemTypeName.ContentAsset:
                    {
                        //Load Template based Asset
                        returnCommand = LoadContentAsset(sequenceItem, false);
                        break;
                    }
                case SequenceItemTypeName.Quiz:
                    {
                        //Load Quiz Assessment
                        returnCommand = StartOrContinueQuiz(courseID, sequenceItem.ParentID,sequenceItem,isNormalDirection, 0);
                        break;
                    }
                case SequenceItemTypeName.EndOfCourseScene:
                    {
                        //Load End of Course Slide
                        returnCommand = LoadEndPage(courseID, sequenceItem);
                        break;
                    }
                case SequenceItemTypeName.PostAssessment:
                    {
                        //Load Post Course Assessment
                        returnCommand = StartOrContinuePostAssessment(courseID,sequenceItem,isNormalDirection, 0);
                        break;
                    }
                case SequenceItemTypeName.CourseLoading:
                    {
                        returnCommand = LoadCourseLoadingScene(sequenceItem);
                        break;
                    }
                case SequenceItemTypeName.CourseIntroduction:
                    {
                        //returnCommand= LoadDocuSignRequirement(sequenceItem);
                        //if (returnCommand == null)
                        //{
                        //    returnCommand = LoadCourseIntroductionScene(sequenceItem);
                        //}
                        returnCommand = LoadCourseIntroductionScene(sequenceItem);
                        break;
                    }
                case SequenceItemTypeName.DisclaimerScene:
                    {
                        returnCommand = LoadDisclaimerScene(sequenceItem);
                        break;
                    }
                case SequenceItemTypeName.CopyrightScene:
                    {
                        returnCommand = LoadCopyrightScene(sequenceItem);
                        break;
                    }
                case SequenceItemTypeName.MissionStatementScene:
                    {
                        returnCommand = LoadMissionStatementScene(sequenceItem);
                        break;
                    }
                case SequenceItemTypeName.CustomerSupportScene:
                    {
                        returnCommand = LoadCustomerSupportScene(sequenceItem);
                        break;
                    }
                case SequenceItemTypeName.LessonIntroductionScene:
                    {
                        returnCommand = LoadLessonIntroScene(sequenceItem);
                        break;
                    }
                case SequenceItemTypeName.EOCInstructions:
                    {
                        returnCommand = GetEOCInstructions(isNormalDirection);
                        break;
                    }
                case SequenceItemTypeName.EmbeddedAcknowledgmentScene:
                    {
                        returnCommand = LoadEmbeddedAcknowledgment(sequenceItem);
                        break;
                    }
                case SequenceItemTypeName.CourseCertificate:
                    {
                        int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                        if (source == 1)
                        {
                            if (isNormalDirection == true)
                                return NextBack(courseID, 1);
                            else
                                return NextBack(courseID, -1);
                        }
                        else
                        {                            
                            ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();
                            trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                            trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                            int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
                            //int courseApproval = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseApprovalID"]);

                            bool isCourseCompleted = trackingService.IsCourseCompleted(enrollmentID);
                            if (isCourseCompleted)
                            {
                                // Changed by Waqas Zakai
                                // LCMS-11323
                                // Start
                                /*if (courseApproval > 0)
                                {
                                    if (isNormalDirection == true)
                                        return NextBack(courseID, 1);
                                    else
                                        return NextBack(courseID, -1);
                                }
                                else
                                {*/
                                    returnCommand = LoadCourseCertificate(sequenceItem, isNormalDirection);
                                //}
                                // Changed by Waqas Zakai
                                // LCMS-11323
                                // END
                            }
                            else
                            {
                                if (isNormalDirection == true)
                                    return NextBack(courseID, 1);
                                else
                                    return NextBack(courseID, -1);
                            }
                        }
                        break;
                    }
                case SequenceItemTypeName.CourseEvaluation:
                    {
                        returnCommand = StartCourseEvaluation(sequenceItem,isNormalDirection);
                        break;
                    }
                case SequenceItemTypeName.SpecialQuestionnaire:
                    {
                        returnCommand = StartCourseEvaluation(sequenceItem, isNormalDirection);
                        break;
                    }
                case SequenceItemTypeName.KnowledgeCheck:
                    {
                        returnCommand = StartKnowledgeCheck(sequenceItem, isNormalDirection);
                        break;
                    }
                case SequenceItemTypeName.MaximumSeatTimeCourseLaunch: 
                    {
                        returnCommand = LoadMaximumSeatTimeCourseLaunchScene();
                        break;
                    }
                case SequenceItemTypeName.Exam:
                    {
                        if (sequenceItem.ExamType == SequenceItemType.PreAssessment) 
                        {
                            returnCommand = StartOrContinuePreAssessment(courseID, sequenceItem, isNormalDirection, sequenceItem.examID);
                            break;
                        }
                        if (sequenceItem.ExamType == SequenceItemType.PostAssessment)
                        {
                            returnCommand = StartOrContinuePostAssessment(courseID, sequenceItem, isNormalDirection, sequenceItem.examID);
                            break;
                        }
                        if (sequenceItem.ExamType == SequenceItemType.Quiz)
                        {
                            returnCommand = StartOrContinueQuiz(courseID, sequenceItem.ParentID, sequenceItem, isNormalDirection, sequenceItem.examID);
                            break;
                        }
                        if (sequenceItem.ExamType == SequenceItemType.PracticeExam)
                        {
                            returnCommand = StartOrContinuePracticeExam(courseID, sequenceItem.ParentID, sequenceItem, isNormalDirection, sequenceItem.examID);
                            break;
                        }                        
                        break;
                    }
                case SequenceItemTypeName.ProctorLoginScreen: // LCMS-9455
                    {
                        returnCommand = SpecialPostAssessmentValidation(null);
                        break;
                    }
                case SequenceItemTypeName.CourseRatingScene://LCMS-11877
                    {
                        returnCommand = LoadCourseLevelRating(sequenceItem, isNormalDirection);
                        break;                    
                    }
            }

            return returnCommand;
        }


        // LCMS-9455
        public object SpecialPostAssessmentValidation(object assessmentStartCommand)
        {
            object returnCommand = null;
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);            
            int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
            int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
            int courseApproval = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseApprovalID"]);
            CacheManager.CacheManager cacheManager = new CacheManager.CacheManager();

            ICPCourseService.CourseConfiguration courseConfiguration = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);

            if (source == 1 || (courseConfiguration.IsRequireProctorValidation == false && courseConfiguration.IsANSIValidation == false && courseConfiguration.IsRequireLearnerValidation == false && courseConfiguration.IsCARealStateValidation == false && courseConfiguration.IsNYInsuranceValidation == false))
            {
                return assessmentStartCommand;
            }

            if (courseConfiguration.IsRequireProctorValidation == true && courseConfiguration.IsANSIValidation == true)
            {
                returnCommand = LoadANSIProctorLoginScreen(assessmentStartCommand);
            }

            if (courseConfiguration.IsRequireLearnerValidation == true && courseConfiguration.IsCARealStateValidation == true)
            {
                returnCommand = LoadCARealStateValidationScreen(assessmentStartCommand);
            }

            if (courseConfiguration.IsRequireProctorValidation == true && courseConfiguration.IsNYInsuranceValidation == true)
            {
                returnCommand = LoadNYInsuranceValidationScreen(assessmentStartCommand);
            }
            
            if (returnCommand == null)
            {
                returnCommand = assessmentStartCommand;
            }

            return returnCommand;
        }

        public object LoadANSIProctorLoginScreen(object assessmentStartCommand)
        {
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            // LCMS-9455
            //------------------------------------------------------------------------------------------
            int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
            int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
            CacheManager.CacheManager cacheManager = new CacheManager.CacheManager();

            ICPCourseService.CourseConfiguration courseConfiguration = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);
            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsPreview"]);
            if (source == 1 || courseConfiguration.IsRequireProctorValidation == false || courseConfiguration.IsANSIValidation == false)
            {
                return assessmentStartCommand;
            }

            /*if (courseConfiguration.IsProctorLoginEnabled)
            {
                if ((!isPreview) && (!ProctorLoginRequirementCriteriaMeets(Convert.ToString(System.Web.HttpContext.Current.Session["LearnerSessionID"]))))
                {
                    return assessmentStartCommand;
                }
            }*/

            //// LCMS-9510 
            //// -------------------------------------------------------------------------
            //if (!courseConfiguration.IsProctorLoginEnabled)
            //{
            //    return assessmentStartCommand;
            //}
            //// -------------------------------------------------------------------------



            System.Web.HttpContext.Current.Session["CurrentCommandProctor"] = assessmentStartCommand;
            //------------------------------------------------------------------------------------------
            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
            int proctorLoginAttempt = 3;
            int.TryParse(ConfigurationManager.AppSettings["ProctorLoginAttempt"].ToString(), out proctorLoginAttempt);

            ICP4.CommunicationLogic.CommunicationCommand.ShowProctorLoginScreen.ProctorLoginScreen proctorLoginScreen = new ICP4.CommunicationLogic.CommunicationCommand.ShowProctorLoginScreen.ProctorLoginScreen();
            ICP4.CommunicationLogic.CommunicationCommand.ShowProctorLoginScreen.ShowProctorLoginScreen showProctorLoginScreen = new ICP4.CommunicationLogic.CommunicationCommand.ShowProctorLoginScreen.ShowProctorLoginScreen();

            proctorLoginScreen.ProctorLoginScreenContent = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ProctorLoginScreenContent, brandCode, variant);
            proctorLoginScreen.ProctorLoginScreenContent = proctorLoginScreen.ProctorLoginScreenContent.Replace("$ATTEMPT_NO", proctorLoginAttempt.ToString());
            proctorLoginScreen.ProctorLoginScreenHeading = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ProctorLoginScreenHeading, brandCode, variant);
            proctorLoginScreen.ProctorLoginScreenHeadingImage = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ProctorLoginScreenHeadingImage, brandCode, variant);
            proctorLoginScreen.ProctorLoginScreenSubmitButtonText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ProctorLoginScreenSubmitButtonText, brandCode, variant);
            proctorLoginScreen.ProctorLoginScreenProgressAnimation = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageProgressAnimation, brandCode, variant);

            proctorLoginScreen.ProctorLoginTableText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ProctorLoginTableText, brandCode, variant);
            proctorLoginScreen.ProctorLoginIDText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ProctorLoginIDText, brandCode, variant);
            proctorLoginScreen.ProctorPasswordText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ProctorPasswordText, brandCode, variant);
            proctorLoginScreen.ProctorLoginIDRequiredValidationText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ProctorLoginIDRequiredValidationText, brandCode, variant);
            proctorLoginScreen.ProctorPasswordRequiredValidationText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ProctorPasswordRequiredValidationText, brandCode, variant);
            proctorLoginScreen.ProctorattemptMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ProctorattemptMessageText, brandCode, variant);
            
            if (ConfigurationManager.AppSettings["ProctorLoginAttempt"] != null)
            {
                proctorLoginScreen.ProctorLoginScreenAttempts = ConfigurationManager.AppSettings["ProctorLoginAttempt"].ToString();
            }

            proctorLoginScreen.ProctorattemptMessageText = proctorLoginScreen.ProctorattemptMessageText.Replace("$ATTEMPTS", proctorLoginScreen.ProctorLoginScreenAttempts);

            showProctorLoginScreen.CommandName = CommandNames.ShowProctorLoginScreen;
            showProctorLoginScreen.ProctorLoginScreen = proctorLoginScreen;

            return showProctorLoginScreen;
        }

        public object LoadCARealStateValidationScreen(object assessmentStartCommand)
        {
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);            
            int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
            int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
            CacheManager.CacheManager cacheManager = new CacheManager.CacheManager();

            ICPCourseService.CourseConfiguration courseConfiguration = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);
            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsPreview"]);
            if (source == 1 || courseConfiguration.IsRequireLearnerValidation == false || courseConfiguration.IsCARealStateValidation == false)
            {
                return assessmentStartCommand;
            }

            System.Web.HttpContext.Current.Session["CurrentCommandProctor"] = assessmentStartCommand;            

            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
            int CARealStateValidationAttempt = 3;
            int.TryParse(ConfigurationManager.AppSettings["CARealStateValidationAttempt"].ToString(), out CARealStateValidationAttempt);

            ICP4.CommunicationLogic.CommunicationCommand.ShowSpecialPostAssessmentValidation.SpecialPostAssessmentValidation specialPostAssessmentValidation = new ICP4.CommunicationLogic.CommunicationCommand.ShowSpecialPostAssessmentValidation.SpecialPostAssessmentValidation();
            ICP4.CommunicationLogic.CommunicationCommand.ShowSpecialPostAssessmentValidation.ShowSpecialPostAssessmentValidation ShowSpecialPostAssessmentValidation = new ICP4.CommunicationLogic.CommunicationCommand.ShowSpecialPostAssessmentValidation.ShowSpecialPostAssessmentValidation();

            string templateSpecialPostAssessmentValidation = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.SpecialPostAssessmentValidationTemplate, brandCode, variant);

            templateSpecialPostAssessmentValidation = templateSpecialPostAssessmentValidation.Replace("#HEADING", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.SpecialPostAssessmentValidationHeading, brandCode, variant)); 
            templateSpecialPostAssessmentValidation = templateSpecialPostAssessmentValidation.Replace("#CONTENT", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.SpecialPostAssessmentValidationContent, brandCode, variant)); 
            templateSpecialPostAssessmentValidation = templateSpecialPostAssessmentValidation.Replace("#PANELHEADING", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.SpecialPostAssessmentValidationPanelHeading, brandCode, variant)); 
            templateSpecialPostAssessmentValidation = templateSpecialPostAssessmentValidation.Replace("#FIELD1TEXT", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.SpecialPostAssessmentValidationLabelField1, brandCode, variant)); 
            templateSpecialPostAssessmentValidation = templateSpecialPostAssessmentValidation.Replace("#FIELD2TEXT", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.SpecialPostAssessmentValidationLabelField2, brandCode, variant));

            specialPostAssessmentValidation.CARealStateRequiredValidationMessage1 = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.CARealStateRequiredValidationMessage1, brandCode, variant);
            specialPostAssessmentValidation.CARealStateRequiredValidationMessage1 = specialPostAssessmentValidation.CARealStateRequiredValidationMessage1.Replace("#FIELD1TEXT", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.SpecialPostAssessmentValidationLabelField1, brandCode, variant));

            specialPostAssessmentValidation.CARealStateRequiredValidationMessage2 = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.CARealStateRequiredValidationMessage1, brandCode, variant);
            specialPostAssessmentValidation.CARealStateRequiredValidationMessage2 = specialPostAssessmentValidation.CARealStateRequiredValidationMessage2.Replace("#FIELD1TEXT", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.SpecialPostAssessmentValidationLabelField2, brandCode, variant));

            string attemptMessage= cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.SpecialPostAssessmentValidationAttemptMessage, brandCode, variant);
            attemptMessage = attemptMessage.Replace("#ATTEMPTNUMBER",CARealStateValidationAttempt.ToString());
            templateSpecialPostAssessmentValidation = templateSpecialPostAssessmentValidation.Replace("#ATTEMPTMESSAGE", attemptMessage);
            templateSpecialPostAssessmentValidation = templateSpecialPostAssessmentValidation.Replace("#CONTINUEBUTTON", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.SpecialPostAssessmentValidationLabelContinueButton, brandCode, variant));
            templateSpecialPostAssessmentValidation = templateSpecialPostAssessmentValidation.Replace("#CANCELBUTTON", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.SpecialPostAssessmentValidationLabelCancelButton, brandCode, variant));
            templateSpecialPostAssessmentValidation = templateSpecialPostAssessmentValidation.Replace("#ERRORMESSAGE", "");

            specialPostAssessmentValidation.Template = templateSpecialPostAssessmentValidation;            
            ShowSpecialPostAssessmentValidation.CommandName = CommandNames.ShowSpecialPostAssessmentValidation;
            ShowSpecialPostAssessmentValidation.SpecialPostAssessmentValidation = specialPostAssessmentValidation;

            return ShowSpecialPostAssessmentValidation;
        }


        public object LoadNYInsuranceValidationScreen(object assessmentStartCommand)
        {
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
            int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
            CacheManager.CacheManager cacheManager = new CacheManager.CacheManager();

            ICPCourseService.CourseConfiguration courseConfiguration = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);
            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsPreview"]);
            if (source == 1 || courseConfiguration.IsRequireProctorValidation == false || courseConfiguration.IsNYInsuranceValidation == false)
            {
                return assessmentStartCommand;
            }

            System.Web.HttpContext.Current.Session["CurrentCommandProctor"] = assessmentStartCommand;

            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
            int NYInsuranceValidationAttempt = 3;
            int.TryParse(ConfigurationManager.AppSettings["NYInsuranceValidationAttempt"].ToString(), out NYInsuranceValidationAttempt);

            ICP4.CommunicationLogic.CommunicationCommand.ShowSpecialPostAssessmentValidation.SpecialPostAssessmentValidation NYInsuranceValidation = new ICP4.CommunicationLogic.CommunicationCommand.ShowSpecialPostAssessmentValidation.SpecialPostAssessmentValidation();
            ICP4.CommunicationLogic.CommunicationCommand.ShowSpecialPostAssessmentValidation.ShowSpecialPostAssessmentValidation ShowNYInsuranceValidation = new ICP4.CommunicationLogic.CommunicationCommand.ShowSpecialPostAssessmentValidation.ShowSpecialPostAssessmentValidation();

            string templateNYInsuranceValidation = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NYInsuranceValidationTemplate, brandCode, variant);

            templateNYInsuranceValidation = templateNYInsuranceValidation.Replace("#HEADING", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NYInsuranceValidationHeading, brandCode, variant));
            templateNYInsuranceValidation = templateNYInsuranceValidation.Replace("#CONTENT", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NYInsuranceValidationContent, brandCode, variant));
            templateNYInsuranceValidation = templateNYInsuranceValidation.Replace("#PANELHEADING", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NYInsuranceValidationPanelHeading, brandCode, variant));
            templateNYInsuranceValidation = templateNYInsuranceValidation.Replace("#FIELDTEXT", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NYInsuranceValidationLabelField, brandCode, variant));
            NYInsuranceValidation.NYInsuranceRequiredValidationMessage = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NYInsuranceRequiredValidationMessage, brandCode, variant);
            NYInsuranceValidation.NYInsuranceRequiredValidationMessage = NYInsuranceValidation.NYInsuranceRequiredValidationMessage.Replace("#FIELDTEXT", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NYInsuranceValidationLabelField, brandCode, variant));

            string attemptMessage = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NYInsuranceValidationAttemptMessage, brandCode, variant);
            attemptMessage = attemptMessage.Replace("#ATTEMPTNUMBER", NYInsuranceValidationAttempt.ToString());
            templateNYInsuranceValidation = templateNYInsuranceValidation.Replace("#ATTEMPTMESSAGE", attemptMessage);
            templateNYInsuranceValidation = templateNYInsuranceValidation.Replace("#CONTINUEBUTTON", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NYInsuranceValidationLabelContinueButton, brandCode, variant));
            templateNYInsuranceValidation = templateNYInsuranceValidation.Replace("#CANCELBUTTON", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NYInsuranceValidationLabelCancelButton, brandCode, variant));
            templateNYInsuranceValidation = templateNYInsuranceValidation.Replace("#ERRORMESSAGE", "");

            
            NYInsuranceValidation.Template = templateNYInsuranceValidation;
            ShowNYInsuranceValidation.CommandName = CommandNames.ShowNYInsuranceValidation;
            ShowNYInsuranceValidation.SpecialPostAssessmentValidation = NYInsuranceValidation;

            return ShowNYInsuranceValidation;
        }

        #region Course Rating LCMS-11877
        // <summary>
        /// Loads CourseRating if it is true
        /// </summary>
        /// <param name="sequenceItem"></param>
        /// <returns></returns>
        /// 

        //LCMS-11877
        private object LoadCourseLevelRating(ICPCourseService.SequenceItem sequenceItem, bool isNormalDirection)
        {
            bool IsPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsPreview"]);
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            /*
            if (IsPreview)
            {
                if (isNormalDirection == true)
                    return NextBack(courseID, 1);
                else
                    return NextBack(courseID, -1);
            }
            */
            
            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
            int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["currentindex"]);
            
            int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);

            string headingText = string.Empty;
            string buttonText = string.Empty;
            string RatingHelpTextIntro = string.Empty;
            string RatingHelpTextDesc = string.Empty;
            string RatingSubmitSuccess = string.Empty;
            string RatingToolTip = string.Empty;
            string Image = string.Empty;
            string FiveStarBest = string.Empty;

            ICP4.CommunicationLogic.CommunicationCommand.ShowCourseLevelRating.CourseLevelRating courseLevelRating = new ICP4.CommunicationLogic.CommunicationCommand.ShowCourseLevelRating.CourseLevelRating();
            ICP4.CommunicationLogic.CommunicationCommand.ShowCourseLevelRating.ShowCourseLevelRating showCourseLevelRating = new ICP4.CommunicationLogic.CommunicationCommand.ShowCourseLevelRating.ShowCourseLevelRating();
            string HTML = "";
            string icpFileSystem = ConfigurationManager.AppSettings["ICPFileSystem"];


            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                HTML = courseService.GetSceneTemplateHTML(sequenceItem.SceneTemplateID).TemplateHTML;
            }
            // Call Service to find User rating for particular Course....

            ICP4.BusinessLogic.ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();
            trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
            trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
            //courseLevelRating.CurrentUserCourseRating = trackingService.GetUserCourseRating(courseID, enrollmentID);            
            ICP4.BusinessLogic.ICPTrackingService.CourseRating courseRating  = trackingService.GetUserCourseRatingNPS(courseID, enrollmentID);
            courseLevelRating.CurrentUserCourseRating = courseRating.Rating;

            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                StringBuilder sb = new StringBuilder(HTML);

                //headingText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.CourseLevelRatingHeading, brandCode, variant);
                //RatingHelpTextIntro = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.CourseLevelRatingIntro, brandCode, variant);
                //RatingHelpTextDesc = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.RatingHelpTextDesc, brandCode, variant);
                //buttonText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.submit, brandCode, variant);
                //RatingSubmitSuccess = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.RatingSubmitSuccess, brandCode, variant);
                RatingToolTip = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.RatingToolTip, brandCode, variant);
                Image = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.RateScreenIcon, brandCode, variant);
                //FiveStarBest = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.FiveStarBest, brandCode, variant);

                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                ICPCourseService.CourseConfiguration courseConfigurations = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);

                sb.Replace("$VisualImage", Image);
                sb.Replace("$RatingScreen1Heading", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.RatingScreen1Heading, brandCode, variant));
                sb.Replace("$RatingScreen1Text", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.RatingScreen1Text, brandCode, variant));
                sb.Replace("$RatingScreen1ZeroText", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.RatingScreen1ZeroText, brandCode, variant));
                sb.Replace("$RatingScreen1TenthText", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.RatingScreen1TenthText, brandCode, variant));
                sb.Replace("$RatingScreen1ReviewText", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.RatingScreen1ReviewText, brandCode, variant));
                sb.Replace("$RatingScreen1NextButtonText", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.RatingScreen1NextButtonText, brandCode, variant));
                sb.Replace("$RatingScreen2Text", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.RatingScreen2Text, brandCode, variant));
                sb.Replace("$RatingScreen2RateShoppingExpText", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.RatingScreen2RateShoppingExpText, brandCode, variant));
                sb.Replace("$RatingScreen2RateCourseText", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.RatingScreen2RateCourseText, brandCode, variant));
                sb.Replace("$RatingScreen2RateLOText", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.RatingScreen2RateLOText, brandCode, variant));
                sb.Replace("$RatingScreen2RateSupportExpText", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.RatingScreen2RateSupportExpText, brandCode, variant));
                //sb.Replace("$RatingScreen2SecondaryQuestions", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.RatingScreen2SecondaryQuestions, brandCode, variant));

                sb.Replace("$RatingScreen1BackButtonText", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.RatingScreen1BackButtonText, brandCode, variant));
                sb.Replace("$RatingScreen1SubmitButtonText", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.RatingScreen1SubmitButtonText, brandCode, variant));

                string[] SecondaryQuestions = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.RatingScreen2SecondaryQuestions, brandCode, variant).Split(new char[]{';'});

                for (int i = 0; i < SecondaryQuestions.Length; i++)
                {
                    sb.Replace("SecondaryQuestion_" + (i + 1) + "$", SecondaryQuestions[i]);
                }

                //sb.Replace("$headingCourseRating", headingText);
                //sb.Replace("$RatingHelpTextIntro", RatingHelpTextIntro);
                //sb.Replace("$RatingHelpTextDesc", RatingHelpTextDesc);
                //sb.Replace("$RatingSubmitSuccess", RatingSubmitSuccess);
                //sb.Replace("$FiveStarBest", FiveStarBest);
                
                //// Rating ToolTip
                string[] toolTipsText = RatingToolTip.Split('|');
                sb.Replace("$ReallyDidntLikeIt", toolTipsText[0]);
                sb.Replace("$DidntLikeIt", toolTipsText[1]);
                sb.Replace("$ItwasOk", toolTipsText[2]);
                sb.Replace("$LikedIt", toolTipsText[3]);
                sb.Replace("$LovedIt", toolTipsText[4]);
                ///// Rating ToolTip
                //sb.Replace("$submit", buttonText);

                HTML = sb.ToString();
            }
            courseLevelRating.TemplateHtml = HTML.Replace ("\n","");
            //courseLevelRating.TemplateHtml = courseLevelRating.TemplateHtml.Replace("\n", "");

            courseLevelRating.NPS_RATING = courseRating.NPS_RATING;
            courseLevelRating.USER_REVIEW_TEXT = courseRating.USER_REVIEW_TEXT;
            courseLevelRating.RATING_COURSE = courseRating.RATING_COURSE;
            courseLevelRating.RATING_SHOPPINGEXP = courseRating.RATING_SHOPPINGEXP;
            courseLevelRating.RATING_LEARNINGTECH = courseRating.RATING_LEARNINGTECH;
            courseLevelRating.RATING_CS = courseRating.RATING_CS;
            courseLevelRating.RATING_COURSE_SECONDARY = courseRating.RATING_COURSE_SECONDARY;
            courseLevelRating.RATING_SHOPPINGEXP_SECONDARY = courseRating.RATING_SHOPPINGEXP_SECONDARY;
            courseLevelRating.RATING_LEARNINGTECH_SECONDARY = courseRating.RATING_LEARNINGTECH_SECONDARY;
            courseLevelRating.RATING_CS_SECONDARY = courseRating.RATING_CS_SECONDARY;

            courseLevelRating.RATING_COURSE_SECONDARY_Q = courseRating.RATING_COURSE_SECONDARY_Q;
            courseLevelRating.RATING_SHOPPINGEXP_SECONDARY_Q = courseRating.RATING_SHOPPINGEXP_SECONDARY_Q;
            courseLevelRating.RATING_LEARNINGTECH_SECONDARY_Q = courseRating.RATING_LEARNINGTECH_SECONDARY_Q;
            courseLevelRating.RATING_CS_SECONDARY_Q = courseRating.RATING_CS_SECONDARY_Q;

            showCourseLevelRating.CourseLevelRating = courseLevelRating;
            showCourseLevelRating.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowCourseLevelRating;

            return showCourseLevelRating;
        }

        #endregion

        #region Embedded Acknowledgment Scene
        /// <summary>
        /// Loads the Embedded Acknowledgment Scene
        /// </summary>
        /// <param name="sequenceItem"></param>
        /// <returns></returns>
        private object LoadEmbeddedAcknowledgment(ICPCourseService.SequenceItem sequenceItem)
        {
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
            int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["currentindex"]);
            bool isDemoable = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]);
            string headingText = string.Empty;
            string buttonText = string.Empty;
            string helpText = string.Empty;
            string acknowledgmentText = string.Empty;
            ICP4.CommunicationLogic.CommunicationCommand.ShowEmbeddedAcknowledgment.EmbeddedAcknowledgment embeddedAcknowledgment = new ICP4.CommunicationLogic.CommunicationCommand.ShowEmbeddedAcknowledgment.EmbeddedAcknowledgment();
            ICP4.CommunicationLogic.CommunicationCommand.ShowEmbeddedAcknowledgment.ShowEmbeddedAcknowledgment showEmbeddedAcknowledgment = new ICP4.CommunicationLogic.CommunicationCommand.ShowEmbeddedAcknowledgment.ShowEmbeddedAcknowledgment();
            string HTML = "";            
            string icpFileSystem = ConfigurationManager.AppSettings["ICPFileSystem"];

            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                HTML = courseService.GetSceneTemplateHTML(sequenceItem.SceneTemplateID).TemplateHTML;                            
            }            
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                StringBuilder sb = new StringBuilder(HTML);
                headingText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AcknowledgmentHeading, brandCode, variant);                                
                helpText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AcknowledgmentHelpText, brandCode, variant);
                buttonText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AcknowledgmentIAgreeButton, brandCode, variant);
                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                ICPCourseService.CourseConfiguration courseConfigurations = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);
                acknowledgmentText = courseConfigurations.EmbeddedAcknowledgmentText;
                sb.Replace("$Heading", headingText);
                sb.Replace("$AcknowledgmentHelpText", helpText);                
                sb.Replace("$Text", acknowledgmentText);
                sb.Replace("$IAgreeButton", buttonText);
                HTML = sb.ToString();
            }
            embeddedAcknowledgment.TemplateHtml = HTML;
            embeddedAcknowledgment.TemplateHtml = embeddedAcknowledgment.TemplateHtml.Replace("\n", "");            
            showEmbeddedAcknowledgment.EmbeddedAcknowledgment = embeddedAcknowledgment;
            showEmbeddedAcknowledgment.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowEmbeddedAcknowledgment;

            return showEmbeddedAcknowledgment;
        }
        #endregion 

        #region Final Exam Locked Scene
        /// <summary>
        /// Loads the Final Exam Locked Scene
        /// </summary>
        /// <param name="sequenceItem"></param>
        /// <returns></returns>
        private object LoadFinalExamLocked(double totalTime, double userTime, double remainingTime, string timeUnit)
        {            
            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();            
            string headingText = string.Empty;
            string imageURL = string.Empty;
            string helpText = string.Empty;            
            ICP4.CommunicationLogic.CommunicationCommand.ShowFinalExamLocked.FinalExamLocked finalExamLocked = new ICP4.CommunicationLogic.CommunicationCommand.ShowFinalExamLocked.FinalExamLocked();
            ICP4.CommunicationLogic.CommunicationCommand.ShowFinalExamLocked.ShowFinalExamLocked showFinalExamLocked = new ICP4.CommunicationLogic.CommunicationCommand.ShowFinalExamLocked.ShowFinalExamLocked();                        
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                //Get time string
                string hours_str = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Hours, brandCode, variant);

                string mins_str = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Minutes, brandCode, variant);
                // 
                if (timeUnit.ToLower().Equals("minutes"))
                {
                    timeUnit = mins_str;
                }
                else if (timeUnit.ToLower().Equals("hours"))
                {
                    timeUnit = hours_str;
                }
                headingText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.FinalExamLockedHeading, brandCode, variant);
                helpText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.FinalExamLockedHelpText, brandCode, variant);
                imageURL = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.FinalExamLockedImage, brandCode, variant);
                StringBuilder sb = new StringBuilder(helpText);
                sb.Replace("$TotalTime", totalTime.ToString());
                sb.Replace("$TimeUnit", timeUnit.ToString());
                sb.Replace("$UserTime", userTime.ToString());
                sb.Replace("$RemainingTime", remainingTime.ToString());
                helpText = sb.ToString();
            }
            finalExamLocked.FinalExamLockedHeading = headingText;
            finalExamLocked.FinalExamLockedHelpText = helpText;
            finalExamLocked.FinalExamLockedImage = imageURL;
            showFinalExamLocked.FinalExamLocked = finalExamLocked;
            showFinalExamLocked.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowFinalExamLocked;
            return showFinalExamLocked;
        }
        #endregion 
        


                /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        /// 
        private object LoadCourseCertificate(ICPCourseService.SequenceItem sequenceItem, bool IsNormalDirection)
        {
            object returnCommand = new object();
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            int courseApproval = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseApprovalID"]);
            int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
            int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
            CacheManager.CacheManager cacheManager = new CacheManager.CacheManager();
            ICPCourseService.CourseConfiguration courseConfiguration = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);
            ICPCourseService.CourseApprovalCertificate courseApprovalCertificate = null; 

            int courseApprovalCertificateID = 0;
            bool courseApprovalCertificateEnabled = true;

            if (courseApproval > 0)
            {
                using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
                {
                    courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                    courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                    courseApprovalCertificate = courseService.GetCourseApprovalCertificate(courseApproval, enrollmentID);
                    if (courseApprovalCertificate != null)
                    {
                        courseApprovalCertificateID = courseApprovalCertificate.CertificateID;
                        /*
                         * The Download Certificate button must always be enabled.
                         * */
                        courseApprovalCertificateEnabled = true;
                        //courseApprovalCertificate.CertificateEnabled;
                    }
                }
            }

            //IF there is a certificate through course approval, it takes precedence and displays. 
            //Even if completion certificate is turned off in course configuration settings
            if (courseApprovalCertificateID > 0)
            {
                return LoadCourseCertificateCommand(sequenceItem, true, courseApprovalCertificateEnabled);
            }
            else 
            {
                //IF there is no certificate through course approval BUT there is one through the course configuration
                //settings (LCMS-LMS), then show that LMS course configuration settings take precedence.
                if (courseConfiguration.CertificateEnabled == true && courseConfiguration.CertificateAssetID > 0)
                {
                    return LoadCourseCertificateCommand(sequenceItem, false, courseApprovalCertificateEnabled);
                }
                //IF there is no certificate--neither through course approval nor through the course configuration 
                //settings(option is turned on but no certificate attached to course configuration)--
                //then show the default LMS certificate. 
                else if (courseConfiguration.CertificateEnabled == true && courseConfiguration.CertificateAssetID == 0)
                {
                    return LoadCourseCertificateCommand(sequenceItem, true, courseApprovalCertificateEnabled);
                }
                else
                {
                    //IF there is no certificate--neither through course approval nor through the course configuration settings 
                    //(option is turned off) then no certificate will be shown.                 
                    if (IsNormalDirection == true)
                        return NextBack(courseID, 1);
                    else
                        return NextBack(courseID, -1);
                }
            }            
        }
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        /// 
        private object LoadCourseCertificateCommand(ICPCourseService.SequenceItem sequenceItem, bool IsOverideCertificate, bool IsDowloadButtonEnabled)
        {
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            string learningSessionID = System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
            int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["currentindex"]);
            bool isDemoable = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]);
            string headingCertificate = string.Empty;
            string CertificateDownloadButtonText = string.Empty;
            string ImageCertificateDownloadButton = string.Empty;
            string ImageCourseCertificate=string.Empty;
            string CourseCertificateText = string.Empty;
            string CertificateURL = ConfigurationManager.AppSettings["CertificateURL"].ToString();   

            ICP4.CommunicationLogic.CommunicationCommand.ShowCourseCertificate.CourseCertificate courseCertificate = new ICP4.CommunicationLogic.CommunicationCommand.ShowCourseCertificate.CourseCertificate();
            ICP4.CommunicationLogic.CommunicationCommand.ShowCourseCertificate.ShowCourseCertificate showCourseCertificate = new ICP4.CommunicationLogic.CommunicationCommand.ShowCourseCertificate.ShowCourseCertificate();
            

            string HTML = "";
            string contentObjectName = "";
            string icpFileSystem = ConfigurationManager.AppSettings["ICPFileSystem"];
            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                HTML = courseService.GetSceneTemplateHTML(sequenceItem.SceneTemplateID).TemplateHTML;
               // contentObjectName = courseService.GetContentObjectName(sequenceItem.ParentID);
            }
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                StringBuilder sb = new StringBuilder(HTML);
                 headingCertificate= cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingCertificate, brandCode, variant);
                 CourseCertificateText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.CourseCertificateText, brandCode, variant);
                 ImageCourseCertificate = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageCourseCertificate, brandCode, variant);
                 ImageCertificateDownloadButton = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageCertificateDownloadButton, brandCode, variant);
                 CertificateDownloadButtonText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.CertificateDownloadButtonText, brandCode, variant);

                sb.Replace("$VisualImage", ImageCourseCertificate);
                sb.Replace("$Heading", headingCertificate);
                sb.Replace("$Text", CourseCertificateText);
                sb.Replace("$DownloadText", CertificateDownloadButtonText);
                //sb.Replace("$DownloadImage", ImageCertificateDownloadButton);

                
                HTML = sb.ToString();
            }

            courseCertificate.TemplateHtml = HTML;
            courseCertificate.TemplateHtml = courseCertificate.TemplateHtml.Replace("\n", "");
            if (IsOverideCertificate)
            {
                courseCertificate.CertificateURL = CertificateURL.Replace("{0}", learningSessionID);
            }
            else 
            {
                courseCertificate.CertificateURL = string.Empty;                
            }

            if (IsDowloadButtonEnabled)
            {
                courseCertificate.DownloadButtonEnabled = true;
            }
            else
            {
                courseCertificate.DownloadButtonEnabled = false;
            }         
            //showCourseCertificate.Abc = CertificateCourse;
            showCourseCertificate.Certificates = courseCertificate;
            
            
            showCourseCertificate.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowCourseCertificate;

            
            return showCourseCertificate;
            
        }

        public object GetEOCInstructions(bool isNormalDirection)
        {
            try
            {
                using (CourseManager courseManager = new CourseManager())
                {
                    ICP4.BusinessLogic.ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService();
                    ICP4.BusinessLogic.ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();
					courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                    courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                    trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                    trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                    int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
                    int learnerID = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerID"]);
                    int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
                    string courseGUID = courseService.GetCourseGUID(courseID);
                    string leanerSessionGUID = string.Empty;                    
                    leanerSessionGUID = Convert.ToString(System.Web.HttpContext.Current.Session["LearnerSessionID"]);

                    int source = trackingService.GetSource(leanerSessionGUID);
                    if (source == 1)
                    {
                        object commandObject = courseManager.GetEOCInstructions_VU(courseID, learnerID, courseGUID, enrollmentID);

                        if (((ICP4.CommunicationLogic.CommunicationCommand.EOCInstructions.ShowEOCInstructions)commandObject).EOCInstructions.CourseEOCInstructions == string.Empty)
                        {
                            if (isNormalDirection == true)
                                return NextBack(courseID, 1);
                            else
                                return NextBack(courseID, -1);
                        }

                        return commandObject;
                    }
                    else
                    {
                        bool isDocuSignSigned = true;
                        if (Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsPreview"]) == false)
                        {
                            isDocuSignSigned = trackingService.GetDocuSignStatusByEnrollmentId(enrollmentID);
                        }

                        if (isDocuSignSigned == false)
                        {
                            object commandObject = courseManager.GetEOCInstructions_LMS(courseID);
                            commandObject = LoadDocuSignProcess(commandObject);
                            return commandObject;
                        }
                        else
                        {
                            object commandObject = courseManager.GetEOCInstructions_LMS(courseID);                            
                            return commandObject;                        
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        private string GetUrlPath(string urlStr,string newPage)
        {
            int pos = urlStr.LastIndexOf('/');
            //urlStr.Remove(
            urlStr = urlStr.Substring(0, urlStr.LastIndexOf('/'));
            urlStr = urlStr.Replace("CoursePlayer.aspx", newPage);
            return urlStr;
        }

        #region Methods related to Load SequenceItem into command


        /// <summary>
        /// This method creates appropriate command according to policy, whenever the course pointer reaches to PreAssessment marker
        /// </summary>
        /// <param name="courseID">CourseId integer value</param>
        /// <returns>Any communication command object based on policy.</returns>
        private object StartOrContinuePreAssessment(int courseID, ICP4.BusinessLogic.ICPCourseService.SequenceItem sequenceItem, bool isNormalDirection, int ExamID)
        {
            #region Policy Allow Review After completion
            
                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {
                    int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                    int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                    ICPCourseService.CourseConfiguration courseConfigurations = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);
                    if (Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsCourseCompleted"]) == true &&
                        courseConfigurations.PlayerAllowUserToReviewCourseAfterCompletion == true)
                    {
                        if (isNormalDirection == true)
                           return NextBack(courseID, 1);
                        else
                            return NextBack(courseID, -1);
                    }

                }
            
            #endregion
            object returnCommand = new object();
            bool loaded = true;
            int lastAttemptNo = 0;
            bool isPass = false;
            bool actionTaken = false;
            long learnerStatisticsID = 0;
            string learnerSessionID = System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
            int lastRemedaitionCount = 0;
            string logOuttext = string.Empty;
            
            //This is a temporary fix for LCMS-2025 and must be replaced in future builds///
            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["isPreview"]);
            if (isPreview == true)
            {
                List<string> askedAssessments=(List<string>)System.Web.HttpContext.Current.Session["AskedAssessments"];
                if (askedAssessments != null)
                {
                    if (askedAssessments.Contains(SequenceItemTypeName.PreAssessment))
                        if (isNormalDirection)
                        {
                            return NextBack(courseID, 1);
                        }
                        else
                        {
                            return NextBack(courseID, -1);
                        }
                }
            }
            ///////////////////////////////////////////////////////////////////////////////            
            ICPCourseService.CourseConfiguration courseConfiguration = GetCourseConfiguration(Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]));
            ICPAssessmentService.CourseConfiguration assessmentCourseConfiguration = new ICPAssessmentService.CourseConfiguration();

            if (courseConfiguration.PreAssessmentConfiguration.MaximumNOAttempt == 0)
            {
                return NextBack(courseID, 1);
            }

            //Translation is required at this point because namespace of AssessmentServices are different from CourseServices
            assessmentCourseConfiguration = TranslateCourseServiceConfigrationToAssessmentServiceConfiguration(courseConfiguration);


            ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();
            trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
            trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

            ICPTrackingService.LearnerStatistics[] learnerStatistics = null;
            ICPTrackingService.LearnerStatistics[] learnerStatisticsPreview = null;
            if (isPreview == true)
            {
                learnerStatisticsPreview = (ICPTrackingService.LearnerStatistics[])System.Web.HttpContext.Current.Session["AssessmentEndStats"];
                if (learnerStatisticsPreview != null && learnerStatisticsPreview.Length > 0)
                {
                    lastAttemptNo = learnerStatisticsPreview[learnerStatisticsPreview.Length - 1].AssessmentAttemptNumber;
                }
                else
                {
                    lastAttemptNo = 0;
                }
            }
            else
            {
                learnerStatistics = trackingService.GetPreAssessmentResult(learnerSessionID);
                GetLastAssessmentResult(learnerStatistics, courseConfiguration.PreAssessmentConfiguration.MasteryScore, out isPass, out lastAttemptNo, out actionTaken, out learnerStatisticsID, out lastRemedaitionCount);
            }
            int remediationCount = CalculateAssessmentRemediationCount(lastRemedaitionCount, courseConfiguration.PreAssessmentConfiguration.MaximumNOAttempt, lastAttemptNo);
            System.Web.HttpContext.Current.Session["AssessmentRemediatonCount"] = remediationCount;
            //lastAttemptNo = lastAttemptNo + 1;
            HttpContext.Current.Session["LastAssessmentAttemptNo"] = lastAttemptNo + 1;
            if (lastAttemptNo>= courseConfiguration.PreAssessmentConfiguration.MaximumNOAttempt && courseConfiguration.PreAssessmentConfiguration.ScoreType.ToUpper().Equals(ScoreType.NoResults.ToUpper()))
            {
                if (isNormalDirection == true)
                    return NextBack(courseID, 1);
                else
                    return NextBack(courseID, -1);

            }


            //if (courseConfiguration.PreAssessmentConfiguration.MaximumNOAttempt > lastAttemptNo && !isPass) 
            if (  (courseConfiguration.PreAssessmentConfiguration.MaximumNOAttempt > lastAttemptNo && !isPass) || (!isPass && !courseConfiguration.PreAssessmentConfiguration.MaxAttemptHandlerEnabled) )
            {
                using (AssessmentManager.AssessmentManager assessmentManager = new ICP4.BusinessLogic.AssessmentManager.AssessmentManager())
                {
                    // LCMS-9213
                    //--------------------------------------------------------------
                    int totalQuestions = 0;
                    if (!isPreview && learnerStatistics != null && learnerStatistics.Length > 0)
                    {
                        int noAnswerCorrect = learnerStatistics[learnerStatistics.Length - 1].NumberAnswersCorrect;
                        int noAnswerIncorrect = learnerStatistics[learnerStatistics.Length - 1].NumberAnswersIncorrect;
                        totalQuestions = noAnswerCorrect + noAnswerIncorrect;
                    }
                    //--------------------------------------------------------------
                    int modifiedAttemptNumber = -1;
                    loaded = assessmentManager.LoadPreOrPostAssessmentIntoSession(courseID, learnerSessionID, assessmentCourseConfiguration, LearnerStatisticsType.PreAssessment, ExamID, totalQuestions,ref modifiedAttemptNumber);
                                        
                    if (courseConfiguration.PreAssessmentConfiguration.AllowPauseResumeAssessment)
                    {
                        using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                        {
                            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                            if (cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentLogOutTextPauseResume, brandCode, variant) != null)
                            {
                                logOuttext = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentLogOutTextPauseResume, brandCode, variant);
                            }

                        }
                    }
                    else
                    {
                        using (ICP4.BusinessLogic.CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                        {
                            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                            if (cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentLogOutText, brandCode, variant) != null)
                            {
                                logOuttext = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentLogOutText, brandCode, variant);
                            }
                        }
                    }
                }
                


                // LCMS-9740
                // ----------------------------------------------------------------------------------------
                if (System.Web.HttpContext.Current.Session["StatisticsType"] != null && System.Web.HttpContext.Current.Session["StatisticsType"].ToString().ToLower() == LearnerStatisticsType.PreAssessmentEnd.ToLower())
                {
                    System.Web.HttpContext.Current.Session["StatisticsType"] = "";
                }
                // ----------------------------------------------------------------------------------------


                if (loaded)
                {
                    //ICPCourseService.CourseConfiguration courseConfiguration = null;
                    //ICPCourseService.SequenceItem sequenceItem = null;
                    string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                    string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                    using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                    {
                        int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                        int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                        courseConfiguration = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);
                    }

                    ICPAssessmentService.AssessmentItem[] assessmentItems = null;
                    assessmentItems = (ICPAssessmentService.AssessmentItem[])System.Web.HttpContext.Current.Session["AssessmentItemList"];


                    if (courseConfiguration.PreAssessmentConfiguration.ProctoredAssessment)
                    {
                        ICP4.CommunicationLogic.CommunicationCommand.ShowProctorMessage.ShowProctorMessage showProctorMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowProctorMessage.ShowProctorMessage();
                        ICP4.CommunicationLogic.CommunicationCommand.ShowProctorMessage.ProctorMessage proctorMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowProctorMessage.ProctorMessage();

                        proctorMessage.IsRestrictiveAssessmentEngine = courseConfiguration.PreAssessmentConfiguration.RestrictiveMode;
                        proctorMessage.AllowSkipping = courseConfiguration.PreAssessmentConfiguration.AllowSkippingQuestion;
                        proctorMessage.LogOutText = logOuttext;

                        if (courseConfiguration.PreAssessmentConfiguration.EnforceMaximumTimeLimit > 0)
                        {
                            proctorMessage.AssessmentTimer = courseConfiguration.PreAssessmentConfiguration.EnforceMaximumTimeLimit * 60;
                        }
                        else
                        {
                            proctorMessage.AssessmentTimer = -1;
                        }
                        if (courseConfiguration.PreAssessmentConfiguration.ScoreAsYouGo)
                        {
                            proctorMessage.ShowGradeAssessment = false;
                        }
                        else
                        {
                            proctorMessage.ShowGradeAssessment = true;
                        }

                        if (courseConfiguration.PreAssessmentConfiguration.AllowPauseResumeAssessment && System.Web.HttpContext.Current.Session["SelectedQuestionSequenceNo"] != null && Convert.ToInt32(System.Web.HttpContext.Current.Session["SelectedQuestionSequenceNo"]) > 0)
                        {

                            int lastAssessmentTimeInSeconds = trackingService.GetAssessmentTimeForAllSessions(learnerSessionID, LearnerStatisticsType.PreAssessment, 0, ExamID,"",-1);
                            proctorMessage.InitialAssessmentTimerValue = proctorMessage.AssessmentTimer;
                            if (lastAssessmentTimeInSeconds == -1)
                            {
                                proctorMessage.IsConfigurationModified = true;
                                proctorMessage.AssessmentTimer = proctorMessage.InitialAssessmentTimerValue; // -1;
                            }
                            else if (Convert.ToInt32(System.Web.HttpContext.Current.Session["SelectedQuestionSequenceNo"]) > 0)
                            {

                                proctorMessage.IsAssessmentResumeMessage = true;
                                proctorMessage.AssessmentTimer -= lastAssessmentTimeInSeconds;

                                if (proctorMessage.AssessmentTimer <= 0)
                                {
                                    proctorMessage.IsAssessmentResumeMessage = false;
                                    proctorMessage.AssessmentTimer = proctorMessage.InitialAssessmentTimerValue;
                                }
                            }
                        }

                        using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                        {
                            proctorMessage.ProctorMessageHeading = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingPreProctorMessage, brandCode, variant);
                            proctorMessage.ProctorMessageImageUrl = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageProctorMessage, brandCode, variant);
                            proctorMessage.ProctorMessageButtonText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingProctorMessageOkButton, brandCode, variant);


                            //----- start LCMS-4498 ----------
                            //proctorMessage.ProctorMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentProctorMessage, brandCode, variant);
                            if (isPreview == true)
                            {
                                //ICPTrackingService.LearnerStatistics[] learnerStatisticsPreview = null;
                                learnerStatisticsPreview = (ICPTrackingService.LearnerStatistics[])System.Web.HttpContext.Current.Session["AssessmentEndStats"];
                                if (learnerStatisticsPreview != null && learnerStatisticsPreview.Length > 0)
                                {
                                    lastAttemptNo = learnerStatisticsPreview[learnerStatisticsPreview.Length - 1].AssessmentAttemptNumber;
                                }
                                else
                                {
                                    lastAttemptNo = 0;
                                }
                            }

                            string ProctorMessageText = string.Empty;
                            ProctorMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentProctorMessage, brandCode, variant);

                            if (courseConfiguration.PreAssessmentConfiguration.MaxAttemptHandlerEnabled == false)
                            {
                                ProctorMessageText = ProctorMessageText.Replace("$PROCTORMESSAGENUMBEROFATTEMPTS", "");
                                //ProctorMessageText = ProctorMessageText.Replace("{1}", "unlimited");
                                //ProctorMessageText = ProctorMessageText.Replace(BrandManager.ResourceKeyNames.AssessmentAttemptTextToRemove,".");

                            }
                            else
                            {
                                ProctorMessageText = ProctorMessageText.Replace("$PROCTORMESSAGENUMBEROFATTEMPTS", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentProctorMessageNumberOfAttempts, brandCode, variant));
                                ProctorMessageText = AssessmentMaxAttemptText(ProctorMessageText, courseConfiguration.PreAssessmentConfiguration.MaximumNOAttempt);
                                ProctorMessageText = ProctorMessageText.Replace("{1}", NumberToWordConvertor.NumberToText(courseConfiguration.PreAssessmentConfiguration.MaximumNOAttempt, false, cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words0, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words1, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words2, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words3, brandCode, variant)).ToLower());
                            }

                            ProctorMessageText = ProctorMessageText.Replace("{0}", NumberToWordConvertor.NumberToText(lastAttemptNo + 1, true, cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words0, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words1, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words2, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words3, brandCode, variant)).ToLower());

                            if (courseConfiguration.PreAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt.Equals(_360Training.BusinessEntities.AfterMaxFailAction.GoToNextLesson))
                            {
                                ProctorMessageText = ProctorMessageText.Replace("{2}", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentActionGoToNextLesson, brandCode, variant));
                            }
                            else
                            {
                                ProctorMessageText = ProctorMessageText.Replace("{2}", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentActionLockCourse, brandCode, variant));
                            }

                            if (proctorMessage.IsConfigurationModified)
                            {
                                // configuration re-published
                                ProctorMessageText = ProctorMessageText.Replace("$GOODLUCKTEXT", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentMustStartOverText, brandCode, variant));
                            }
                            else if (proctorMessage.IsAssessmentResumeMessage)
                            {
                                // resume case                                
                                ProctorMessageText = ProctorMessageText.Replace("$GOODLUCKTEXT", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentResumeText, brandCode, variant));
                            }
                            else
                            {
                                ProctorMessageText = ProctorMessageText.Replace("$GOODLUCKTEXT", "");
                            }

                            string allowPauseText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentProctorMessageAllowPauseResume, brandCode, variant);
                            if (courseConfiguration.PreAssessmentConfiguration.AllowPauseResumeAssessment)
                            {
                                allowPauseText = "";
                            }
                            ProctorMessageText = ProctorMessageText.Replace("$ALLOWPAUSERESUME", allowPauseText);

                            if (!proctorMessage.IsAssessmentResumeMessage && !proctorMessage.IsConfigurationModified)
                            {
                                ProctorMessageText = ProctorMessageText.Replace("$BeginAssessment", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentProctorMessageBeginAssessment, brandCode, variant));
                               // ProctorMessageText = ProctorMessageText.Replace("$StartAssessment", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentProctorMessageStartAssessment, brandCode, variant));
                            }
                            else
                            {
                                ProctorMessageText = ProctorMessageText.Replace("$BeginAssessment", string.Empty);
                               // ProctorMessageText = ProctorMessageText.Replace("$StartAssessment", string.Empty);
                            }

                            ///LCMS-10542 Begin-- Fahad Mukhtar
                            String assessmentMastery = GetMasteryText(BrandManager.ResourceKeyNames.PreAssessmentMasteryScoreAndNumberOfQuestionsText, brandCode, variant, cacheManager, SequenceItemType.PreAssessment);
                            ProctorMessageText = ProctorMessageText.Replace("$MASTERYSCORETEXT", assessmentMastery);
                            ///LCMS-10542 End-- Fahad Mukhtar
                            
                            proctorMessage.ProctorMessageText = ProctorMessageText;
                            proctorMessage.LockoutClickAwayToActiveWindow = courseConfiguration.PreAssessmentConfiguration.Enabled && courseConfiguration.PreAssessmentConfiguration.LockoutFuntionalityClickAwayToActiveWindowEnable;
                            //--------------- end --------------
                        }

                        showProctorMessage.ProctorMessage = proctorMessage;
                        showProctorMessage.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowProctorMessage;
                        return showProctorMessage;

                    }
                    else
                    {

                        //ICP4.CommunicationLogic.CommunicationCommand.ShowStartAssessment.ShowStartAssessment showStartAssessment = new ICP4.CommunicationLogic.CommunicationCommand.ShowStartAssessment.ShowStartAssessment();
                        //ICP4.CommunicationLogic.CommunicationCommand.ShowStartAssessment.StartAssessmentMessage startAssessmentMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowStartAssessment.StartAssessmentMessage();


                        //startAssessmentMessage.AllowSkipping = courseConfiguration.PreAssessmentAllowSkippingQuestion;
                        //if (courseConfiguration.PreAssessmentEnforceMaximumTimeLimit > 0)
                        //{
                        //    startAssessmentMessage.AssessmentTimer = courseConfiguration.PreAssessmentEnforceMaximumTimeLimit * 60;
                        //}
                        //else
                        //{
                        //    startAssessmentMessage.AssessmentTimer = -1;
                        //}
                        //using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                        //{
                        //    startAssessmentMessage.StartupHeading = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingStartAssessment, brandCode, variant);
                        //    startAssessmentMessage.StartupMessage = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentStartAssessment, brandCode, variant);
                        //    startAssessmentMessage.StartupImageUrl = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageStartAssessment, brandCode, variant);
                        //    startAssessmentMessage.ButtonText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingStartAssessmentButton, brandCode, variant);
                        //}
                        //showStartAssessment.StartAssessmentMessage = startAssessmentMessage;
                        //showStartAssessment.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowStartAssessment;
                        //return showStartAssessment;
                        ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide showSlide = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide();
                        ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset slideMediaAsset = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset();


                        //slideMediaAsset.IsJSPlayerEnabled = System.Configuration.ConfigurationManager.AppSettings["isJSPlayerEnabled"];
                         slideMediaAsset.IsJSPlayerEnabled = CheckForJSEnabledForCourse(Convert.ToString(courseID)); 

                        slideMediaAsset.MediaAssetID = sequenceItem.Item_GUID;
                        slideMediaAsset.MediaAssetType = SequenceItemTypeName.ContentAsset;
                        slideMediaAsset.MediaAssetSceneID = sequenceItem.SceneGUID;
                        slideMediaAsset.ContentObjectID = sequenceItem.ParentID;
                        slideMediaAsset.RemidiationMode = false;
                        slideMediaAsset.FlashSceneNo = "";
                        slideMediaAsset.FlashURL = "";
                        slideMediaAsset.IsMovieEnded = false;
                        slideMediaAsset.LastScene = "";
                        slideMediaAsset.NextButtonState = true;
                        slideMediaAsset.SceneDurationTimer = 0;
                        slideMediaAsset.ShowBookMark = false;
                        slideMediaAsset.IsAssessmentStartMessage = true;
                        
                        if (sequenceItem.SequenceItemType == SequenceItemType.Exam)
                        {
                            slideMediaAsset.ExamID = sequenceItem.ExamID;
                        }

                        slideMediaAsset.AllowSkipping = courseConfiguration.PreAssessmentConfiguration.AllowSkippingQuestion;
                        slideMediaAsset.ShowGradeAssessment = !courseConfiguration.PreAssessmentConfiguration.ScoreAsYouGo;
                        slideMediaAsset.IsRestrictiveAssessmentEngine = courseConfiguration.PreAssessmentConfiguration.RestrictiveMode;
                        slideMediaAsset.LockoutClickAwayToActiveWindow = courseConfiguration.PreAssessmentConfiguration.Enabled && courseConfiguration.PreAssessmentConfiguration.LockoutFuntionalityClickAwayToActiveWindowEnable;
                        slideMediaAsset.LogOutText = logOuttext;

                        #region Course Progress Bar
                        int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["currentindex"]);
                        string courseName = Convert.ToString(HttpContext.Current.Session["CourseName"]);
                        double percentageCourseProgress = 0;
                        {
                            try
                            {
                                int visitedSceneCount;
                                int totalSceneCount;
                                percentageCourseProgress = CalculateCourseProgressPercentageFromSequence(courseID, seqNo, Convert.ToInt32(System.Web.HttpContext.Current.Session["TotalNoOfViewableScenes"]), out visitedSceneCount, out totalSceneCount);

                                if (percentageCourseProgress > 0)
                                {
                                    slideMediaAsset.CourseProgressPercentage = Convert.ToInt32(Math.Round(percentageCourseProgress));
                                    slideMediaAsset.CourseProgressToolTip = GetToolTipForProgressBar(courseID, courseName, seqNo, totalSceneCount, visitedSceneCount);
                                }
                            }
                            catch (Exception exception)
                            {
                                ExceptionPolicyForLCMS.HandleException(exception, "ICPException");
                                slideMediaAsset.CourseProgressPercentage = 0;
                                slideMediaAsset.CourseProgressToolTip = string.Empty;
                            }
                        }
                        #endregion

                        if (courseConfiguration.PreAssessmentConfiguration.EnforceMaximumTimeLimit > 0)
                        {
                            slideMediaAsset.AssessmentTimer = courseConfiguration.PreAssessmentConfiguration.EnforceMaximumTimeLimit * 60;

                            // LCMS-9213
                            // ------------------------------------------------------------------------------
                            if (courseConfiguration.PreAssessmentConfiguration.AllowPauseResumeAssessment && System.Web.HttpContext.Current.Session["SelectedQuestionSequenceNo"]!=null && Convert.ToInt32(System.Web.HttpContext.Current.Session["SelectedQuestionSequenceNo"]) > 0)
                            {

                                int lastAssessmentTimeInSeconds = trackingService.GetAssessmentTimeForAllSessions(learnerSessionID, LearnerStatisticsType.PreAssessment, 0, ExamID,"",-1);
                                slideMediaAsset.InitialAssessmentTimerValue = slideMediaAsset.AssessmentTimer;
                                if (lastAssessmentTimeInSeconds == -1)
                                {
                                    slideMediaAsset.IsConfigurationModified = true;
                                    slideMediaAsset.AssessmentTimer = slideMediaAsset.InitialAssessmentTimerValue; // -1;
                                }
                                else if (Convert.ToInt32(System.Web.HttpContext.Current.Session["SelectedQuestionSequenceNo"]) > 0)
                                {

                                    slideMediaAsset.IsAssessmentResumeMessage = true;
                                    slideMediaAsset.AssessmentTimer -= lastAssessmentTimeInSeconds;

                                    if (slideMediaAsset.AssessmentTimer <= 0)
                                    {
                                        slideMediaAsset.IsAssessmentResumeMessage = false;
                                        slideMediaAsset.AssessmentTimer = slideMediaAsset.InitialAssessmentTimerValue;
                                    }
                                }
                            }
                            // ------------------------------------------------------------------------------


                        }
                        else
                        {
                            slideMediaAsset.AssessmentTimer = -1;
                        }

                        string HTML = "";
                        string icpFileSystem = ConfigurationManager.AppSettings["ICPFileSystem"];
                        using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
                        {
                            courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                            courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                            HTML = courseService.GetSceneTemplateHTML(sequenceItem.SceneTemplateID).TemplateHTML;
                        }

                        using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                        {
                            StringBuilder sb = new StringBuilder(HTML);
                            string PreAssessmentText = "";
                            sb.Replace("$Heading", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PreAssessmentHeading, brandCode, variant));
                            sb.Replace("$VisualTop", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PreAssessmentImage, brandCode, variant));
                            // Changes made by Waqas Zakai
                            // LCMS-4157
                            // START
                            if (isPreview == true)
                            {
                                //ICPTrackingService.LearnerStatistics[] learnerStatisticsPreview = null;
                                //learnerStatisticsPreview = (ICPTrackingService.LearnerStatistics[])System.Web.HttpContext.Current.Session["AssessmentEndStats"];
                                //if (learnerStatisticsPreview != null && learnerStatisticsPreview.Length > 0)
                                //{
                                //    lastAttemptNo = learnerStatisticsPreview[learnerStatisticsPreview.Length - 1].AssessmentAttemptNumber;
                                //}
                                //else
                                //{
                                //    lastAttemptNo = 0;
                                //}                                
                            }
                            
                            PreAssessmentText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PreAssessmentText, brandCode, variant);
                            String PreAssessmentMasteryScoreText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PreAssessmentMasteryScoreAndNumberOfQuestionsText, brandCode, variant);
                            String PreAssessmentMaxAttemptHandlerText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PreAssessmentMaximumAttemptHandlerText, brandCode, variant);

                            if (courseConfiguration.PreAssessmentConfiguration.MaxAttemptHandlerEnabled == false)
                            {
                                /* LCMS-8916 - Start */
                                /*
                                PreAssessmentText = PreAssessmentText.Replace("<p class=\"sceneTextArea\"> This is your $ATTEMPTNUMBER attempt. This exam allows a maximum of $ATTEMPTEDNUMBER attempts after which $ACTIONMESSAGE</p>", "");
                                */
                                PreAssessmentText = PreAssessmentText.Replace("$MAXATTEMPTHANDLERTEXT", "");
                                /* LCMS-8916 - End */
                                //PreAssessmentText = PreAssessmentText.Replace("$ATTEMPTEDNUMBER", "unlimited");
                                //PreAssessmentText = PreAssessmentText.Replace(cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentAttemptTextToRemove, brandCode, variant), ".");
                            }
                            else
                            {
                                PreAssessmentMaxAttemptHandlerText = AssessmentMaxAttemptText(PreAssessmentMaxAttemptHandlerText, courseConfiguration.PreAssessmentConfiguration.MaximumNOAttempt);
                                PreAssessmentMaxAttemptHandlerText = PreAssessmentMaxAttemptHandlerText.Replace("$ATTEMPTEDNUMBER", NumberToWordConvertor.NumberToText(courseConfiguration.PreAssessmentConfiguration.MaximumNOAttempt, false, cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words0, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words1, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words2, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words3, brandCode, variant)).ToLower());
                                PreAssessmentMaxAttemptHandlerText = PreAssessmentMaxAttemptHandlerText.Replace("$ATTEMPTNUMBER", NumberToWordConvertor.NumberToText(lastAttemptNo + 1, true, cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words0, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words1, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words2, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words3, brandCode, variant)).ToLower());
                                if (courseConfiguration.PreAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt.Equals(AfterMaxFailAction.GoToNextLesson))
                                {
                                    PreAssessmentMaxAttemptHandlerText = PreAssessmentMaxAttemptHandlerText.Replace("$ACTIONMESSAGE", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PreAssessmentGoToNextLesson, brandCode, variant));
                                }
                                else
                                {
                                    PreAssessmentMaxAttemptHandlerText = PreAssessmentMaxAttemptHandlerText.Replace("$ACTIONMESSAGE", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PreAssessmentLockCourse, brandCode, variant));
                                }
                                PreAssessmentText = PreAssessmentText.Replace("$MAXATTEMPTHANDLERTEXT", PreAssessmentMaxAttemptHandlerText);
                            }

                            if (PreAssessmentMasteryScoreText == null || PreAssessmentMasteryScoreText.Trim().Length == 0)
                            {
                                PreAssessmentText = PreAssessmentText.Replace("$MASTERYSCORETEXT", "");
                            }
                            else
                            {
                                PreAssessmentMasteryScoreText = PreAssessmentMasteryScoreText.Replace("$PassingRate", courseConfiguration.PreAssessmentConfiguration.MasteryScore.ToString());
                                PreAssessmentMasteryScoreText = PreAssessmentMasteryScoreText.Replace("$TOTALASSESSMENTS", assessmentItems.Length.ToString());
                                PreAssessmentText = PreAssessmentText.Replace("$MASTERYSCORETEXT", PreAssessmentMasteryScoreText);                                
                            }


                            // LCMS-9213
                            //---------------------------------------------------------

                            if (slideMediaAsset.IsConfigurationModified)  //if ((courseConfiguration.PreAssessmentConfiguration.EnforceMaximumTimeLimit > 0) && (slideMediaAsset.AssessmentTimer == -1))
                            {
                                // configuration re-published
                                PreAssessmentText = PreAssessmentText.Replace("$GOODLUCKTEXT", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentMustStartOverText, brandCode, variant));
                               // HttpContext.Current.Session.Remove("askedAssessmentItemGUIDs");
                            }
                            else if (slideMediaAsset.IsAssessmentResumeMessage) // else if (!isPreview && System.Web.HttpContext.Current.Session["SelectedQuestionSequenceNo"]!=null && Convert.ToInt32(System.Web.HttpContext.Current.Session["SelectedQuestionSequenceNo"])>0 && courseConfiguration.PreAssessmentConfiguration.AllowPauseResumeAssessment)
                            {
                                // resume case                                
                                PreAssessmentText = PreAssessmentText.Replace("$GOODLUCKTEXT", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentResumeText, brandCode, variant));                                
                                //HttpContext.Current.Session.Remove("askedAssessmentItemGUIDs");
                            }
                            else
                            {
                                PreAssessmentText = PreAssessmentText.Replace("$GOODLUCKTEXT", "");
                            }



                            string allowPauseText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AllowPauseResumeAssessment, brandCode, variant);
                            if (courseConfiguration.PreAssessmentConfiguration.AllowPauseResumeAssessment)
                            {
                                allowPauseText = "";
                            }
                            PreAssessmentText = PreAssessmentText.Replace("$ALLOWPAUSERESUME", allowPauseText);
                            //---------------------------------------------------------



                            sb.Replace("$Text", PreAssessmentText);
                            // Changes END
                            //sb.Replace("$PassingRate", courseConfiguration.PreAssessmentConfiguration.MasteryScore.ToString());
                            //sb.Replace("$TOTALASSESSMENTS", assessmentItems.Length.ToString());
                            HTML = sb.ToString();
                        }

                        slideMediaAsset.TemplateHtml = HTML;
                        slideMediaAsset.TemplateHtml = slideMediaAsset.TemplateHtml.Replace("\n", "");

                        showSlide.MediaAsset = slideMediaAsset;
                        showSlide.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowSlide;
                        return showSlide;
                    }
                }
                else
                {
                    if (isNormalDirection)
                        return NextBack(courseID, 1);
                    return NextBack(courseID, -1);
                }
            }
            else if (isPass || actionTaken == true)//for pass and when action is already taken
            {
                 if(isNormalDirection)
                    return NextBack(courseID, 1);
                return NextBack(courseID, -1);
            }
            else
            {
                switch (courseConfiguration.PreAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt)
                {
                    case AfterMaxFailAction.GoToNextLesson:
                        {
                            returnCommand = NextBack(courseID, 1);
                            actionTaken = true;
                            break;
                        }
                    case AfterMaxFailAction.RetakeLesson:
                        {
                            //as there cannot be a retake in case of pre and post assessments
                            returnCommand = NextBack(courseID, 1);
                            actionTaken = true;
                            break;
                        }
                    case AfterMaxFailAction.LockCourse:
                        {
                            int learnerID = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerID"]);
                            int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
                            LockCourse(courseID, learnerID, enrollmentID, LockingReason.MaxAttemptReachPreAssessment);
                            returnCommand = CreateCourseLockedCommandObject(courseID, LockingReason.MaxAttemptReachPreAssessment);
                            actionTaken = true;
                            break;
                        }
                }
                //UpdateActionAfterFailingMaxAttempt(actionTaken, learnerStatisticsID);
            }
            return returnCommand;

        }


        /// <summary>
        /// This method creates appropriate command according to policy, whenever the course pointer reaches to Quiz marker
        /// </summary>
        /// <param name="courseID">CourseId integer value</param>
        /// <param name="contentObjectID">ContentObjectID integer value, represent the ContentObjectId whose quiz is to be run</param>
        /// <returns>Any communication command object based on policy.</returns>
        private object StartOrContinueQuiz(int courseID, int contentObjectID, ICP4.BusinessLogic.ICPCourseService.SequenceItem sequenceItem, bool isNormalDirection, int ExamID)
        {
            string learnerSessionID = System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
            #region Allow Review course After completion

            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {

                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                ICPCourseService.CourseConfiguration courseConfigurations = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);
                if (Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsCourseCompleted"]) == true &&
                    courseConfigurations.PlayerAllowUserToReviewCourseAfterCompletion == true)
                {
                    if (isNormalDirection == true)
                    {
                        Logger.Write("NextBack(courseID, 1) FIRST LearningSessionID=" + learnerSessionID, "PlayerCourseCache", 2, 2000, System.Diagnostics.TraceEventType.Information, "Important");
                        return NextBack(courseID, 1);
                    }
                    else
                    {
                        Logger.Write("NextBack(courseID, -1) FIRST LearningSessionID=" + learnerSessionID, "PlayerCourseCache", 2, 2000, System.Diagnostics.TraceEventType.Information, "Important");
                        return NextBack(courseID, -1);
                    }
                }

            }

            #endregion
            bool loaded = true;           
            int lastAttemptNo = 0;
            bool isPass = false;
            object returnCommand = new object();
            bool actionTaken = false;
            long learnerStatisticsID = 0;
            int lastRemediationCount = 0;
            int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["CurrentIndex"]);
            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["isPreview"]);
            bool shouldRetakeContent = false;
            string logOuttext = string.Empty;
          
            ICPCourseService.CourseConfiguration courseConfiguration = GetCourseConfiguration(Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]));
            ICPAssessmentService.CourseConfiguration assessmentCourseConfiguration = new ICPAssessmentService.CourseConfiguration();

            //Abdus Samad LCMS-13475
            //Start
            ICPCourseService.AssessmentConfiguration QuizAssessmentConfiguration = new ICPCourseService.AssessmentConfiguration();
                       
            QuizAssessmentConfiguration = GetAssessentConfigurationForQuiz(contentObjectID);

            if (QuizAssessmentConfiguration != null)
            {
                courseConfiguration = TranslateAssessmentConfigurationToCourseConfiguration(courseConfiguration, QuizAssessmentConfiguration);
            }
            //Stop

            if (courseConfiguration.QuizConfiguration.MaximumNOAttempt == 0)
            {
                Logger.Write("NextBack(courseID, 1) SECOND LearningSessionID=" + learnerSessionID, "PlayerCourseCache", 2, 2000, System.Diagnostics.TraceEventType.Information, "Important");
                return NextBack(courseID, 1);
            }

            //Translation is required at this point because namespace of AssessmentServices are different from CourseServices
            assessmentCourseConfiguration = TranslateCourseServiceConfigrationToAssessmentServiceConfiguration(courseConfiguration);

            ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();
            trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
            trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

            ICPTrackingService.LearnerStatistics[] learnerStatistics = null;
            ICPCourseService.SequenceItem sequenceItemForTracking = GetSequenceItem(courseID, seqNo);
            ICPTrackingService.LearnerStatistics[] learnerStatisticsPreview = null;
            if (isPreview)
            {
                learnerStatisticsPreview = (ICPTrackingService.LearnerStatistics[])System.Web.HttpContext.Current.Session["AssessmentEndStats"];
                if (learnerStatisticsPreview != null && learnerStatisticsPreview.Length > 0)
                {
                    lastAttemptNo = learnerStatisticsPreview[learnerStatisticsPreview.Length - 1].AssessmentAttemptNumber;
                }
                else
                {
                    lastAttemptNo = 0;
                }
            }
            else
            {
                learnerStatistics = trackingService.GetQuizResult(learnerSessionID, sequenceItemForTracking.Item_GUID);
                GetLastAssessmentResult(learnerStatistics, courseConfiguration.QuizConfiguration.MasteryScore, out isPass, out lastAttemptNo, out actionTaken, out learnerStatisticsID, out lastRemediationCount);
            }
            if (lastAttemptNo >= courseConfiguration.QuizConfiguration.MaximumNOAttempt && courseConfiguration.QuizConfiguration.ScoreType.ToUpper().Equals(ScoreType.NoResults.ToUpper()))
            {
                if (isNormalDirection == true)
                {
                    Logger.Write("NextBack(courseID, 1) THIRD LearningSessionID=" + learnerSessionID, "PlayerCourseCache", 2, 2000, System.Diagnostics.TraceEventType.Information, "Important");
                    return NextBack(courseID, 1);
                }
                else
                {
                    Logger.Write("NextBack(courseID, -1) THIRD LearningSessionID=" + learnerSessionID, "PlayerCourseCache", 2, 2000, System.Diagnostics.TraceEventType.Information, "Important");
                    return NextBack(courseID, -1);
                }

            }


            // LCMS-7681
            // ------------------------------------------
            if (isPass && actionTaken)
            {
                isPass = false;
                actionTaken = false;
            }
            // ------------------------------------------

            int remediationCount = CalculateAssessmentRemediationCount(lastRemediationCount, courseConfiguration.QuizConfiguration.MaximumNOAttempt, lastAttemptNo);
            System.Web.HttpContext.Current.Session["AssessmentRemediatonCount"] = remediationCount;
            // Added by Mustafa for LCMS-2694
            //---------------------------------------
            if (courseConfiguration.QuizConfiguration.ActionToTakeAfterFailingMaxAttempt == AfterMaxFailAction.RetakeLesson)
            {
                if (courseConfiguration.QuizConfiguration.MaximumNOAttempt == lastAttemptNo && !isPass)
                {
                    lastAttemptNo = 0;
                    if (System.Web.HttpContext.Current.Session["StatisticsType"] != null && System.Web.HttpContext.Current.Session["StatisticsType"].ToString().ToLower().Equals(LearnerStatisticsType.QuizEnd.ToLower()))
                    {
                        shouldRetakeContent = true;
                        System.Web.HttpContext.Current.Session["StatisticsType"] = string.Empty;
                    }
                }
                else if (courseConfiguration.QuizConfiguration.MaximumNOAttempt < lastAttemptNo && !isPass)
                {
                    lastAttemptNo = lastAttemptNo % courseConfiguration.QuizConfiguration.MaximumNOAttempt;
                }
            }
            //---------------------------------------
            if (courseConfiguration.QuizConfiguration.MaximumNOAttempt == lastAttemptNo && !isPass && courseConfiguration.QuizConfiguration.ActionToTakeAfterFailingMaxAttempt == AfterMaxFailAction.GoToNextLesson)
            {
                actionTaken = true;
            }
            HttpContext.Current.Session["LastAssessmentAttemptNo"] = lastAttemptNo + 1;


            //This is a temporary fix for LCMS-2025 and must be replaced in future builds///

            if (isPreview == true)
            {
                List<string> askedAssessments = (List<string>)System.Web.HttpContext.Current.Session["AskedAssessments"];
                if (askedAssessments != null)
                {

                    // Condition replaced for LCMS-2869
                    // 
                    //
                    //if ((((askedAssessments.Contains(sequenceItemForTracking.Item_GUID)) && (askedAssessments.Contains("PostAssessment")))) || (((askedAssessments.Contains(sequenceItemForTracking.Item_GUID)) && (!courseConfiguration.QuizRefreshMaxAttemptOnRetake))))
                    if (askedAssessments.Contains(sequenceItemForTracking.Item_GUID))
                        if (isNormalDirection)
                        {
                            Logger.Write("NextBack(courseID, 1) FOURTH LearningSessionID=" + learnerSessionID, "PlayerCourseCache", 2, 2000, System.Diagnostics.TraceEventType.Information, "Important");
                            return NextBack(courseID, 1);
                        }
                        else
                        {
                            Logger.Write("NextBack(courseID, -1) FOURTH LearningSessionID=" + learnerSessionID, "PlayerCourseCache", 2, 2000, System.Diagnostics.TraceEventType.Information, "Important");
                            return NextBack(courseID, -1);
                        }
                }
            }
            ///////////////////////////////////////////////////////////////////////////////



            //if (courseConfiguration.QuizConfiguration.MaximumNOAttempt > lastAttemptNo && !isPass)
            if ((courseConfiguration.QuizConfiguration.MaximumNOAttempt > lastAttemptNo && !isPass && !shouldRetakeContent) || (!isPass && !courseConfiguration.QuizConfiguration.MaxAttemptHandlerEnabled))
            {
                using (AssessmentManager.AssessmentManager assessmentManager = new ICP4.BusinessLogic.AssessmentManager.AssessmentManager())
                {

                    // LCMS-9213
                    //--------------------------------------------------------------
                    int totalQuestions = 0;
                    if (!isPreview && learnerStatistics != null && learnerStatistics.Length > 0)
                    {
                        int noAnswerCorrect = learnerStatistics[learnerStatistics.Length - 1].NumberAnswersCorrect;
                        int noAnswerIncorrect = learnerStatistics[learnerStatistics.Length - 1].NumberAnswersIncorrect;
                        totalQuestions = noAnswerCorrect + noAnswerIncorrect;
                    }
                    //--------------------------------------------------------------

                    loaded = assessmentManager.LoadQuizIntoSession(courseID, learnerSessionID, assessmentCourseConfiguration, LearnerStatisticsType.Quiz, contentObjectID, ExamID, totalQuestions);

                    Logger.Write("assessmentManager.LoadQuizIntoSession():LOADED = " + loaded + " LearningSessionID=" + learnerSessionID + " ContentObjectId=" + contentObjectID.ToString() + " ExamID=" + ExamID.ToString(), "PlayerCourseCache", 2, 2000, System.Diagnostics.TraceEventType.Information, "Important");                    

                    if (courseConfiguration.QuizConfiguration.AllowPauseResumeAssessment)
                    {
                        using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                        {
                            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                            if (cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentLogOutTextPauseResume, brandCode, variant) != null)
                            {
                                logOuttext = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentLogOutTextPauseResume, brandCode, variant);
                            }

                        }
                    }
                    else
                    {
                        using (ICP4.BusinessLogic.CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                        {
                            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                            if (cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentLogOutText, brandCode, variant) != null)
                            {
                                logOuttext = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentLogOutText, brandCode, variant);
                            }
                        }
                    }
                }



                // LCMS-9740
                // ----------------------------------------------------------------------------------------
                if (System.Web.HttpContext.Current.Session["StatisticsType"] != null && System.Web.HttpContext.Current.Session["StatisticsType"].ToString().ToLower() == LearnerStatisticsType.QuizEnd.ToLower())
                {
                    System.Web.HttpContext.Current.Session["StatisticsType"] = "";
                }
                // ----------------------------------------------------------------------------------------


                if (loaded)
                {

                    string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                    string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                    using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                    {
                        int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                        int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                        courseConfiguration = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);
                        ICPCourseService.SequenceItem sequnceItem = cacheManager.GetRequestedItemFromQueue(courseID, seqNo, source, courseConfigurationID);
                        if (sequnceItem.IsValidQuiz == false)
                            sequnceItem.IsValidQuiz = true;

                    }

                    if (courseConfiguration.QuizConfiguration.ProctoredAssessment)
                    {
                        ICP4.CommunicationLogic.CommunicationCommand.ShowProctorMessage.ShowProctorMessage showProctorMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowProctorMessage.ShowProctorMessage();
                        ICP4.CommunicationLogic.CommunicationCommand.ShowProctorMessage.ProctorMessage proctorMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowProctorMessage.ProctorMessage();

                        proctorMessage.IsRestrictiveAssessmentEngine = courseConfiguration.QuizConfiguration.RestrictiveMode;
                        proctorMessage.AllowSkipping = courseConfiguration.QuizConfiguration.AllowSkippingQuestion;
                        proctorMessage.LogOutText = logOuttext;

                        if (courseConfiguration.QuizConfiguration.EnforceMaximumTimeLimit > 0)
                        {
                            proctorMessage.AssessmentTimer = courseConfiguration.QuizConfiguration.EnforceMaximumTimeLimit * 60;
                        }
                        else
                        {
                            proctorMessage.AssessmentTimer = -1;
                        }
                        if (courseConfiguration.QuizConfiguration.ScoreAsYouGo)
                        {
                            proctorMessage.ShowGradeAssessment = false;
                        }
                        else
                        {
                            proctorMessage.ShowGradeAssessment = true;
                        }
                        //COmmented for LCMS-10543
                        //if(courseConfiguration.QuizConfiguration.AllowPauseResumeAssessment)
                        //{
                        //    proctorMessage.IsAssessmentResumeMessage = true;
                        //}

                        if (courseConfiguration.QuizConfiguration.AllowPauseResumeAssessment && System.Web.HttpContext.Current.Session["SelectedQuestionSequenceNo"] != null && Convert.ToInt32(System.Web.HttpContext.Current.Session["SelectedQuestionSequenceNo"]) > 0)
                        {

                            int lastAssessmentTimeInSeconds = trackingService.GetAssessmentTimeForAllSessions(learnerSessionID, LearnerStatisticsType.Quiz, contentObjectID, ExamID, "", -1);
                            proctorMessage.InitialAssessmentTimerValue = proctorMessage.AssessmentTimer;
                            if (lastAssessmentTimeInSeconds == -1)
                            {
                                proctorMessage.IsConfigurationModified = true;
                                proctorMessage.AssessmentTimer = proctorMessage.InitialAssessmentTimerValue; // -1;
                            }
                            else if (Convert.ToInt32(System.Web.HttpContext.Current.Session["SelectedQuestionSequenceNo"]) > 0)
                            {

                                proctorMessage.IsAssessmentResumeMessage = true;
                                proctorMessage.AssessmentTimer -= lastAssessmentTimeInSeconds;

                                if (proctorMessage.AssessmentTimer <= 0)
                                {
                                    proctorMessage.IsAssessmentResumeMessage = false;
                                    proctorMessage.AssessmentTimer = proctorMessage.InitialAssessmentTimerValue;
                                }
                            }
                        }


                        using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                        {
                            //proctorMessage.ProctorMessageHeading = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingProctorMessage, brandCode, variant);
                            proctorMessage.ProctorMessageHeading = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingQuizProctorMessage, brandCode, variant);
                            proctorMessage.ProctorMessageImageUrl = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageProctorMessage, brandCode, variant);
                            proctorMessage.ProctorMessageButtonText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingProctorMessageOkButton, brandCode, variant);

                            //----- start LCMS-4498 ----------
                            //proctorMessage.ProctorMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentProctorMessage, brandCode, variant);

                            //if (isPreview == true)
                            //{
                            //    ICPTrackingService.LearnerStatistics[] learnerStatisticsPreview = null;
                            //    learnerStatisticsPreview = (ICPTrackingService.LearnerStatistics[])System.Web.HttpContext.Current.Session["AssessmentEndStats"];
                            //    if (learnerStatisticsPreview != null && learnerStatisticsPreview.Length > 0)
                            //    {
                            //        lastAttemptNo = learnerStatisticsPreview[learnerStatisticsPreview.Length - 1].AssessmentAttemptNumber;
                            //    }
                            //    else
                            //    {
                            //        lastAttemptNo = 0;
                            //    }
                            //}
                            string ProctorMessageText = string.Empty;
                            ProctorMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentProctorMessage, brandCode, variant);

                            if (courseConfiguration.QuizConfiguration.MaxAttemptHandlerEnabled == false)
                            {
                                ProctorMessageText = ProctorMessageText.Replace("$PROCTORMESSAGENUMBEROFATTEMPTS", "");
                                //ProctorMessageText = ProctorMessageText.Replace("{1}", "unlimited");
                            }
                            else
                            {
                                ProctorMessageText = ProctorMessageText.Replace("$PROCTORMESSAGENUMBEROFATTEMPTS", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentProctorMessageNumberOfAttempts, brandCode, variant));
                                ProctorMessageText = AssessmentMaxAttemptText(ProctorMessageText, courseConfiguration.QuizConfiguration.MaximumNOAttempt);
                                ProctorMessageText = ProctorMessageText.Replace("{1}", NumberToWordConvertor.NumberToText(courseConfiguration.QuizConfiguration.MaximumNOAttempt, false, cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words0, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words1, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words2, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words3, brandCode, variant)).ToLower());
                            }

                            ProctorMessageText = ProctorMessageText.Replace("{0}", NumberToWordConvertor.NumberToText(lastAttemptNo + 1, true, cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words0, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words1, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words2, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words3, brandCode, variant)).ToLower());

                            if (courseConfiguration.QuizConfiguration.ActionToTakeAfterFailingMaxAttempt.Equals(_360Training.BusinessEntities.AfterMaxFailAction.GoToNextLesson))
                            {
                                ProctorMessageText = ProctorMessageText.Replace("{2}", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentActionGoToNextLesson, brandCode, variant));
                            }
                            else if (courseConfiguration.QuizConfiguration.ActionToTakeAfterFailingMaxAttempt.Equals(_360Training.BusinessEntities.AfterMaxFailAction.LockCourse))
                            {
                                ProctorMessageText = ProctorMessageText.Replace("{2}", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentActionLockCourse, brandCode, variant));
                            }
                            else
                            {
                                ProctorMessageText = ProctorMessageText.Replace("{2}", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentActionRetakeLesson, brandCode, variant));
                            }


                            if (proctorMessage.IsConfigurationModified)
                            {
                                // configuration re-published
                                ProctorMessageText = ProctorMessageText.Replace("$GOODLUCKTEXT", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentMustStartOverText, brandCode, variant));
                            }
                            else if (proctorMessage.IsAssessmentResumeMessage)
                            {
                                // resume case                                
                                ProctorMessageText = ProctorMessageText.Replace("$GOODLUCKTEXT", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentResumeText, brandCode, variant));
                            }
                            else
                            {
                                ProctorMessageText = ProctorMessageText.Replace("$GOODLUCKTEXT", "");
                            }

                            string allowPauseText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentProctorMessageAllowPauseResume, brandCode, variant);
                            if (courseConfiguration.QuizConfiguration.AllowPauseResumeAssessment)
                            {
                                allowPauseText = "";
                            }
                            ProctorMessageText = ProctorMessageText.Replace("$ALLOWPAUSERESUME", allowPauseText);

                            if (!proctorMessage.IsAssessmentResumeMessage && !proctorMessage.IsConfigurationModified)
                            {
                                ProctorMessageText = ProctorMessageText.Replace("$BeginAssessment", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentProctorMessageBeginAssessment, brandCode, variant));
                                // ProctorMessageText = ProctorMessageText.Replace("$StartAssessment", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentProctorMessageStartAssessment, brandCode, variant));
                            }
                            else
                            {
                                ProctorMessageText = ProctorMessageText.Replace("$BeginAssessment", string.Empty);
                                //  ProctorMessageText = ProctorMessageText.Replace("$StartAssessment", string.Empty);
                            }

                            ///LCMS-10542 Begin-- Fahad Mukhtar
                            String assessmentMastery = GetMasteryText(BrandManager.ResourceKeyNames.LessonAssessmentMasteryScoreAndNumberOfQuestionsText, brandCode, variant, cacheManager, SequenceItemType.Quiz);
                            ProctorMessageText = ProctorMessageText.Replace("$MASTERYSCORETEXT", assessmentMastery);
                            ///LCMS-10542 End-- Fahad Mukhtar

                            proctorMessage.ProctorMessageText = ProctorMessageText;
                            proctorMessage.LockoutClickAwayToActiveWindow = courseConfiguration.QuizConfiguration.Enabled && courseConfiguration.QuizConfiguration.LockoutFuntionalityClickAwayToActiveWindowEnable;
                            //--------------- end --------------
                        }
                        showProctorMessage.ProctorMessage = proctorMessage;
                        showProctorMessage.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowProctorMessage;
                        returnCommand = showProctorMessage;

                    }
                    else
                    {

                        //ICP4.CommunicationLogic.CommunicationCommand.ShowStartAssessment.ShowStartAssessment showStartAssessment = new ICP4.CommunicationLogic.CommunicationCommand.ShowStartAssessment.ShowStartAssessment();
                        //ICP4.CommunicationLogic.CommunicationCommand.ShowStartAssessment.StartAssessmentMessage startAssessmentMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowStartAssessment.StartAssessmentMessage();


                        //startAssessmentMessage.AllowSkipping = courseConfiguration.QuizAllowSkippingQuestion;

                        //if (courseConfiguration.QuizEnforceMaximumTimeLimit > 0)
                        //{
                        //    startAssessmentMessage.AssessmentTimer = courseConfiguration.QuizEnforceMaximumTimeLimit * 60;
                        //}
                        //else
                        //{
                        //    startAssessmentMessage.AssessmentTimer = -1;
                        //}
                        //using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                        //{
                        //    startAssessmentMessage.StartupHeading = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingStartAssessment, brandCode, variant);
                        //    startAssessmentMessage.StartupMessage = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentStartAssessment, brandCode, variant);
                        //    startAssessmentMessage.StartupImageUrl = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageStartAssessment, brandCode, variant);
                        //    startAssessmentMessage.ButtonText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingStartAssessmentButton, brandCode, variant);
                        //}
                        //showStartAssessment.StartAssessmentMessage = startAssessmentMessage;
                        //showStartAssessment.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowStartAssessment;
                        //returnCommand = showStartAssessment;

                        ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide showSlide = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide();
                        ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset slideMediaAsset = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset();


                        // slideMediaAsset.IsJSPlayerEnabled = System.Configuration.ConfigurationManager.AppSettings["isJSPlayerEnabled"];
                        slideMediaAsset.IsJSPlayerEnabled = CheckForJSEnabledForCourse(Convert.ToString(courseID));


                        ICPAssessmentService.AssessmentItem[] assessmentItems = null;
                        assessmentItems = (ICPAssessmentService.AssessmentItem[])System.Web.HttpContext.Current.Session["AssessmentItemList"];

                        slideMediaAsset.MediaAssetID = sequenceItem.Item_GUID;
                        slideMediaAsset.MediaAssetType = SequenceItemTypeName.ContentAsset;
                        slideMediaAsset.MediaAssetSceneID = sequenceItem.SceneGUID;
                        slideMediaAsset.ContentObjectID = sequenceItem.ParentID;
                        slideMediaAsset.RemidiationMode = false;
                        slideMediaAsset.FlashSceneNo = "";
                        slideMediaAsset.FlashURL = "";
                        slideMediaAsset.IsMovieEnded = false;
                        slideMediaAsset.LastScene = "";
                        slideMediaAsset.NextButtonState = true;
                        slideMediaAsset.SceneDurationTimer = 0;
                        slideMediaAsset.ShowBookMark = false;
                        slideMediaAsset.IsAssessmentStartMessage = true;
                        slideMediaAsset.AllowSkipping = courseConfiguration.QuizConfiguration.AllowSkippingQuestion;
                        slideMediaAsset.ShowGradeAssessment = !courseConfiguration.QuizConfiguration.ScoreAsYouGo;
                        slideMediaAsset.IsRestrictiveAssessmentEngine = courseConfiguration.QuizConfiguration.RestrictiveMode;
                        slideMediaAsset.LockoutClickAwayToActiveWindow = courseConfiguration.QuizConfiguration.Enabled && courseConfiguration.QuizConfiguration.LockoutFuntionalityClickAwayToActiveWindowEnable;
                        slideMediaAsset.LogOutText = logOuttext;

                        if (sequenceItem.SequenceItemType == SequenceItemType.Exam)
                        {
                            slideMediaAsset.ExamID = sequenceItem.ExamID;
                        }

                        #region Course Progress Bar
                        //int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["currentindex"]);
                        string courseName = Convert.ToString(HttpContext.Current.Session["CourseName"]);
                        double percentageCourseProgress = 0;
                        {
                            try
                            {
                                int visitedSceneCount;
                                int totalSceneCount;
                                percentageCourseProgress = CalculateCourseProgressPercentageFromSequence(courseID, seqNo, Convert.ToInt32(System.Web.HttpContext.Current.Session["TotalNoOfViewableScenes"]), out visitedSceneCount, out totalSceneCount);

                                if (percentageCourseProgress > 0)
                                {
                                    slideMediaAsset.CourseProgressPercentage = Convert.ToInt32(Math.Round(percentageCourseProgress));
                                    slideMediaAsset.CourseProgressToolTip = GetToolTipForProgressBar(courseID, courseName, seqNo, totalSceneCount, visitedSceneCount);
                                }
                            }
                            catch (Exception exception)
                            {
                                ExceptionPolicyForLCMS.HandleException(exception, "ICPException");
                                slideMediaAsset.CourseProgressPercentage = 0;
                                slideMediaAsset.CourseProgressToolTip = string.Empty;
                            }
                        }
                        #endregion

                        if (courseConfiguration.QuizConfiguration.EnforceMaximumTimeLimit > 0)
                        {
                            slideMediaAsset.AssessmentTimer = courseConfiguration.QuizConfiguration.EnforceMaximumTimeLimit * 60;

                            // LCMS-9213
                            // ------------------------------------------------------------------------------
                            if (courseConfiguration.QuizConfiguration.AllowPauseResumeAssessment && Convert.ToInt32(System.Web.HttpContext.Current.Session["SelectedQuestionSequenceNo"]) > 0)
                            {
                                int lastAssessmentTimeInSeconds = trackingService.GetAssessmentTimeForAllSessions(learnerSessionID, LearnerStatisticsType.Quiz, contentObjectID, ExamID, "", -1);
                                slideMediaAsset.InitialAssessmentTimerValue = slideMediaAsset.AssessmentTimer;
                                if (lastAssessmentTimeInSeconds == -1)
                                {
                                    slideMediaAsset.IsConfigurationModified = true;
                                    slideMediaAsset.AssessmentTimer = slideMediaAsset.InitialAssessmentTimerValue; // -1;
                                }
                                else if (Convert.ToInt32(System.Web.HttpContext.Current.Session["SelectedQuestionSequenceNo"]) > 0)
                                {

                                    slideMediaAsset.IsAssessmentResumeMessage = true;
                                    slideMediaAsset.AssessmentTimer -= lastAssessmentTimeInSeconds;

                                    if (slideMediaAsset.AssessmentTimer <= 0)
                                    {
                                        slideMediaAsset.IsAssessmentResumeMessage = false;
                                        slideMediaAsset.AssessmentTimer = slideMediaAsset.InitialAssessmentTimerValue;
                                    }
                                }
                            }
                            // ------------------------------------------------------------------------------

                        }
                        else
                        {
                            slideMediaAsset.AssessmentTimer = -1;
                        }

                        string HTML = "";
                        string icpFileSystem = ConfigurationManager.AppSettings["ICPFileSystem"];
                        using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
                        {
                            courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                            courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                            HTML = courseService.GetSceneTemplateHTML(sequenceItem.SceneTemplateID).TemplateHTML;
                        }
                        using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                        {
                            StringBuilder sb = new StringBuilder(HTML);
                            string QuizAssessmentText = "";
                            sb.Replace("$Heading", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.LessonAssessmentHeading, brandCode, variant));
                            sb.Replace("$VisualTop", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.LessonAssessmentImage, brandCode, variant));

                            // Changes made by Waqas Zakai
                            // LCMS-4157
                            // START
                            //if (isPreview == true)
                            //{
                            //    ICPTrackingService.LearnerStatistics[] learnerStatisticsPreview = null;
                            //    learnerStatisticsPreview = (ICPTrackingService.LearnerStatistics[])System.Web.HttpContext.Current.Session["AssessmentEndStats"];
                            //    if (learnerStatisticsPreview != null && learnerStatisticsPreview.Length > 0)
                            //    {
                            //        lastAttemptNo = learnerStatisticsPreview[learnerStatisticsPreview.Length - 1].AssessmentAttemptNumber;
                            //    }
                            //    else
                            //    {
                            //        lastAttemptNo = 0;
                            //    }
                            //}
                            QuizAssessmentText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.LessonAssessmentText, brandCode, variant);
                            String QuizAssessmentMasteryScoreText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.LessonAssessmentMasteryScoreAndNumberOfQuestionsText, brandCode, variant);
                            String QuizAssessmentMaxAttemptHandlerText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.LessonAssessmentMaximumAttemptHandlerText, brandCode, variant);
                            String QuizAssessmentGoodLuckText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.LessonAssessmentGoodLuckText, brandCode, variant);
                            /* Added For LCMS-9829*/
                            String QuizAssessmentBeginInstrucitonsText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.LessonAssessmentBeginInstruction, brandCode, variant);
                            if (courseConfiguration.QuizConfiguration.MaxAttemptHandlerEnabled == false)
                            {
                                //QuizAssessmentText = QuizAssessmentText.Replace(cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentAttemptTextToRemove, brandCode, variant)
                                //  , "");

                                /*LCMS-8916 - Start*/
                                /*
                                QuizAssessmentText = QuizAssessmentText.Replace("<p class=\"sceneTextArea\">This is your $ATTEMPTNUMBER attempt. This exam allows a maximum of $ATTEMPTEDNUMBER attempts after which $ACTIONMESSAGE</p>", "");
                                */
                                QuizAssessmentText = QuizAssessmentText.Replace("$MAXATTEMPTHANDLERTEXT", "");
                                /*LCMS-8916 - End*/
                                //QuizAssessmentText = QuizAssessmentText.Replace("$ATTEMPTEDNUMBER", "unlimited");
                                //QuizAssessmentText = QuizAssessmentText.Replace(cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentAttemptTextToRemove, brandCode, variant), ".");

                            }
                            else
                            {
                                QuizAssessmentMaxAttemptHandlerText = AssessmentMaxAttemptText(QuizAssessmentMaxAttemptHandlerText, courseConfiguration.QuizConfiguration.MaximumNOAttempt);
                                QuizAssessmentMaxAttemptHandlerText = QuizAssessmentMaxAttemptHandlerText.Replace("$ATTEMPTEDNUMBER", NumberToWordConvertor.NumberToText(courseConfiguration.QuizConfiguration.MaximumNOAttempt, false, cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words0, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words1, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words2, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words3, brandCode, variant)).ToLower());
                                QuizAssessmentMaxAttemptHandlerText = QuizAssessmentMaxAttemptHandlerText.Replace("$ATTEMPTNUMBER", NumberToWordConvertor.NumberToText(lastAttemptNo + 1, true, cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words0, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words1, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words2, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words3, brandCode, variant)).ToLower());


                                if (courseConfiguration.QuizConfiguration.ActionToTakeAfterFailingMaxAttempt.Equals(AfterMaxFailAction.GoToNextLesson))
                                {
                                    QuizAssessmentMaxAttemptHandlerText = QuizAssessmentMaxAttemptHandlerText.Replace("$ACTIONMESSAGE", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.LessonAssessmentGoToNextLesson, brandCode, variant));
                                }
                                else if (courseConfiguration.QuizConfiguration.ActionToTakeAfterFailingMaxAttempt.Equals(AfterMaxFailAction.LockCourse))
                                {
                                    QuizAssessmentMaxAttemptHandlerText = QuizAssessmentMaxAttemptHandlerText.Replace("$ACTIONMESSAGE", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.LessonAssessmentLockCourse, brandCode, variant));
                                }
                                else
                                {
                                    QuizAssessmentMaxAttemptHandlerText = QuizAssessmentMaxAttemptHandlerText.Replace("$ACTIONMESSAGE", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.LessonAssessmentRetakeLesson, brandCode, variant));
                                }
                                QuizAssessmentText = QuizAssessmentText.Replace("$MAXATTEMPTHANDLERTEXT", QuizAssessmentMaxAttemptHandlerText);

                            }


                            if (QuizAssessmentMasteryScoreText == null || QuizAssessmentMasteryScoreText.Trim().Length == 0)
                            {
                                QuizAssessmentText = QuizAssessmentText.Replace("$MASTERYSCORETEXT", "");
                            }
                            else
                            {
                                QuizAssessmentMasteryScoreText = QuizAssessmentMasteryScoreText.Replace("$PassingRate", courseConfiguration.QuizConfiguration.MasteryScore.ToString());
                                QuizAssessmentMasteryScoreText = QuizAssessmentMasteryScoreText.Replace("$TOTALASSESSMENTS", assessmentItems.Length.ToString());
                                QuizAssessmentText = QuizAssessmentText.Replace("$MASTERYSCORETEXT", QuizAssessmentMasteryScoreText);
                            }

                            /*
                            if (QuizAssessmentMaxAttemptHandlerText == null || QuizAssessmentMaxAttemptHandlerText.Trim().Length == 0)
                            {
                                QuizAssessmentText = QuizAssessmentText.Replace("$MAXATTEMPTHANDLERTEXT", "");
                            }
                            else
                            {
                                QuizAssessmentText = QuizAssessmentText.Replace("$MAXATTEMPTHANDLERTEXT", QuizAssessmentMaxAttemptHandlerText);
                            }
                            */



                            // LCMS-9213
                            //---------------------------------------------------------

                            //if ((courseConfiguration.QuizConfiguration.EnforceMaximumTimeLimit > 0) && (slideMediaAsset.AssessmentTimer == -1))
                            if (slideMediaAsset.IsConfigurationModified)
                            {
                                // configuration re-published
                                QuizAssessmentText = QuizAssessmentText.Replace("$GOODLUCKTEXT", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentMustStartOverText, brandCode, variant));
                                QuizAssessmentText = QuizAssessmentText.Replace("$BEGININSTRUCTIONTEXT", "");
                                //HttpContext.Current.Session.Remove("askedAssessmentItemGUIDs");
                            }
                            //else if (!isPreview && HttpContext.Current.Session["askedAssessmentItemsAttributes"] != null && courseConfiguration.QuizConfiguration.AllowPauseResumeAssessment)
                            else if (slideMediaAsset.IsAssessmentResumeMessage)
                            {
                                // resume case                                
                                QuizAssessmentText = QuizAssessmentText.Replace("$GOODLUCKTEXT", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentResumeText, brandCode, variant));
                                QuizAssessmentText = QuizAssessmentText.Replace("$BEGININSTRUCTIONTEXT", "");
                                //HttpContext.Current.Session.Remove("askedAssessmentItemGUIDs");
                            }
                            else
                            {
                                if (QuizAssessmentGoodLuckText == null || QuizAssessmentGoodLuckText.Trim().Length == 0)
                                {
                                    QuizAssessmentText = QuizAssessmentText.Replace("$GOODLUCKTEXT", "");
                                }
                                else
                                {
                                    QuizAssessmentText = QuizAssessmentText.Replace("$GOODLUCKTEXT", QuizAssessmentGoodLuckText);
                                }
                                if (QuizAssessmentBeginInstrucitonsText != null && QuizAssessmentBeginInstrucitonsText.Trim().Length > 0)
                                {
                                    QuizAssessmentText = QuizAssessmentText.Replace("$BEGININSTRUCTIONTEXT", QuizAssessmentBeginInstrucitonsText);
                                }
                                else
                                {
                                    QuizAssessmentText = QuizAssessmentText.Replace("$BEGININSTRUCTIONTEXT", "");
                                }
                            }

                            string allowPauseText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AllowPauseResumeAssessment, brandCode, variant);
                            if (courseConfiguration.QuizConfiguration.AllowPauseResumeAssessment)
                            {
                                allowPauseText = "";
                            }
                            QuizAssessmentText = QuizAssessmentText.Replace("$ALLOWPAUSERESUME", allowPauseText);
                            //---------------------------------------------------------



                            sb.Replace("$Text", QuizAssessmentText);
                            // Changes END                            
                            //sb.Replace("$PassingRate", courseConfiguration.QuizConfiguration.MasteryScore.ToString());
                            //sb.Replace("$TOTALASSESSMENTS", assessmentItems.Length.ToString());

                            HTML = sb.ToString();
                        }


                        slideMediaAsset.TemplateHtml = HTML;
                        slideMediaAsset.TemplateHtml = slideMediaAsset.TemplateHtml.Replace("\n", "");

                        showSlide.MediaAsset = slideMediaAsset;
                        showSlide.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowSlide;
                        System.Web.HttpContext.Current.Session["IsAssessmentStarting"] = true;

                        //System.Diagnostics.Trace.WriteLine(" IsAssessmentStarting Start End");
                        //System.Diagnostics.Trace.Flush();

                        returnCommand = showSlide;
                    }
                }
                else
                {
                    if (isNormalDirection)
                    {
                        Logger.Write("NextBack(courseID, 1) FIFTH LearningSessionID=" + learnerSessionID, "PlayerCourseCache", 2, 2000, System.Diagnostics.TraceEventType.Information, "Important");
                        return NextBack(courseID, 1);
                    }
                    Logger.Write("NextBack(courseID, -1) FIFTH LearningSessionID=" + learnerSessionID, "PlayerCourseCache", 2, 2000, System.Diagnostics.TraceEventType.Information, "Important");
                    return NextBack(courseID, -1);

                }
            }
            else if (isPass || actionTaken == true)//for pass and when action is already taken            
            {
                if (isNormalDirection)
                {
                    Logger.Write("NextBack(courseID, 1) SIXTH LearningSessionID=" + learnerSessionID, "PlayerCourseCache", 2, 2000, System.Diagnostics.TraceEventType.Information, "Important");
                    return NextBack(courseID, 1);
                }
                Logger.Write("NextBack(courseID, -1) SIXTH LearningSessionID=" + learnerSessionID, "PlayerCourseCache", 2, 2000, System.Diagnostics.TraceEventType.Information, "Important");
                return NextBack(courseID, -1);
            }
            else
            {
                switch (courseConfiguration.QuizConfiguration.ActionToTakeAfterFailingMaxAttempt)
                {
                    case AfterMaxFailAction.GoToNextLesson:
                        {
                            Logger.Write("NextBack(courseID, 1) AfterMaxFailAction.GoToNextLesson SEVENTH LearningSessionID=" + learnerSessionID, "PlayerCourseCache", 2, 2000, System.Diagnostics.TraceEventType.Information, "Important");
                            returnCommand = NextBack(courseID, 1);
                            actionTaken = true;
                            break;
                        }
                    case AfterMaxFailAction.RetakeLesson:
                        {
                            int contentObjectSeqNo = GetSequenceNoBySequenceItemID(courseID, sequenceItemForTracking.ParentID, null/*sequenceItem.SequenceItemType*/);
                            sequenceItemForTracking = GetSequenceItem(courseID, contentObjectSeqNo);
                            returnCommand = LoadSequenceItemIntoCommand(courseID, contentObjectSeqNo, sequenceItemForTracking, true);
                            actionTaken = true;
                            break;

                        }
                    case AfterMaxFailAction.LockCourse:
                        {
                            int learnerID = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerID"]);
                            int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
                            LockCourse(courseID, learnerID, enrollmentID, LockingReason.MaxAttemptReachLessonAssessment);
                            returnCommand = CreateCourseLockedCommandObject(courseID, LockingReason.MaxAttemptReachLessonAssessment);
                            actionTaken = true;
                            break;
                        }
                }
                //UpdateActionAfterFailingMaxAttempt(actionTaken, learnerStatisticsID);
            }
            return returnCommand;

        }
                    


        private ICPCourseService.CourseConfiguration TranslateAssessmentConfigurationToCourseConfiguration(ICPCourseService.CourseConfiguration courseConfiguration,
            ICPCourseService.AssessmentConfiguration QuizAssessmentConfiguration)
        {                            

           courseConfiguration.QuizConfiguration.ID = QuizAssessmentConfiguration.ID;
           courseConfiguration.QuizConfiguration.AssessmentType = QuizAssessmentConfiguration.AssessmentType;
           courseConfiguration.QuizConfiguration.ActionToTakeAfterFailingMaxAttempt = QuizAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt;
           courseConfiguration.QuizConfiguration.AllowPauseResumeAssessment = QuizAssessmentConfiguration.AllowPauseResumeAssessment;
           courseConfiguration.QuizConfiguration.AllowSkippingQuestion = QuizAssessmentConfiguration.AllowSkippingQuestion;
           courseConfiguration.QuizConfiguration.ContentRemediation = QuizAssessmentConfiguration.ContentRemediation;
           courseConfiguration.QuizConfiguration.Enabled = QuizAssessmentConfiguration.Enabled;
           courseConfiguration.QuizConfiguration.EnforceMaximumTimeLimit = QuizAssessmentConfiguration.EnforceMaximumTimeLimit;
           courseConfiguration.QuizConfiguration.EnforceUniqueQuestionsOnRetake = QuizAssessmentConfiguration.EnforceUniqueQuestionsOnRetake;
           courseConfiguration.QuizConfiguration.MasteryScore = QuizAssessmentConfiguration.MasteryScore;
           courseConfiguration.QuizConfiguration.MaximumNOAttempt = QuizAssessmentConfiguration.MaximumNOAttempt;
           courseConfiguration.QuizConfiguration.NOQuestion = QuizAssessmentConfiguration.NOQuestion;
           courseConfiguration.QuizConfiguration.ProctoredAssessment = QuizAssessmentConfiguration.ProctoredAssessment;
           courseConfiguration.QuizConfiguration.QuestionLevelResult = QuizAssessmentConfiguration.QuestionLevelResult;
           courseConfiguration.QuizConfiguration.RandomizeAnswers = QuizAssessmentConfiguration.RandomizeAnswers;
           courseConfiguration.QuizConfiguration.RandomizeQuestion = QuizAssessmentConfiguration.RandomizeQuestion;
           courseConfiguration.QuizConfiguration.ScoreAsYouGo = QuizAssessmentConfiguration.ScoreAsYouGo;         
           courseConfiguration.QuizConfiguration.ScoreType = QuizAssessmentConfiguration.ScoreType;
           courseConfiguration.QuizConfiguration.ShowQuestionAnswerSummary = QuizAssessmentConfiguration.ShowQuestionAnswerSummary;
           courseConfiguration.QuizConfiguration.AdvanceQuestionSelectionType = QuizAssessmentConfiguration.AdvanceQuestionSelectionType;
           courseConfiguration.QuizConfiguration.MinimumTimeBeforeStart = QuizAssessmentConfiguration.MinimumTimeBeforeStart;
           courseConfiguration.QuizConfiguration.MinimumTimeBeforeStartUnit = QuizAssessmentConfiguration.MinimumTimeBeforeStartUnit;
           courseConfiguration.QuizConfiguration.RestrictiveMode = QuizAssessmentConfiguration.RestrictiveMode;
           courseConfiguration.QuizConfiguration.StrictlyEnforcePolicyToBeUsed = QuizAssessmentConfiguration.StrictlyEnforcePolicyToBeUsed;
           courseConfiguration.QuizConfiguration.UseWeightedScore = QuizAssessmentConfiguration.UseWeightedScore;
           courseConfiguration.QuizConfiguration.DisplaySeatTimeSatisfiedMessageTF = QuizAssessmentConfiguration.DisplaySeatTimeSatisfiedMessageTF;
           courseConfiguration.QuizConfiguration.AllowPostAssessmentAfterSeatTimeSatisfiedTF = QuizAssessmentConfiguration.AllowPostAssessmentAfterSeatTimeSatisfiedTF;



           return courseConfiguration;
        }
        
        
        
        /// <summary>
        /// This method creates appropriate command according to policy, whenever the course pointer reaches to PostAssessment marker
        /// </summary>
        /// <param name="courseID">CourseId integer value</param>
        /// <returns>Any communication command object based on policy.</returns>
        private object StartOrContinuePostAssessment(int courseID, ICP4.BusinessLogic.ICPCourseService.SequenceItem sequenceItem, bool isNormalDirection, int ExamID)
        {
            int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
            int courseApproval = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseApprovalID"]);
            #region Policy Allow Review After completion
            {   
                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {                    
                    int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                    ICPCourseService.CourseConfiguration courseConfigurations = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);
                    if (Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsCourseCompleted"]) == true &&
                        courseConfigurations.PlayerAllowUserToReviewCourseAfterCompletion == true)
                    {
                        if (isNormalDirection == true)
                            return NextBack(courseID, 1);
                        else
                            return NextBack(courseID, -1);
                    }
                }
            }
            #endregion
            object returnCommand = new object();
            bool loaded = true;
            
            string learnerSessionID = System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
            int lastAttemptNo = 0;
            bool isPass = false;
            bool actionTaken = false;
            long learnerStatisticsID = 0;
            int lastRemediationCount = 0;
            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["isPreview"]);
            bool shouldRetakeContent = false;
            string logOuttext = string.Empty;
            bool isCourseApprovalAffidavitAsk=Convert.ToBoolean(System.Web.HttpContext.Current.Session["AskedCourseApprovalAffidavit"]);
            ICPCourseService.CourseConfiguration courseConfiguration = GetCourseConfiguration(Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]));
            
            ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();
            trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
            trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
            ///////////////////////////////////////////////////////////////////////////////
            // If Course have Course Approval then it should display affidavit screen if
            // Affidavit is on, also this condition will execute for LMS if source=0
            //if (source == 0 && courseApproval > 0 && isPreview == false && isCourseApprovalAffidavitAsk==false)
            //{
            //    ICPTrackingService.LearnerStatistics[] learnerStatisticsCourseApproval = null;
            //    learnerStatisticsCourseApproval = trackingService.GetPostAssessmentResult(learnerSessionID);
            //    GetLastAssessmentResult(learnerStatisticsCourseApproval, courseConfiguration.PostAssessmentConfiguration.MasteryScore, out isPass, out lastAttemptNo, out actionTaken, out learnerStatisticsID, out lastRemediationCount);

            //    if (!isPass)
            //    {
            //        using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
            //        {
            //            courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
            //            courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
            //            int affidavit = courseService.GetCourseApprovalAffidavit(courseID, courseApproval);
            //            if (affidavit > 0)
            //            {
            //                return CreateCourseApprovalAffidavitCommandObject(affidavit);
            //            }
            //        }
            //    }
            //}
            ///////////////////////////////////////////////////////////////////////////////
            //returnCommand = CourseApprovalAffidavit();
            //if(returnCommand!=null)
            //{
            //    return returnCommand;
            //} 
            
            ICPAssessmentService.CourseConfiguration assessmentCourseConfiguration = new ICPAssessmentService.CourseConfiguration();

            if (courseConfiguration.PostAssessmentConfiguration.MaximumNOAttempt == 0)
            {
                return NextBack(courseID, 1);
            }

            //Translation is required at this point because namespace of AssessmentServices are different from CourseServices
            assessmentCourseConfiguration = TranslateCourseServiceConfigrationToAssessmentServiceConfiguration(courseConfiguration);           




            bool isMinimumTimeNotSpent = false; // true;
            double remainingTimeRequired = 0;
            double userTime = 0;
            #region Final Exam Locked Scene
            //If the Course Configuration Minimum Time spent to 
            // Unlock Final exam is on we need to show this scene
            if (courseConfiguration.PostAssessmentConfiguration.MinimumTimeBeforeStart > 0)
            {
                
                //bool isMinimumTimeNotSpent = true;
                int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
                //double remainingTimeRequired = 0;
                //double userTime = 0;
                double totalUserTimeSpentPreviouslyInSeconds = 0;
                double totalUserTimeSpentCurrentlyInSeconds = 0;

                DateTime courseStartTime = Convert.ToDateTime(System.Web.HttpContext.Current.Session["CourseStartTime"]);
                DateTime endTime = DateTime.Now;
                totalUserTimeSpentCurrentlyInSeconds = Convert.ToInt32(Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval.Second, courseStartTime, endTime, Microsoft.VisualBasic.FirstDayOfWeek.System, Microsoft.VisualBasic.FirstWeekOfYear.System));


                if (isPreview)
                {
                    totalUserTimeSpentPreviouslyInSeconds = totalUserTimeSpentCurrentlyInSeconds;
                }
                else
                {
                    totalUserTimeSpentPreviouslyInSeconds =  trackingService.GetLearnerTimeSpent(enrollmentID, learnerSessionID) + totalUserTimeSpentCurrentlyInSeconds;
                }
                //LCMS-5228:Starts
                /*
                if (courseConfiguration.PostAssessmentMinimumTimeBeforeStartUnit == "Minutes")
                {
                    userTime = (totalUserTimeSpentPreviouslyInSeconds) / 60;
                    isMinimumTimeNotSpent = (userTime < courseConfiguration.PostAssessmentMinimumTimeBeforeStart ? true : false);
                }
                else if (courseConfiguration.PostAssessmentMinimumTimeBeforeStartUnit == "Hours")
                {
                    userTime = (totalUserTimeSpentPreviouslyInSeconds) / 3600;
                    isMinimumTimeNotSpent = (userTime < courseConfiguration.PostAssessmentMinimumTimeBeforeStart ? true : false);
                }
                 */
                TimeSpan timeSpan = TimeSpan.FromSeconds(totalUserTimeSpentPreviouslyInSeconds);

                if (courseConfiguration.PostAssessmentConfiguration.MinimumTimeBeforeStartUnit == "Minutes")
                {
                    userTime = Math.Floor(timeSpan.TotalMinutes);
                    isMinimumTimeNotSpent = (userTime < courseConfiguration.PostAssessmentConfiguration.MinimumTimeBeforeStart ? true : false);
                }
                else if (courseConfiguration.PostAssessmentConfiguration.MinimumTimeBeforeStartUnit == "Hours")
                {
                    userTime = Math.Floor(timeSpan.TotalHours);
                    isMinimumTimeNotSpent = (userTime < courseConfiguration.PostAssessmentConfiguration.MinimumTimeBeforeStart ? true : false);
                }

                
                ////LCMS-5228:Ends
                //if (isMinimumTimeNotSpent)
                //{
                //    remainingTimeRequired = courseConfiguration.PostAssessmentMinimumTimeBeforeStart - userTime;
                //    return LoadFinalExamLocked(courseConfiguration.PostAssessmentMinimumTimeBeforeStart, userTime, remainingTimeRequired, courseConfiguration.PostAssessmentMinimumTimeBeforeStartUnit);
                //}
            }
            #endregion

            ICPTrackingService.LearnerStatistics[] learnerStatistics = null;
            ICPTrackingService.LearnerStatistics[] learnerStatisticsPreview = null;
            if (isPreview == true)
            {
                learnerStatisticsPreview = (ICPTrackingService.LearnerStatistics[])System.Web.HttpContext.Current.Session["AssessmentEndStats"];
                if (learnerStatisticsPreview != null && learnerStatisticsPreview.Length > 0)
                {
                    lastAttemptNo = learnerStatisticsPreview[learnerStatisticsPreview.Length - 1].AssessmentAttemptNumber;
                }
                else
                {
                    lastAttemptNo = 0;
                }
            }
            else
            {
                learnerStatistics = trackingService.GetPostAssessmentResult(learnerSessionID);
                GetLastAssessmentResult(learnerStatistics, courseConfiguration.PostAssessmentConfiguration.MasteryScore, out isPass, out lastAttemptNo, out actionTaken, out learnerStatisticsID, out lastRemediationCount);
            }
            int remediationCount = CalculateAssessmentRemediationCount(lastRemediationCount, courseConfiguration.PostAssessmentConfiguration.MaximumNOAttempt, lastAttemptNo);
            // Fix for LCMS-11161
            double rawScore = 0;
            if (learnerStatistics != null && learnerStatistics.Length > 0)
            {
                rawScore = learnerStatistics[learnerStatistics.Length - 1].RawScore;
            }
            // End fix for LCMS-11161
            if (lastAttemptNo == courseConfiguration.PostAssessmentConfiguration.MaximumNOAttempt && rawScore == -2)
            {
                remediationCount = remediationCount - 1;
            }
            System.Web.HttpContext.Current.Session["AssessmentRemediatonCount"] = remediationCount;

            if (lastAttemptNo >= courseConfiguration.PostAssessmentConfiguration.MaximumNOAttempt && courseConfiguration.PostAssessmentConfiguration.ScoreType.ToUpper().Equals(ScoreType.NoResults.ToUpper()))
            {
                if (isNormalDirection == true)
                    return NextBack(courseID, 1);
                else
                    return NextBack(courseID, -1);
            }

            // Added by Mustafa for LCMS-2694
            //---------------------------------------
            if (rawScore != -2)// Fix for LCMS-11161
            {
                if (courseConfiguration.PostAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt == AfterMaxFailAction.RetakeCourse)
                {
                    if (courseConfiguration.PostAssessmentConfiguration.MaximumNOAttempt == lastAttemptNo && !isPass)
                    {
                        lastAttemptNo = 0;
                        if (System.Web.HttpContext.Current.Session["StatisticsType"] != null && System.Web.HttpContext.Current.Session["StatisticsType"].ToString().ToLower().Equals(LearnerStatisticsType.PostAssessmentEnd.ToLower()))
                        {
                            shouldRetakeContent = true;
                            System.Web.HttpContext.Current.Session["StatisticsType"] = string.Empty;
                        }
                    }
                    else if (courseConfiguration.PostAssessmentConfiguration.MaximumNOAttempt < lastAttemptNo && !isPass)
                    {
                        lastAttemptNo = lastAttemptNo % courseConfiguration.PostAssessmentConfiguration.MaximumNOAttempt;
                    }
                }
                if (courseConfiguration.PostAssessmentConfiguration.MaximumNOAttempt == lastAttemptNo && !isPass && (courseConfiguration.PostAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt == AfterMaxFailAction.GoToNextLesson || courseConfiguration.PostAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt == AfterMaxFailAction.ContinueCourse))
                {
                    actionTaken = true;
                }
            }
            //---------------------------------------
            //lastAttemptNo = lastAttemptNo + 1;
            HttpContext.Current.Session["LastAssessmentAttemptNo"] = lastAttemptNo + 1;
            

            //This is a temporary fix for LCMS-2025 and must be replaced in future builds///
            //bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["isPreview"]);
            if (isPreview == true)
            {
                List<string> askedAssessments = (List<string>)System.Web.HttpContext.Current.Session["AskedAssessments"];
                if (askedAssessments != null)
                {
                    //if ((askedAssessments.Contains(SequenceItemTypeName.PostAssessment) && (lastAttemptNo != 0)) || (askedAssessments.Contains(SequenceItemTypeName.PostAssessment) && (!courseConfiguration.PostAssessmentRefreshMaxAttemptOnRetake)) || (askedAssessments.Contains(SequenceItemTypeName.PostAssessment) && (HttpContext.Current.Session["IsPostAssessmentCrossed"] != null) && (Convert.ToBoolean(HttpContext.Current.Session["IsPostAssessmentCrossed"]) == true)))
                    
                    if(askedAssessments.Contains(SequenceItemTypeName.PostAssessment))
                    {
                        if (isNormalDirection)
                            return NextBack(courseID, 1);
                        return NextBack(courseID, -1);
                    }
                }
            }
            

            //if (courseConfiguration.PostAssessmentConfiguration.MaximumNOAttempt > lastAttemptNo && !isPass)
            if ((courseConfiguration.PostAssessmentConfiguration.MaximumNOAttempt > lastAttemptNo && !isPass && !shouldRetakeContent) || (!isPass && !courseConfiguration.PostAssessmentConfiguration.MaxAttemptHandlerEnabled)
                || rawScore==-2) //Fix of raw score added for  	LCMS-11086
            {
                using (AssessmentManager.AssessmentManager assessmentManager = new ICP4.BusinessLogic.AssessmentManager.AssessmentManager())
                {
                    // LCMS-9213
                    //--------------------------------------------------------------
                    int totalQuestions = 0;
                    if (!isPreview && learnerStatistics != null && learnerStatistics.Length > 0)
                    {
                        int noAnswerCorrect = learnerStatistics[learnerStatistics.Length - 1].NumberAnswersCorrect;
                        int noAnswerIncorrect = learnerStatistics[learnerStatistics.Length - 1].NumberAnswersIncorrect;
                        totalQuestions = noAnswerCorrect + noAnswerIncorrect;
                    }
                    //--------------------------------------------------------------
                    int modifiedAttemptNumber=-1;
                    loaded = assessmentManager.LoadPreOrPostAssessmentIntoSession(courseID, learnerSessionID, assessmentCourseConfiguration, LearnerStatisticsType.PostAssessment, ExamID, totalQuestions, ref modifiedAttemptNumber);
                    //Fix for LCMS-10266-- if the inside funciton needs to reset the value of session variable then reset it
                    if (modifiedAttemptNumber != -1)
                    {
                        lastAttemptNo = modifiedAttemptNumber - 1;
                       // HttpContext.Current.Session["OriginalAttemptNumber"] = HttpContext.Current.Session["LastAssessmentAttemptNo"];
                        HttpContext.Current.Session["LastAssessmentAttemptNo"] =modifiedAttemptNumber;
                        
                    }
                    //////////////////////////////////
                }
                //Fix for LCMS-11085
                if ((System.Web.HttpContext.Current.Session["CourseLockedDuringAssessment"].ToString()=="True" ||
                    courseConfiguration.PostAssessmentConfiguration.AllowPauseResumeAssessment) && (System.Web.HttpContext.Current.Session["CourseLockedDuringAssessment"].ToString()=="True" || courseConfiguration.PostAssessmentConfiguration.AdvanceQuestionSelectionType == ICP4.BusinessLogic.AssessmentManager.ExamPrepConstants.ADVANCEQUESTIONSELECTIONTYPE_RANDOMALTERNATE ||
                                                                                                   courseConfiguration.PostAssessmentConfiguration.AdvanceQuestionSelectionType == ICP4.BusinessLogic.AssessmentManager.ExamPrepConstants.ADVANCEQUESTIONSELECTIONTYPE_RANDOMALTERNATE_MULTIPLEITEMBANKS))
                {
                    using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                    {
                        string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                        string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                        if (cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentLogOutTextRandomAlternate, brandCode, variant)!=null)
                        {
                            logOuttext = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentLogOutTextRandomAlternate, brandCode, variant);
                        }

                    }
                }
                else if (System.Web.HttpContext.Current.Session["CourseLockedDuringAssessment"].ToString() == "True" || courseConfiguration.PostAssessmentConfiguration.AllowPauseResumeAssessment)
                {
                    using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                    {
                        string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                        string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                        if (cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentLogOutTextPauseResume, brandCode, variant) != null)
                        {
                            logOuttext = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentLogOutTextPauseResume, brandCode, variant);
                        }

                    }
                }
                else
                {
                    using (ICP4.BusinessLogic.CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                    {
                        string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                        string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                        if (cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentLogOutText, brandCode, variant) != null)
                        {
                            logOuttext = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentLogOutText, brandCode, variant);
                        }
                    }
                }
                //End Fix for LCMS-11085

                //LCMS-5228:Ends
                if (isMinimumTimeNotSpent && loaded && courseConfiguration.PostAssessmentConfiguration.AllowPostAssessmentAfterSeatTimeSatisfiedTF)
                {
                    remainingTimeRequired = courseConfiguration.PostAssessmentConfiguration.MinimumTimeBeforeStart - userTime;

                    return LoadFinalExamLocked(courseConfiguration.PostAssessmentConfiguration.MinimumTimeBeforeStart, userTime, remainingTimeRequired, courseConfiguration.PostAssessmentConfiguration.MinimumTimeBeforeStartUnit);
                }



                // LCMS-9740
                // ----------------------------------------------------------------------------------------
                if (System.Web.HttpContext.Current.Session["StatisticsType"] != null && System.Web.HttpContext.Current.Session["StatisticsType"].ToString().ToLower() == LearnerStatisticsType.PostAssessmentEnd.ToLower())
                {
                    System.Web.HttpContext.Current.Session["StatisticsType"] = "";
                }
                // ----------------------------------------------------------------------------------------



                if (loaded)
                {
                    System.Web.HttpContext.Current.Session["ShowAssessmentResult"] = "true";
                    string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                    string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                    using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                    {                        
                        int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                        courseConfiguration = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);
                    }

                    if (courseConfiguration.PostAssessmentConfiguration.ProctoredAssessment)
                    {
                        ICP4.CommunicationLogic.CommunicationCommand.ShowProctorMessage.ShowProctorMessage showProctorMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowProctorMessage.ShowProctorMessage();
                        ICP4.CommunicationLogic.CommunicationCommand.ShowProctorMessage.ProctorMessage proctorMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowProctorMessage.ProctorMessage();

                        proctorMessage.IsRestrictiveAssessmentEngine = courseConfiguration.PostAssessmentConfiguration.RestrictiveMode;
                        proctorMessage.AllowSkipping = courseConfiguration.PostAssessmentConfiguration.AllowSkippingQuestion;
                        proctorMessage.LogOutText = logOuttext;
                        if (courseConfiguration.PostAssessmentConfiguration.EnforceMaximumTimeLimit > 0)
                        {
                            proctorMessage.AssessmentTimer = courseConfiguration.PostAssessmentConfiguration.EnforceMaximumTimeLimit * 60;
                        }
                        else
                        {
                            proctorMessage.AssessmentTimer = -1;
                        }
                        if (courseConfiguration.PostAssessmentConfiguration.ScoreAsYouGo)
                        {
                            proctorMessage.ShowGradeAssessment = false;
                        }
                        else
                        {
                            proctorMessage.ShowGradeAssessment = true;
                        }

                        if ((courseConfiguration.PostAssessmentConfiguration.AllowPauseResumeAssessment && System.Web.HttpContext.Current.Session["SelectedQuestionSequenceNo"] != null && Convert.ToInt32(System.Web.HttpContext.Current.Session["SelectedQuestionSequenceNo"]) > 0)|| (System.Web.HttpContext.Current.Session["CourseLockedDuringAssessment"].ToString()=="True"))
                        {

                            int lastAssessmentTimeInSeconds = trackingService.GetAssessmentTimeForAllSessions(learnerSessionID, LearnerStatisticsType.PostAssessment, 0, ExamID, 
                                                            HttpContext.Current.Session["RandomAlternateWithPauseResume"] != null ? "RANDOMALTERNATE" : ""
                                                            , HttpContext.Current.Session["RandomAlternateWithPauseResume"] != null ?assessmentCourseConfiguration.PostAssessmentConfiguration.ID:- 1);
                            proctorMessage.InitialAssessmentTimerValue = proctorMessage.AssessmentTimer;
                            if (lastAssessmentTimeInSeconds == -1)
                            {
                                proctorMessage.IsConfigurationModified = true;
                                proctorMessage.AssessmentTimer = proctorMessage.InitialAssessmentTimerValue; // -1;
                            }
                            else if (Convert.ToInt32(System.Web.HttpContext.Current.Session["SelectedQuestionSequenceNo"]) > 0)
                            {

                                proctorMessage.IsAssessmentResumeMessage = true;
                                proctorMessage.AssessmentTimer -= lastAssessmentTimeInSeconds;

                                if (proctorMessage.AssessmentTimer <= 0)
                                {
                                    proctorMessage.IsAssessmentResumeMessage = false;
                                    proctorMessage.AssessmentTimer = proctorMessage.InitialAssessmentTimerValue;
                                }
                            }
                        }

                        using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                        {
                            proctorMessage.ProctorMessageHeading = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingProctorMessage, brandCode, variant);
                            proctorMessage.ProctorMessageImageUrl = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageProctorMessage, brandCode, variant);
                            proctorMessage.ProctorMessageButtonText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingProctorMessageOkButton, brandCode, variant);

                            //----- start LCMS-4498 ----------
                            //proctorMessage.ProctorMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentProctorMessage, brandCode, variant);

                            if (isPreview == true)
                            {
                                //ICPTrackingService.LearnerStatistics[] learnerStatisticsPreview = null;
                                //learnerStatisticsPreview = (ICPTrackingService.LearnerStatistics[])System.Web.HttpContext.Current.Session["AssessmentEndStats"];
                                //if (learnerStatisticsPreview != null && learnerStatisticsPreview.Length > 0)
                                //{
                                //    lastAttemptNo = learnerStatisticsPreview[learnerStatisticsPreview.Length - 1].AssessmentAttemptNumber;
                                //}
                                //else
                                //{
                                //    lastAttemptNo = 0;
                                //}
                            }

                            string ProctorMessageText = string.Empty;
                            ProctorMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentProctorMessage, brandCode, variant);
                            
                            if (courseConfiguration.PostAssessmentConfiguration.MaxAttemptHandlerEnabled == false)
                            {
                                ProctorMessageText = ProctorMessageText.Replace("$PROCTORMESSAGENUMBEROFATTEMPTS", "");
                                //ProctorMessageText = ProctorMessageText.Replace("{1}", "unlimited");
                            }
                            else
                            {
                                ProctorMessageText = ProctorMessageText.Replace("$PROCTORMESSAGENUMBEROFATTEMPTS", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentProctorMessageNumberOfAttempts, brandCode, variant));
                                ProctorMessageText = AssessmentMaxAttemptText(ProctorMessageText, courseConfiguration.PostAssessmentConfiguration.MaximumNOAttempt);
                                ProctorMessageText = ProctorMessageText.Replace("{1}", NumberToWordConvertor.NumberToText(courseConfiguration.PostAssessmentConfiguration.MaximumNOAttempt, false, cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words0, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words1, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words2, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words3, brandCode, variant)).ToLower());
                            }

                            ProctorMessageText = ProctorMessageText.Replace("{0}", NumberToWordConvertor.NumberToText(lastAttemptNo + 1, true, cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words0, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words1, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words2, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words3, brandCode, variant)).ToLower());
                            

                            if (courseConfiguration.PostAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt.Equals(_360Training.BusinessEntities.AfterMaxFailAction.LockCourse))
                            {
                                ProctorMessageText = ProctorMessageText.Replace("{2}", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentActionLockCourse, brandCode, variant));
                            }                            
                            else if (courseConfiguration.PostAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt.Equals(_360Training.BusinessEntities.AfterMaxFailAction.ContinueCourse))
                            {
                                ProctorMessageText = ProctorMessageText.Replace("{2}", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentActionContinueContent, brandCode, variant));
                            }
                            else
                            {
                                ProctorMessageText = ProctorMessageText.Replace("{2}", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentActionRetakeContent, brandCode, variant));
                            }                           

                            if (proctorMessage.IsConfigurationModified)
                            {
                                // configuration re-published
                                ProctorMessageText = ProctorMessageText.Replace("$GOODLUCKTEXT", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentMustStartOverText, brandCode, variant));
                            }
                            else if (proctorMessage.IsAssessmentResumeMessage)
                            {
                                // resume case                                
                                ProctorMessageText = ProctorMessageText.Replace("$GOODLUCKTEXT", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentResumeText, brandCode, variant));
                            }
                            else
                            {
                                ProctorMessageText = ProctorMessageText.Replace("$GOODLUCKTEXT", "");
                            }

                            string allowPauseText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentProctorMessageAllowPauseResume, brandCode, variant);
                            if (courseConfiguration.PostAssessmentConfiguration.AllowPauseResumeAssessment
                                || System.Web.HttpContext.Current.Session["CourseLockedDuringAssessment"].ToString()=="True")
                            {
                                allowPauseText = "";
                            }
                            ProctorMessageText = ProctorMessageText.Replace("$ALLOWPAUSERESUME", allowPauseText);

                            if (!proctorMessage.IsAssessmentResumeMessage && !proctorMessage.IsConfigurationModified)
                            {
                                ProctorMessageText = ProctorMessageText.Replace("$BeginAssessment", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentProctorMessageBeginAssessment, brandCode, variant));
                               // ProctorMessageText = ProctorMessageText.Replace("$StartAssessment", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentProctorMessageStartAssessment, brandCode, variant));
                            }
                            else
                            {
                                ProctorMessageText = ProctorMessageText.Replace("$BeginAssessment", string.Empty);
                              //  ProctorMessageText = ProctorMessageText.Replace("$StartAssessment", string.Empty);
                            }

                            ///LCMS-10542 Begin-- Fahad Mukhtar
                            String assessmentMastery = GetMasteryText(BrandManager.ResourceKeyNames.PostAssessmentMasteryScoreAndNumberOfQuestionsText, brandCode, variant, cacheManager, SequenceItemType.PostAssessment);
                            // LCMS-11305 Start Waqas Zakai
                            assessmentMastery = assessmentMastery.Replace("<br/><br/>", "");
                            // LCMS-11305 END here
                            ProctorMessageText = ProctorMessageText.Replace("$MASTERYSCORETEXT", "<p class='sceneTextArea'>" + assessmentMastery + "</p>");
                            ///LCMS-10542 End-- Fahad Mukhtar

                            proctorMessage.ProctorMessageText = ProctorMessageText;
                            //--------------- end --------------
                            proctorMessage.LockoutClickAwayToActiveWindow = courseConfiguration.PostAssessmentConfiguration.Enabled && courseConfiguration.PostAssessmentConfiguration.LockoutFuntionalityClickAwayToActiveWindowEnable;

                        }
                        showProctorMessage.ProctorMessage = proctorMessage;
                        showProctorMessage.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowProctorMessage;
                        return this.LoadCourseApprovalAffidavit(showProctorMessage);                        
                        return this.SpecialPostAssessmentValidation(showProctorMessage);
                    }
                    else
                    {

                        ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide showSlide = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide();
                        ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset slideMediaAsset = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset();


                        //slideMediaAsset.IsJSPlayerEnabled = System.Configuration.ConfigurationManager.AppSettings["isJSPlayerEnabled"];
                        slideMediaAsset.IsJSPlayerEnabled = CheckForJSEnabledForCourse(Convert.ToString(courseID)); 

                        slideMediaAsset.MediaAssetID = sequenceItem.Item_GUID;
                        slideMediaAsset.MediaAssetType = SequenceItemTypeName.ContentAsset;
                        slideMediaAsset.MediaAssetSceneID = sequenceItem.SceneGUID;
                        slideMediaAsset.ContentObjectID = sequenceItem.ParentID;
                        slideMediaAsset.RemidiationMode = false;
                        slideMediaAsset.FlashSceneNo = "";
                        slideMediaAsset.FlashURL = "";
                        slideMediaAsset.IsMovieEnded = false;
                        slideMediaAsset.LastScene = "";
                        slideMediaAsset.NextButtonState = true;
                        slideMediaAsset.SceneDurationTimer = 0;
                        slideMediaAsset.ShowBookMark = false;
                        slideMediaAsset.IsAssessmentStartMessage = true;
                        slideMediaAsset.AllowSkipping = courseConfiguration.PostAssessmentConfiguration.AllowSkippingQuestion;
                        slideMediaAsset.EnableAllTOC = true;
                        slideMediaAsset.ShowGradeAssessment = !courseConfiguration.PostAssessmentConfiguration.ScoreAsYouGo;
                        slideMediaAsset.IsRestrictiveAssessmentEngine = courseConfiguration.PostAssessmentConfiguration.RestrictiveMode;
                        slideMediaAsset.LockoutClickAwayToActiveWindow = courseConfiguration.PostAssessmentConfiguration.Enabled && courseConfiguration.PostAssessmentConfiguration.LockoutFuntionalityClickAwayToActiveWindowEnable;
                        slideMediaAsset.LogOutText = logOuttext;

                        if (sequenceItem.SequenceItemType == SequenceItemType.Exam)
                        {
                            slideMediaAsset.ExamID = sequenceItem.ExamID;
                        }

                        #region Course Progress Bar
                        int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["currentindex"]);
                        string courseName = Convert.ToString(HttpContext.Current.Session["CourseName"]);
                        double percentageCourseProgress = 0;
                        {
                            try
                            {
                                int visitedSceneCount;
                                int totalSceneCount;
                                percentageCourseProgress = CalculateCourseProgressPercentageFromSequence(courseID, seqNo, Convert.ToInt32(System.Web.HttpContext.Current.Session["TotalNoOfViewableScenes"]), out visitedSceneCount, out totalSceneCount);

                                if (percentageCourseProgress > 0)
                                {
                                    slideMediaAsset.CourseProgressPercentage = Convert.ToInt32(Math.Round(percentageCourseProgress));
                                    slideMediaAsset.CourseProgressToolTip = GetToolTipForProgressBar(courseID, courseName, seqNo, totalSceneCount, visitedSceneCount);
                                }
                            }
                            catch (Exception exception)
                            {
                                ExceptionPolicyForLCMS.HandleException(exception, "ICPException");
                                slideMediaAsset.CourseProgressPercentage = 0;
                                slideMediaAsset.CourseProgressToolTip = string.Empty;
                            }
                        }
                        #endregion
                        if (courseConfiguration.PostAssessmentConfiguration.EnforceMaximumTimeLimit > 0)
                        {
                            slideMediaAsset.AssessmentTimer = courseConfiguration.PostAssessmentConfiguration.EnforceMaximumTimeLimit * 60;


                            // LCMS-9213
                            // ------------------------------------------------------------------------------

                            if ((System.Web.HttpContext.Current.Session["CourseLockedDuringAssessment"].ToString().Equals("True") ||  courseConfiguration.PostAssessmentConfiguration.AllowPauseResumeAssessment) && Convert.ToInt32(System.Web.HttpContext.Current.Session["SelectedQuestionSequenceNo"]) > 0)
                            {
                                int lastAssessmentTimeInSeconds =  trackingService.GetAssessmentTimeForAllSessions(learnerSessionID, LearnerStatisticsType.PostAssessment, 0, ExamID,
                                                                    HttpContext.Current.Session["RandomAlternateWithPauseResume"] != null ? "RANDOMALTERNATE" : ""
                                                            , HttpContext.Current.Session["RandomAlternateWithPauseResume"] != null ?assessmentCourseConfiguration.PostAssessmentConfiguration.ID:- 1);
                                slideMediaAsset.InitialAssessmentTimerValue = slideMediaAsset.AssessmentTimer;
                                if (lastAssessmentTimeInSeconds == -1)
                                {
                                    slideMediaAsset.IsConfigurationModified = true;
                                    slideMediaAsset.AssessmentTimer = slideMediaAsset.InitialAssessmentTimerValue; // -1;
                                }
                                else if (Convert.ToInt32(System.Web.HttpContext.Current.Session["SelectedQuestionSequenceNo"]) > 0)
                                {


                                    slideMediaAsset.IsAssessmentResumeMessage = true;
                                    slideMediaAsset.AssessmentTimer -= lastAssessmentTimeInSeconds;

                                    if (slideMediaAsset.AssessmentTimer <= 0)
                                    {
                                        slideMediaAsset.IsAssessmentResumeMessage = false;
                                        slideMediaAsset.AssessmentTimer = slideMediaAsset.InitialAssessmentTimerValue;
                                    }

                                    //// To check if assessment time was completely spent last time
                                    //// ------------------------------------------------------
                                    //if (slideMediaAsset.AssessmentTimer <= 0)
                                    //{
                                    //    slideMediaAsset.AssessmentTimer = 1;
                                    //}
                                    //// ------------------------------------------------------

                                }
                            }
                            // ------------------------------------------------------------------------------

                        }
                        else
                        {
                            slideMediaAsset.AssessmentTimer = -1;
                        }

                        string HTML = "";
                        string icpFileSystem = ConfigurationManager.AppSettings["ICPFileSystem"];
                        using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
                        {
                            courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                            courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                            HTML = courseService.GetSceneTemplateHTML(sequenceItem.SceneTemplateID).TemplateHTML;
                        }

                        using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                        {
                            StringBuilder sb = new StringBuilder(HTML);
                            string PostAssessmentText = "";
                            sb.Replace("$Heading", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PostAssessmentHeading, brandCode, variant));
                            sb.Replace("$VisualTop", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PostAssessmentImage, brandCode, variant));
                            // Changes Made by Waqas Zakai
                            // LCMS-4157
                            // START
                            if (isPreview == true)
                            {
                                //ICPTrackingService.LearnerStatistics[] learnerStatisticsPreview = null;
                                learnerStatisticsPreview = (ICPTrackingService.LearnerStatistics[])System.Web.HttpContext.Current.Session["AssessmentEndStats"];
                                if (learnerStatisticsPreview != null && learnerStatisticsPreview.Length > 0)
                                {
                                    lastAttemptNo = learnerStatisticsPreview[learnerStatisticsPreview.Length - 1].AssessmentAttemptNumber;
                                }
                                else
                                {
                                    lastAttemptNo = 0;
                                }
                            }
                            
                            PostAssessmentText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PostAssessmentText, brandCode, variant);
                            String PostAssessmentMasterScore = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PostAssessmentMasteryScoreAndNumberOfQuestionsText, brandCode, variant);
                            String PostAssessmentMaxAttemptHandlerText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PostAssessmentMaximumAttemptHandlerText, brandCode, variant);
                            String PostAssessmentGoodLuckText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PostAssessmentGoodLuckText, brandCode, variant);
                            /* Added For LCMS-9829*/
                            String PostAssessmentBeginInstrucitonsText=cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PostAssessmentBeginInstruction, brandCode, variant);

                            PostAssessmentMasterScore = PostAssessmentMasterScore.Replace("$NUMQUESTIONS", (System.Web.HttpContext.Current.Session["AssessmentItemList"] as ICPAssessmentService.AssessmentItem[]).Length.ToString());

                            if (courseConfiguration.PostAssessmentConfiguration.MaxAttemptHandlerEnabled == false)
                            {
                                PostAssessmentText = PostAssessmentText.Replace("$MAXATTEMPTHANDLERTEXT", "");
                                //PostAssessmentText = PostAssessmentText.Replace("This is your {0} attempt. This exam allows a maximum of {1} attempts after which {2}.  <br/>", "");
                                //PostAssessmentText = PostAssessmentText.Replace("{1}", "unlimited");
                                //PostAssessmentText = PostAssessmentText.Replace(cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentAttemptTextToRemove_Post, brandCode, variant), ".");
                            }
                            else
                            {
                                PostAssessmentMaxAttemptHandlerText = AssessmentMaxAttemptText(PostAssessmentMaxAttemptHandlerText, courseConfiguration.PostAssessmentConfiguration.MaximumNOAttempt);
                                PostAssessmentMaxAttemptHandlerText = PostAssessmentMaxAttemptHandlerText.Replace("{1}", NumberToWordConvertor.NumberToText(courseConfiguration.PostAssessmentConfiguration.MaximumNOAttempt, false, cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words0, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words1, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words2, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words3, brandCode, variant)).ToLower());
                                PostAssessmentMaxAttemptHandlerText = PostAssessmentMaxAttemptHandlerText.Replace("{0}", NumberToWordConvertor.NumberToText(lastAttemptNo + 1, true, cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words0, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words1, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words2, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words3, brandCode, variant)).ToLower());
                                if (courseConfiguration.PostAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt.Equals(AfterMaxFailAction.LockCourse))
                                {
                                    PostAssessmentMaxAttemptHandlerText = PostAssessmentMaxAttemptHandlerText.Replace("{2}", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PostAssessmentLockCourse, brandCode, variant));
                                }
                                else if ((courseConfiguration.PostAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt.Equals(AfterMaxFailAction.ContinueCourse)))
                                {
                                    PostAssessmentMaxAttemptHandlerText = PostAssessmentMaxAttemptHandlerText.Replace("{2}", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.POSTAssessmentContinueCourse, brandCode, variant));
                                }
                                else
                                {
                                    PostAssessmentMaxAttemptHandlerText = PostAssessmentMaxAttemptHandlerText.Replace("{2}", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PostAssessmentRetakeContent, brandCode, variant));
                                }
                                
                                PostAssessmentText = PostAssessmentText.Replace("$MAXATTEMPTHANDLERTEXT", PostAssessmentMaxAttemptHandlerText);
                            }


                            if (PostAssessmentMasterScore == null || PostAssessmentMasterScore.Trim().Length == 0)
                            {
                                PostAssessmentText = PostAssessmentText.Replace("$MASTERYSCORETEXT", "");
                            }
                            else
                            {                                
                                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                                PostAssessmentMasterScore = PostAssessmentMasterScore.Replace("$PassingRate", cacheManager.GetIFConfigurationExistInCache(courseConfigurationID).PostAssessmentConfiguration.MasteryScore.ToString());
                                PostAssessmentText = PostAssessmentText.Replace("$MASTERYSCORETEXT", PostAssessmentMasterScore);
                            }
                            /*
                            if (PostAssessmentMaxAttemptHandlerText == null || PostAssessmentMaxAttemptHandlerText.Trim().Length == 0)
                            {
                                PostAssessmentText = PostAssessmentText.Replace("$MAXATTEMPTHANDLERTEXT", "");
                            }
                            else
                            {
                                PostAssessmentText = PostAssessmentText.Replace("$MAXATTEMPTHANDLERTEXT", PostAssessmentMaxAttemptHandlerText);
                            }*/


                            // LCMS-9213
                            //---------------------------------------------------------

                            //if ((courseConfiguration.PostAssessmentConfiguration.EnforceMaximumTimeLimit > 0) && (slideMediaAsset.AssessmentTimer == -1))
                            if(slideMediaAsset.IsConfigurationModified)
                            {
                                // configuration re-published
                                PostAssessmentText = PostAssessmentText.Replace("$GOODLUCKTEXT", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentMustStartOverText, brandCode, variant));
                                PostAssessmentText = PostAssessmentText.Replace("$BEGININSTRUCTIONTEXT", "");
                                //HttpContext.Current.Session.Remove("askedAssessmentItemGUIDs");
                            }
                            else if (slideMediaAsset.IsAssessmentResumeMessage) // else if (!isPreview && HttpContext.Current.Session["askedAssessmentItemsAttributes"] != null && courseConfiguration.PostAssessmentConfiguration.AllowPauseResumeAssessment)
                            {
                                // resume case                                
                                PostAssessmentText = PostAssessmentText.Replace("$GOODLUCKTEXT", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentResumeText, brandCode, variant));
                                PostAssessmentText = PostAssessmentText.Replace("$BEGININSTRUCTIONTEXT", "");
                               // HttpContext.Current.Session.Remove("askedAssessmentItemGUIDs");
                            }
                            else
                            {
                                if (PostAssessmentGoodLuckText == null || PostAssessmentGoodLuckText.Trim().Length == 0)
                                {
                                    PostAssessmentText = PostAssessmentText.Replace("$GOODLUCKTEXT", "");
                                }
                                else
                                {
                                    PostAssessmentText = PostAssessmentText.Replace("$GOODLUCKTEXT", PostAssessmentGoodLuckText);
                                }
                                if (PostAssessmentBeginInstrucitonsText != null && PostAssessmentBeginInstrucitonsText.Trim().Length > 0)
                                {
                                    PostAssessmentText = PostAssessmentText.Replace("$BEGININSTRUCTIONTEXT", PostAssessmentBeginInstrucitonsText);
                                }
                                else
                                {
                                    PostAssessmentText = PostAssessmentText.Replace("$BEGININSTRUCTIONTEXT", "");
                                }
                            }

                            string allowPauseText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AllowPauseResumeAssessment, brandCode, variant);                                
                            if (courseConfiguration.PostAssessmentConfiguration.AllowPauseResumeAssessment
                                || System.Web.HttpContext.Current.Session["CourseLockedDuringAssessment"].ToString()=="True")
                            {
                                allowPauseText = "";
                            }
                            PostAssessmentText = PostAssessmentText.Replace("$ALLOWPAUSERESUME", allowPauseText);
                            //---------------------------------------------------------



                            sb.Replace("$Text", PostAssessmentText);
                            // Changes END
                            //int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                            //sb.Replace("$PassingRate", cacheManager.GetIFConfigurationExistInCache(courseID, source).PostAssessmentConfiguration.MasteryScore.ToString());


                            HTML = sb.ToString();
                        }

                        slideMediaAsset.TemplateHtml = HTML;
                        slideMediaAsset.TemplateHtml = slideMediaAsset.TemplateHtml.Replace("\n", "");

                        showSlide.MediaAsset = slideMediaAsset;
                        showSlide.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowSlide;
                        return this.LoadCourseApprovalAffidavit(showSlide);
                        return this.SpecialPostAssessmentValidation(showSlide);
                    }
                }
                else
                {
                    if (isNormalDirection)
                        return NextBack(courseID, 1);
                    return NextBack(courseID, -1);
                    //return CreateErrorMessage(courseID, "Unable to load assessment");

                }
            }
            else if (isPass || actionTaken == true)//for pass and when action is already taken
            {
               if(isNormalDirection)
                    return NextBack(courseID, 1);
                return NextBack(courseID, -1);
            }
            else
            {
                    
                switch (courseConfiguration.PostAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt)
                {
                    case AfterMaxFailAction.GoToNextLesson:
                        {
                            returnCommand = NextBack(courseID, 1);
                            actionTaken = true;
                            break;
                        }
                    case AfterMaxFailAction.RetakeCourse:
                        { //as there cannot be a retake in case of pre and post assessments
                            //returnCommand = NextBack(courseID, 1);
                            //actionTaken = true;
                            System.Web.HttpContext.Current.Session["CurrentIndex"] = 0;
                            int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["CurrentIndex"]);
                            sequenceItem = GetSequenceItem(courseID, seqNo);
                            //int contentObjectSeqNo = GetSequenceNoBySequenceItemID(courseID, sequenceItem.ParentID, null/*sequenceItem.SequenceItemType*/);
                            //sequenceItem = GetSequenceItem(courseID, contentObjectSeqNo);
                            returnCommand = LoadSequenceItemIntoCommand(courseID, seqNo, sequenceItem, true);

                            break;
                        }
                    case AfterMaxFailAction.LockCourse:
                        {
                            int learnerID = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerID"]);
                            int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
                            LockCourse(courseID, learnerID, enrollmentID, LockingReason.MaxAttemptReachPostAssessment);
                            returnCommand = CreateCourseLockedCommandObject(courseID, LockingReason.MaxAttemptReachPostAssessment);
                            actionTaken = true;
                            break;
                        }

                }
                //UpdateActionAfterFailingMaxAttempt(actionTaken, learnerStatisticsID);
            }


            return returnCommand;
        }

        ///LCMS-10542 Begin-- Fahad Mukhtar
        /// <summary>
        /// This method will return the mastery text for the provided exam
        /// </summary>
        /// <param name="resourceKeyName">Resource Key in Cache</param>
        /// <param name="brandCode">Brand Code string value</param>
        /// <param name="variant">variant string value</param>
        /// <param name="cacheManager">cacheManager object</param>
        /// <param name="examType">Exam Type from SequenceItemType</param>
        /// <returns>Mastrery Text in string</returns>
        private String GetMasteryText(string resourceKeyName, string brandCode, string variant, CacheManager.CacheManager cacheManager, string examType)
        {
            int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
            StringBuilder sbMastery = new StringBuilder(cacheManager.GetResourceValueByResourceKey(resourceKeyName, brandCode, variant));

            switch (examType)
            {
                case SequenceItemType.PreAssessment:
                    sbMastery.Replace("$PassingRate", cacheManager.GetIFConfigurationExistInCache(courseConfigurationID).PreAssessmentConfiguration.MasteryScore.ToString())
                    .Replace("$TOTALASSESSMENTS", (System.Web.HttpContext.Current.Session["AssessmentItemList"] as ICPAssessmentService.AssessmentItem[]).Length.ToString());
                    break;

                case SequenceItemType.PostAssessment:
                    sbMastery.Replace("$PassingRate", cacheManager.GetIFConfigurationExistInCache(courseConfigurationID).PostAssessmentConfiguration.MasteryScore.ToString())
                    .Replace("$NUMQUESTIONS", (System.Web.HttpContext.Current.Session["AssessmentItemList"] as ICPAssessmentService.AssessmentItem[]).Length.ToString());
                    break;

                case SequenceItemType.PracticeExam:
                    sbMastery.Replace("$PassingRate", cacheManager.GetIFConfigurationExistInCache(courseConfigurationID).PracticeAssessmentConfiguration.MasteryScore.ToString())
                    .Replace("$TOTALASSESSMENTS", (System.Web.HttpContext.Current.Session["AssessmentItemList"] as ICPAssessmentService.AssessmentItem[]).Length.ToString());
                    break;

                case SequenceItemType.Quiz:
                    sbMastery.Replace("$PassingRate", cacheManager.GetIFConfigurationExistInCache(courseConfigurationID).QuizConfiguration.MasteryScore.ToString())
                    .Replace("$TOTALASSESSMENTS", (System.Web.HttpContext.Current.Session["AssessmentItemList"] as ICPAssessmentService.AssessmentItem[]).Length.ToString());
                    break;
            }            

            return sbMastery.ToString();
        }
        ///LCMS-10542 Begin-- Fahad Mukhtar


        /// <summary>
        /// This method creates appropriate command according to policy, whenever the course pointer reaches to Practice Assessment marker
        /// </summary>
        /// <param name="courseID">CourseId integer value</param>
        /// <param name="contentObjectID">ContentObjectID integer value, represent the ContentObjectId whose Practice Exam is to be run</param>
        /// <returns>Any communication command object based on policy.</returns>
        private object StartOrContinuePracticeExam(int courseID, int contentObjectID, ICP4.BusinessLogic.ICPCourseService.SequenceItem sequenceItem, bool isNormalDirection, int ExamID)
        {
            //#region Allow Review course After completion

            //using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            //{
            //    int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
            //    int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
            //    ICPCourseService.CourseConfiguration courseConfigurations = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);
            //    if (Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsCourseCompleted"]) == true &&
            //        courseConfigurations.PlayerAllowUserToReviewCourseAfterCompletion == true)
            //    {
            //        if (isNormalDirection == true)
            //            return NextBack(courseID, 1);
            //        else
            //            return NextBack(courseID, -1);
            //    }

            //}
           

            //#endregion
            bool loaded = true;
            string learnerSessionID = System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
            ICPCourseService.CourseConfiguration courseConfiguration = GetCourseConfiguration(Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]));
            int lastAttemptNo = 0;
            bool isPass = false;
            bool isPassPauseResume = false; //Yasin LCMS-12401
            object returnCommand = new object();
            bool actionTaken = false;
            long learnerStatisticsID = 0;
            int lastRemediationCount = 0;
            string brandCode;//Abdus Samad LCMS-11998
            string variant;//Abdus Samad LCMS-11998
            string logOuttext = string.Empty; //Abdus Samad LCMS-11998
            int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["CurrentIndex"]);
            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["isPreview"]);
            ICPCourseService.SequenceItem sequenceItemForTracking = GetSequenceItem(courseID, seqNo);

            ICP4.BusinessLogic.ICPCourseService.AssessmentConfiguration assessmentCourseConfiguration = new ICP4.BusinessLogic.ICPCourseService.AssessmentConfiguration();
            assessmentCourseConfiguration = (ICP4.BusinessLogic.ICPCourseService.AssessmentConfiguration)System.Web.HttpContext.Current.Session["PracticeExamAssessmentConfiguration"];
            
            ICPCourseService.AssessmentConfiguration PracticeAssessmentConfiguration = new ICPCourseService.AssessmentConfiguration();            
            PracticeAssessmentConfiguration = GetAssessmentConfiguration(ExamID);

            if (System.Web.HttpContext.Current.Session["PracticeExamAssessmentConfiguration"] == null)
            {
                System.Web.HttpContext.Current.Session["PracticeExamAssessmentConfiguration"] = PracticeAssessmentConfiguration;
            }
            else
            {
                System.Web.HttpContext.Current.Session.Remove("PracticeExamAssessmentConfiguration");
                System.Web.HttpContext.Current.Session["PracticeExamAssessmentConfiguration"] = PracticeAssessmentConfiguration;
            }

            if (PracticeAssessmentConfiguration.MaximumNOAttempt == 0)
            {
                return NextBack(courseID, 1);
            }

            //Translation is required at this point because namespace of AssessmentServices are different from CourseServices
            //assessmentCourseConfiguration = TranslateCourseServiceConfigrationToAssessmentServiceConfiguration(courseConfiguration);

            ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();
            trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
            trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

            ICPTrackingService.LearnerStatistics[] learnerStatistics = null;
            ICPTrackingService.LearnerStatistics[] learnerStatisticsPreview = null;
            if (isPreview)
            {
                learnerStatisticsPreview = (ICPTrackingService.LearnerStatistics[])System.Web.HttpContext.Current.Session["AssessmentEndStats"];
                if (learnerStatisticsPreview != null && learnerStatisticsPreview.Length > 0)
                {
                    lastAttemptNo = learnerStatisticsPreview[learnerStatisticsPreview.Length - 1].AssessmentAttemptNumber;
                }
                else
                {
                    lastAttemptNo = 0;
                }
            }
            else
            {       //////////////////////////////////////// Yasin /////////////////////////////////////////////////////////////////////
                
                //learnerStatistics = trackingService.GetPracticeExamResult(learnerSessionID, "8CF29101-C19A-4A8D-9C27-58043FA330DC");
                
               
                learnerStatistics = trackingService.GetPracticeExamResult(learnerSessionID, sequenceItemForTracking.Item_GUID);
                GetLastAssessmentResult(learnerStatistics, PracticeAssessmentConfiguration.MasteryScore, out isPass, out lastAttemptNo, out actionTaken, out learnerStatisticsID, out lastRemediationCount);
                isPassPauseResume = isPass; //Yasin ali LCMS-12401
                isPass = false;
            }      //////////////////////////////////////// Yasin /////////////////////////////////////////////////////////////////////
            //ICPCourseService.SequenceItem sequenceItemForTracking = GetSequenceItem(courseID, seqNo);
            //learnerStatistics = trackingService.GetPracticeExamResult(learnerSessionID, sequenceItemForTracking.Item_GUID);
            
            if (lastAttemptNo>=PracticeAssessmentConfiguration.MaximumNOAttempt && PracticeAssessmentConfiguration.ScoreType.ToUpper().Equals(ScoreType.NoResults.ToUpper()))
            {
                if (isNormalDirection == true)
                    return NextBack(courseID, 1);
                else
                    return NextBack(courseID, -1);

            }

            int remediationCount = 0; //CalculateAssessmentRemediationCount(lastRemediationCount, PracticeAssessmentConfiguration.MaximumNOAttempt, lastAttemptNo);            
            System.Web.HttpContext.Current.Session["AssessmentRemediatonCount"] = remediationCount;
            
            if (PracticeAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt == AfterMaxFailAction.RetakeCourse)
            {
                if (PracticeAssessmentConfiguration.MaximumNOAttempt == lastAttemptNo && !isPass)
                {
                    lastAttemptNo = 0;
                }
                else if (PracticeAssessmentConfiguration.MaximumNOAttempt < lastAttemptNo && !isPass)
                {
                    lastAttemptNo = lastAttemptNo % PracticeAssessmentConfiguration.MaximumNOAttempt;
                }
            }
            //---------------------------------------
            HttpContext.Current.Session["LastAssessmentAttemptNo"] = lastAttemptNo + 1;


            //This is a temporary fix for LCMS-2025 and must be replaced in future builds///
            
            if (isPreview == true)
            {
                //List<string> askedAssessments = (List<string>)System.Web.HttpContext.Current.Session["AskedAssessments"];
                List<string> askedAssessments = null;
                if (askedAssessments != null)
                {

                    // Condition replaced for LCMS-2869
                    // 
                    //
                    //if ((((askedAssessments.Contains(sequenceItemForTracking.Item_GUID)) && (askedAssessments.Contains("PostAssessment")))) || (((askedAssessments.Contains(sequenceItemForTracking.Item_GUID)) && (!courseConfiguration.QuizRefreshMaxAttemptOnRetake))))
                    if (askedAssessments.Contains(sequenceItemForTracking.Item_GUID))
                        if (isNormalDirection)
                        {
                            return NextBack(courseID, 1);
                        }
                        else
                        {
                            return NextBack(courseID, -1);
                        }
                }
            }

            //Abdus Samad LCMS-11998
            //Start
            if (PracticeAssessmentConfiguration.AllowPauseResumeAssessment)
            {
                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {
                    brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                    variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                    if (cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentLogOutTextPractiseExam, brandCode, variant) != null)
                    {
                        logOuttext = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentLogOutTextPractiseExam, brandCode, variant);
                    }

                }
            }

            else
            {
                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {
                    brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                    variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                    if (cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentLogOutTextPractiseExam, brandCode, variant) != null)
                    {
                        logOuttext = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentLogOutPauseResumeOffPractiseExam, brandCode, variant);
                    }

                }
            
            
            }
            //Stop


            ///////////////////////////////////////Yasin////////////////////////////////////////
            int totalQuestions = 0;
            if (!isPreview && learnerStatistics != null && learnerStatistics.Length > 0)
            {
                int noAnswerCorrect = learnerStatistics[learnerStatistics.Length - 1].NumberAnswersCorrect;
                int noAnswerIncorrect = learnerStatistics[learnerStatistics.Length - 1].NumberAnswersIncorrect;
                totalQuestions = noAnswerCorrect + noAnswerIncorrect;
            }
            ////////////////////////////////////// Yasin /////////////////////////////////////////////
            if ( (PracticeAssessmentConfiguration.MaximumNOAttempt > lastAttemptNo && !isPass) || (!isPass && !PracticeAssessmentConfiguration.MaxAttemptHandlerEnabled) )
            {
                using (AssessmentManager.AssessmentManager assessmentManager = new ICP4.BusinessLogic.AssessmentManager.AssessmentManager())
                {
                    loaded = assessmentManager.LoadPracticeExamIntoSession(courseID, learnerSessionID, TranslateCourseServiceAssessmentConfigurationToAssessmentServiceAssessmentConfiguration(PracticeAssessmentConfiguration), LearnerStatisticsType.PracticeExam, contentObjectID, ExamID, totalQuestions);
                }

                if (loaded)
                {

                    brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                    variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                    //using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                    //{
                    //    courseConfiguration = cacheManager.GetIFConfigurationExistInCache(courseID);
                    //    ICPCourseService.SequenceItem sequnceItem = cacheManager.GetRequestedItemFromQueue(courseID, seqNo);
                    //    if (sequnceItem.IsValidQuiz == false)
                    //        sequnceItem.IsValidQuiz = true;

                    //}

                    if (PracticeAssessmentConfiguration.ProctoredAssessment)
                    {
                        ICP4.CommunicationLogic.CommunicationCommand.ShowProctorMessage.ShowProctorMessage showProctorMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowProctorMessage.ShowProctorMessage();
                        ICP4.CommunicationLogic.CommunicationCommand.ShowProctorMessage.ProctorMessage proctorMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowProctorMessage.ProctorMessage();

                        proctorMessage.IsRestrictiveAssessmentEngine = PracticeAssessmentConfiguration.RestrictiveMode;
                        proctorMessage.AllowSkipping = PracticeAssessmentConfiguration.AllowSkippingQuestion;
                        proctorMessage.LogOutText = logOuttext; //Abdus Samad LCMS-11998

                        if (PracticeAssessmentConfiguration.EnforceMaximumTimeLimit > 0)
                        {
                            proctorMessage.AssessmentTimer = PracticeAssessmentConfiguration.EnforceMaximumTimeLimit * 60;
                        }
                        else
                        {
                            proctorMessage.AssessmentTimer = -1;
                        }
                        if (PracticeAssessmentConfiguration.ScoreAsYouGo)
                        {
                            proctorMessage.ShowGradeAssessment = false;
                        }
                        else
                        {
                            proctorMessage.ShowGradeAssessment = true;
                        }

                        //Abdus Samad
                        //LCMS-11998
                        //START
                        if (PracticeAssessmentConfiguration.AllowPauseResumeAssessment)
                        {
                            proctorMessage.IsAssessmentResumeMessage = true;
                        }
                        else
                        {
                            proctorMessage.IsAssessmentResumeMessage = false;
                        }
                        //STOP
                        
                        ///////////////////////////////// Yasin/////////////////////////////////////////

                        if ((PracticeAssessmentConfiguration.AllowPauseResumeAssessment && System.Web.HttpContext.Current.Session["SelectedQuestionSequenceNo"] != null && Convert.ToInt32(System.Web.HttpContext.Current.Session["SelectedQuestionSequenceNo"]) > 0) && !isPassPauseResume)
                        {

                            int lastAssessmentTimeInSeconds = trackingService.GetAssessmentTimeForAllSessions(learnerSessionID, LearnerStatisticsType.PracticeExam, contentObjectID, ExamID,
                                                            HttpContext.Current.Session["RandomAlternateWithPauseResume"] != null ? "RANDOMALTERNATE" : ""
                                                            , HttpContext.Current.Session["RandomAlternateWithPauseResume"] != null ? assessmentCourseConfiguration.ID : -1);
                            proctorMessage.InitialAssessmentTimerValue = proctorMessage.AssessmentTimer;
                            if (lastAssessmentTimeInSeconds == -1)
                            {
                                proctorMessage.IsConfigurationModified = true;
                                proctorMessage.AssessmentTimer = proctorMessage.InitialAssessmentTimerValue; // -1;
                            }
                            else if (Convert.ToInt32(System.Web.HttpContext.Current.Session["SelectedQuestionSequenceNo"]) > 0)
                            {

                                proctorMessage.IsAssessmentResumeMessage = true;
                                proctorMessage.AssessmentTimer -= lastAssessmentTimeInSeconds;

                                if (proctorMessage.AssessmentTimer <= 0)
                                {
                                    proctorMessage.IsAssessmentResumeMessage = false;
                                    proctorMessage.AssessmentTimer = proctorMessage.InitialAssessmentTimerValue;
                                }
                            }
                        }
                        ///////////////////////////////////////////////////////////////// Yasin////////////////////////////////////////////////////

                        using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                        {
                            //proctorMessage.ProctorMessageHeading = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingProctorMessage, brandCode, variant);
                            proctorMessage.ProctorMessageHeading = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingPracticeExamProctorMessage, brandCode, variant);
                            proctorMessage.ProctorMessageImageUrl = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageProctorMessage, brandCode, variant);
                            proctorMessage.ProctorMessageButtonText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingProctorMessageOkButton, brandCode, variant);

                            //----- start LCMS-4498 ----------
                            //proctorMessage.ProctorMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentProctorMessage, brandCode, variant);

                            //if (isPreview == true)
                            //{
                            //    ICPTrackingService.LearnerStatistics[] learnerStatisticsPreview = null;
                            //    learnerStatisticsPreview = (ICPTrackingService.LearnerStatistics[])System.Web.HttpContext.Current.Session["AssessmentEndStats"];
                            //    if (learnerStatisticsPreview != null && learnerStatisticsPreview.Length > 0)
                            //    {
                            //        lastAttemptNo = learnerStatisticsPreview[learnerStatisticsPreview.Length - 1].AssessmentAttemptNumber;
                            //    }
                            //    else
                            //    {
                            //        lastAttemptNo = 0;
                            //    }
                            //}
                            string ProctorMessageText = string.Empty;
                            ProctorMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentProctorMessage, brandCode, variant);

                            if (PracticeAssessmentConfiguration.MaxAttemptHandlerEnabled == false)
                            {
                                ProctorMessageText = ProctorMessageText.Replace("$PROCTORMESSAGENUMBEROFATTEMPTS", "");
                                //ProctorMessageText = ProctorMessageText.Replace("{1}", "unlimited");
                            }
                            else
                            {
                                ProctorMessageText = ProctorMessageText.Replace("$PROCTORMESSAGENUMBEROFATTEMPTS", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentProctorMessageNumberOfAttempts, brandCode, variant));
                                ProctorMessageText = AssessmentMaxAttemptText(ProctorMessageText, PracticeAssessmentConfiguration.MaximumNOAttempt);
                                ProctorMessageText = ProctorMessageText.Replace("{1}", NumberToWordConvertor.NumberToText(PracticeAssessmentConfiguration.MaximumNOAttempt, false, cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words0, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words1, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words2, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words3, brandCode, variant)).ToLower());
                            }

                            ProctorMessageText = ProctorMessageText.Replace("{0}", NumberToWordConvertor.NumberToText(lastAttemptNo + 1, true, cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words0, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words1, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words2, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words3, brandCode, variant)).ToLower());

                            if (PracticeAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt.Equals(_360Training.BusinessEntities.AfterMaxFailAction.GoToNextLesson))
                            {
                                ProctorMessageText = ProctorMessageText.Replace("{2}", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentActionGoToNextLesson, brandCode, variant));
                            }
                            else if (PracticeAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt.Equals(_360Training.BusinessEntities.AfterMaxFailAction.LockCourse))
                            {
                                ProctorMessageText = ProctorMessageText.Replace("{2}", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentActionLockCourse, brandCode, variant));
                            }
                            ProctorMessageText = ProctorMessageText.Replace("$BeginAssessment", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentProctorMessageBeginAssessment, brandCode, variant));
                            ProctorMessageText = ProctorMessageText.Replace("$ALLOWPAUSERESUME", "");
                            
                            //Abdus Samad 
                            //LCMS-11998
                            //START
                            if (PracticeAssessmentConfiguration.AllowPauseResumeAssessment)
                            {
                                string allowPauseText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentResumeText, brandCode, variant);
                                ProctorMessageText = ProctorMessageText.Replace("$ALLOWPAUSERESUME", allowPauseText);
                            }
                            else
                            {

                                ProctorMessageText = ProctorMessageText.Replace("$ALLOWPAUSERESUME", "");
                            }
                            //STOP

                            ///LCMS-10542 Begin-- Fahad Mukhtar
                            ProctorMessageText = ProctorMessageText.Replace("$MASTERYSCORETEXT", "");
                            ///LCMS-10542 End-- Fahad Mukhtar

                            




                            proctorMessage.ProctorMessageText = ProctorMessageText;
                            //--------------- end --------------
                        }

                        showProctorMessage.ProctorMessage = proctorMessage;
                        showProctorMessage.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowProctorMessage;
                        returnCommand = showProctorMessage;

                    }
                    else
                    {

                        //ICP4.CommunicationLogic.CommunicationCommand.ShowStartAssessment.ShowStartAssessment showStartAssessment = new ICP4.CommunicationLogic.CommunicationCommand.ShowStartAssessment.ShowStartAssessment();
                        //ICP4.CommunicationLogic.CommunicationCommand.ShowStartAssessment.StartAssessmentMessage startAssessmentMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowStartAssessment.StartAssessmentMessage();


                        //startAssessmentMessage.AllowSkipping = courseConfiguration.QuizAllowSkippingQuestion;

                        //if (courseConfiguration.QuizEnforceMaximumTimeLimit > 0)
                        //{
                        //    startAssessmentMessage.AssessmentTimer = courseConfiguration.QuizEnforceMaximumTimeLimit * 60;
                        //}
                        //else
                        //{
                        //    startAssessmentMessage.AssessmentTimer = -1;
                        //}
                        //using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                        //{
                        //    startAssessmentMessage.StartupHeading = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingStartAssessment, brandCode, variant);
                        //    startAssessmentMessage.StartupMessage = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentStartAssessment, brandCode, variant);
                        //    startAssessmentMessage.StartupImageUrl = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageStartAssessment, brandCode, variant);
                        //    startAssessmentMessage.ButtonText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingStartAssessmentButton, brandCode, variant);
                        //}
                        //showStartAssessment.StartAssessmentMessage = startAssessmentMessage;
                        //showStartAssessment.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowStartAssessment;
                        //returnCommand = showStartAssessment;

                        ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide showSlide = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide();
                        ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset slideMediaAsset = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset();


                       // slideMediaAsset.IsJSPlayerEnabled = System.Configuration.ConfigurationManager.AppSettings["isJSPlayerEnabled"];
                          slideMediaAsset.IsJSPlayerEnabled = CheckForJSEnabledForCourse(Convert.ToString(courseID)); 

                        ICPAssessmentService.AssessmentItem[] assessmentItems = null;
                        assessmentItems = (ICPAssessmentService.AssessmentItem[])System.Web.HttpContext.Current.Session["AssessmentItemList"];

                        slideMediaAsset.MediaAssetID = sequenceItem.Item_GUID;
                        slideMediaAsset.MediaAssetType = SequenceItemTypeName.ContentAsset;
                        slideMediaAsset.MediaAssetSceneID = sequenceItem.SceneGUID;
                        slideMediaAsset.ContentObjectID = sequenceItem.ParentID;
                        slideMediaAsset.RemidiationMode = false;
                        slideMediaAsset.FlashSceneNo = "";
                        slideMediaAsset.FlashURL = "";
                        slideMediaAsset.IsMovieEnded = false;
                        slideMediaAsset.LastScene = "";
                        slideMediaAsset.NextButtonState = true;
                        slideMediaAsset.SceneDurationTimer = 0;
                        slideMediaAsset.ShowBookMark = false;
                        slideMediaAsset.IsAssessmentStartMessage = true;
                        slideMediaAsset.AllowSkipping = PracticeAssessmentConfiguration.AllowSkippingQuestion;
                        slideMediaAsset.ShowGradeAssessment = !PracticeAssessmentConfiguration.ScoreAsYouGo;
                        slideMediaAsset.IsRestrictiveAssessmentEngine = PracticeAssessmentConfiguration.RestrictiveMode;
                        slideMediaAsset.LogOutText = logOuttext;//Abdus Samad LCMS-11998
                      //  slideMediaAsset.IsAssessmentResumeMessage = PracticeAssessmentConfiguration.AllowPauseResumeAssessment;//Abdus Samad LCMS-11998

                        //This value has been hard coded for Testing Purpose By Abdus Samad LCMS-11998
                        //slideMediaAsset.IsConfigurationModified = false;

                        //if (slideMediaAsset.IsConfigurationModified)
                        //{
                        //    slideMediaAsset.IsAssessmentResumeMessage = false;
                        //}



                        if (sequenceItem.SequenceItemType == SequenceItemType.Exam)
                        {
                            slideMediaAsset.ExamID = sequenceItem.ExamID;
                        }

                        #region Course Progress Bar
                        //int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["currentindex"]);
                        string courseName = Convert.ToString(HttpContext.Current.Session["CourseName"]);
                        double percentageCourseProgress = 0;
                        {
                            try
                            {
                                int visitedSceneCount;
                                int totalSceneCount;
                                percentageCourseProgress = CalculateCourseProgressPercentageFromSequence(courseID, seqNo, Convert.ToInt32(System.Web.HttpContext.Current.Session["TotalNoOfViewableScenes"]), out visitedSceneCount, out totalSceneCount);

                                if (percentageCourseProgress > 0)
                                {
                                    slideMediaAsset.CourseProgressPercentage = Convert.ToInt32(Math.Round(percentageCourseProgress));
                                    slideMediaAsset.CourseProgressToolTip = GetToolTipForProgressBar(courseID, courseName, seqNo, totalSceneCount, visitedSceneCount);
                                }
                            }
                            catch (Exception exception)
                            {
                                ExceptionPolicyForLCMS.HandleException(exception, "ICPException");
                                slideMediaAsset.CourseProgressPercentage = 0;
                                slideMediaAsset.CourseProgressToolTip = string.Empty;
                            }
                        }
                        #endregion

                        if (PracticeAssessmentConfiguration.EnforceMaximumTimeLimit > 0)
                        {
                            slideMediaAsset.AssessmentTimer = PracticeAssessmentConfiguration.EnforceMaximumTimeLimit * 60;

                            ///////////////////////////////////////////////////////////////// Yasin////////////////////////////////////////////////////
                            if ((PracticeAssessmentConfiguration.AllowPauseResumeAssessment) && Convert.ToInt32(System.Web.HttpContext.Current.Session["SelectedQuestionSequenceNo"]) > 0 && !isPassPauseResume)
                            {
                                int lastAssessmentTimeInSeconds = trackingService.GetAssessmentTimeForAllSessions(learnerSessionID, LearnerStatisticsType.PracticeExam, contentObjectID, ExamID,
                                                                    HttpContext.Current.Session["RandomAlternateWithPauseResume"] != null ? "RANDOMALTERNATE" : ""
                                                            , HttpContext.Current.Session["RandomAlternateWithPauseResume"] != null ? assessmentCourseConfiguration.ID : -1);
                                slideMediaAsset.InitialAssessmentTimerValue = slideMediaAsset.AssessmentTimer;
                                if (lastAssessmentTimeInSeconds == -1)
                                {
                                    slideMediaAsset.IsConfigurationModified = true;
                                    slideMediaAsset.AssessmentTimer = slideMediaAsset.InitialAssessmentTimerValue; // -1;
                                }
                                else if (Convert.ToInt32(System.Web.HttpContext.Current.Session["SelectedQuestionSequenceNo"]) > 0)
                                {


                                    slideMediaAsset.IsAssessmentResumeMessage = true;
                                    slideMediaAsset.AssessmentTimer -= lastAssessmentTimeInSeconds;

                                    if (slideMediaAsset.AssessmentTimer <= 0)
                                    {
                                        slideMediaAsset.IsAssessmentResumeMessage = false;
                                        slideMediaAsset.AssessmentTimer = slideMediaAsset.InitialAssessmentTimerValue;
                                    }

                                    //// To check if assessment time was completely spent last time
                                    //// ------------------------------------------------------
                                    //if (slideMediaAsset.AssessmentTimer <= 0)
                                    //{
                                    //    slideMediaAsset.AssessmentTimer = 1;
                                    //}
                                    //// ------------------------------------------------------

                                }
                            }

                            ///////////////////////////////////////////////////////////////// Yasin////////////////////////////////////////////////////
                        }
                        else
                        {
                            slideMediaAsset.AssessmentTimer = -1;
                        }

                        string HTML = "";
                        string icpFileSystem = ConfigurationManager.AppSettings["ICPFileSystem"];
                        using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
                        {
                            courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                            courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                            HTML = courseService.GetSceneTemplateHTML(sequenceItem.SceneTemplateID).TemplateHTML;
                        }
                        using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                        {
                            StringBuilder sb = new StringBuilder(HTML);
                            string PracticeExamText = "";
                            sb.Replace("$Heading", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PracticeExamHeading , brandCode, variant));
                            sb.Replace("$VisualTop", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PracticeExamImage , brandCode, variant));
                            //sb.Replace("Begin Lesson Assessment", "Begin Practice Exam");
                            // Changes made by Waqas Zakai
                            // LCMS-4157
                            // START
                            //if (isPreview == true)
                            //{
                            //    ICPTrackingService.LearnerStatistics[] learnerStatisticsPreview = null;
                            //    learnerStatisticsPreview = (ICPTrackingService.LearnerStatistics[])System.Web.HttpContext.Current.Session["AssessmentEndStats"];
                            //    if (learnerStatisticsPreview != null && learnerStatisticsPreview.Length > 0)
                            //    {
                            //        lastAttemptNo = learnerStatisticsPreview[learnerStatisticsPreview.Length - 1].AssessmentAttemptNumber;
                            //    }
                            //    else
                            //    {
                            //        lastAttemptNo = 0;
                            //    }
                            //}
                            PracticeExamText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PracticeExamText, brandCode, variant);
                            String PracticeExamMasteryScoreText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PracticeExamMasteryScoreAndNumberOfQuestionsText, brandCode, variant);
                            String PracticeExamMaxAttemptHandlerText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PracticeExamMaximumAttemptHandlerText, brandCode, variant);
                            String PracticeExamGoodLuckText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PracticeExamGoodLuckText, brandCode, variant);

                            if (PracticeAssessmentConfiguration.AllowPauseResumeAssessment)
                            {
                                PracticeExamText = PracticeExamText.Replace("{0}", " ");
                            }
                            else
                            {
                                string PracticeExamTextPauseResumeoff = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PracticeExamTextPauseResumeOFF, brandCode, variant);
                                PracticeExamText = PracticeExamText.Replace("{0}", PracticeExamTextPauseResumeoff);
                            }

                            if (PracticeAssessmentConfiguration.MaxAttemptHandlerEnabled == false)
                            {
                                //PracticeExamText = PracticeExamText.Replace("<p class=\"sceneTextArea\">This is your $ATTEMPTNUMBER attempt. This exam allows a maximum of $ATTEMPTEDNUMBER attempts after which $ACTIONMESSAGE</p>", "");
                                PracticeExamText = PracticeExamText.Replace("$MAXATTEMPTHANDLERTEXT", "");
                                //PracticeExamText = PracticeExamText.Replace("$ATTEMPTEDNUMBER", "unlimited");
                                //PracticeExamText = PracticeExamText.Replace(cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentAttemptTextToRemove, brandCode, variant), ".");

                            }
                            else
                            {
                                PracticeExamMaxAttemptHandlerText = AssessmentMaxAttemptText(PracticeExamMaxAttemptHandlerText, PracticeAssessmentConfiguration.MaximumNOAttempt);
                                PracticeExamMaxAttemptHandlerText = PracticeExamMaxAttemptHandlerText.Replace("$ATTEMPTEDNUMBER", NumberToWordConvertor.NumberToText(PracticeAssessmentConfiguration.MaximumNOAttempt, false, cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words0, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words1, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words2, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words3, brandCode, variant)).ToLower());
                                PracticeExamMaxAttemptHandlerText = PracticeExamMaxAttemptHandlerText.Replace("$ATTEMPTNUMBER", NumberToWordConvertor.NumberToText(lastAttemptNo + 1, true, cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words0, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words1, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words2, brandCode, variant), cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NumberToText_words3, brandCode, variant)).ToLower());

                                if (PracticeAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt.Equals(AfterMaxFailAction.GoToNextLesson))
                                {
                                    PracticeExamMaxAttemptHandlerText = PracticeExamMaxAttemptHandlerText.Replace("$ACTIONMESSAGE", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PracticeExamGoToNextLesson, brandCode, variant));
                                }
                                else if (PracticeAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt.Equals(AfterMaxFailAction.LockCourse))
                                {
                                    PracticeExamMaxAttemptHandlerText = PracticeExamMaxAttemptHandlerText.Replace("$ACTIONMESSAGE", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.PracticeExamLockCourse, brandCode, variant));
                                }
                                PracticeExamText = PracticeExamText.Replace("$MAXATTEMPTHANDLERTEXT", PracticeExamMaxAttemptHandlerText);
                            }

                            if (PracticeExamMasteryScoreText == null || PracticeExamMasteryScoreText.Trim().Length == 0)
                            {
                                PracticeExamText = PracticeExamText.Replace("$MASTERYSCORETEXT", "");
                            }
                            else
                            {                                
                                PracticeExamMasteryScoreText = PracticeExamMasteryScoreText.Replace("$PassingRate", PracticeAssessmentConfiguration.MasteryScore.ToString());
                                PracticeExamMasteryScoreText = PracticeExamMasteryScoreText.Replace("$TOTALASSESSMENTS", assessmentItems.Length.ToString());
                                PracticeExamText = PracticeExamText.Replace("$MASTERYSCORETEXT", PracticeExamMasteryScoreText);
                            }

                            /*
                            if (PracticeExamMaxAttemptHandlerText == null || PracticeExamMaxAttemptHandlerText.Trim().Length == 0)
                            {
                                PracticeExamText = PracticeExamText.Replace("$MAXATTEMPTHANDLERTEXT", "");
                            }
                            else
                            {
                                PracticeExamText = PracticeExamText.Replace("$MAXATTEMPTHANDLERTEXT", PracticeExamMaxAttemptHandlerText);
                            }
                            */


                            //Abdus Samad
                            //lCMS-11998
                            //START
                            if (slideMediaAsset.IsConfigurationModified)
                            {
                                // configuration re-published
                                PracticeExamText = PracticeExamText.Replace("$GOODLUCKTEXT", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentMustStartOverText, brandCode, variant));
                                PracticeExamText = PracticeExamText.Replace("$BEGININSTRUCTIONTEXT", "");
                                //HttpContext.Current.Session.Remove("askedAssessmentItemGUIDs");
                            }


                            else if (slideMediaAsset.IsAssessmentResumeMessage)
                            {

                                string allowPauseText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AssessmentResumeText, brandCode, variant);

                                // resume case                                
                                PracticeExamText = PracticeExamText.Replace("$GOODLUCKTEXT", allowPauseText);
                                PracticeExamText = PracticeExamText.Replace("$BEGININSTRUCTIONTEXT", "");


                            }
                            //STOP

                            else
                            {


                                if (PracticeExamGoodLuckText == null || PracticeExamGoodLuckText.Trim().Length == 0)
                                {
                                    PracticeExamText = PracticeExamText.Replace("$GOODLUCKTEXT", "");
                                }
                                else
                                {
                                    PracticeExamText = PracticeExamText.Replace("$GOODLUCKTEXT", PracticeExamGoodLuckText);
                                }
                            }

                            sb.Replace("$Text", PracticeExamText);
                            // Changes END                            
                            //sb.Replace("$PassingRate", PracticeAssessmentConfiguration.MasteryScore.ToString());
                            //sb.Replace("$TOTALASSESSMENTS", assessmentItems.Length.ToString());

                            HTML = sb.ToString();
                        }

                        slideMediaAsset.TemplateHtml = HTML;
                        slideMediaAsset.TemplateHtml = slideMediaAsset.TemplateHtml.Replace("\n", "");

                        showSlide.MediaAsset = slideMediaAsset;
                        showSlide.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowSlide;
                        System.Web.HttpContext.Current.Session["IsAssessmentStarting"] = true;

                        //System.Diagnostics.Trace.WriteLine(" IsAssessmentStarting Start End");
                        //System.Diagnostics.Trace.Flush();


                        returnCommand = showSlide;
                    }
                }
                else
                {
                    if (isNormalDirection)
                        return NextBack(courseID, 1);
                    return NextBack(courseID, -1);

                }
            }
            else if (isPass || actionTaken == true)//for pass and when action is already taken
            {
                if (isNormalDirection)
                    return NextBack(courseID, 1);
                return NextBack(courseID, -1);
            }
            else
            {
                switch (PracticeAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt)
                {
                    case AfterMaxFailAction.GoToNextLesson:
                        {
                            returnCommand = NextBack(courseID, 1);
                            actionTaken = true;
                            break;
                        }                    
                    case AfterMaxFailAction.LockCourse:
                        {
                            int learnerID = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerID"]);
                            int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
                            LockCourse(courseID, learnerID, enrollmentID, LockingReason.MaxAttemptReachLessonAssessment);
                            returnCommand = CreateCourseLockedCommandObject(courseID, LockingReason.MaxAttemptReachLessonAssessment);
                            actionTaken = true;
                            break;
                        }
                }
                //UpdateActionAfterFailingMaxAttempt(actionTaken, learnerStatisticsID);
            }
            return returnCommand;

        }
         
        //IMPORTANT NOTE! We do not load ContentObject into command instead of it we always find First occurance of Asset Or Quiz whenever course pointer reaches to ContentObject Marker
        /// <summary>
        /// This method do not load content object into command but actually finds first occurance of ASSET or QUIZ after it. It will call its calling function recursively.
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <param name="sequenceNo">SequenceNo integer value, represent the course current index</param>
        /// <param name="sequenceItem">SequenceItem, ICPCourseService.SequenceItem object, It represent the course current sequenceItem<</param>
        /// <returns>Possible values which may be return are ShowSlide,ShowStartAssessment,ShowProctorMessage and ShowErrorMessage</returns>
        //IMPORTANT NOTE! We do not load ContentObject into command instead of it we always find First occurance of Asset Or Quiz whenever course pointer reaches to ContentObject Marker
        private object LoadContentObject(int courseID, int sequenceNo, ICPCourseService.SequenceItem sequenceItem, bool isNormalDirection)
        {
            object returnCommand = new object();
            int seq = 0;
            ICPCourseService.SequenceItem requiredSequenceItem = new ICP4.BusinessLogic.ICPCourseService.SequenceItem();
            int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                if (isNormalDirection)
                {
                    seq = cacheManager.GetFirstChildSceneAssetOrQuizOfContentObject(courseID, sequenceNo, source, courseConfigurationID);
                    if (seq < 0)
                    {//if there is no asset or quiz after the contentobject that means the end of course
                        return CreateCustomeMessageForEnd();
                    }
                }
                else
                {
                    seq = cacheManager.GetSceneOrAssetBeforeContentObject(courseID, sequenceNo, source, courseConfigurationID);
                    if (seq < 0)
                    {
                        return LoadSequenceItemIntoCommand(courseID, sequenceNo, sequenceItem, true);
                    }

                }

                requiredSequenceItem = cacheManager.GetRequestedItemFromQueue(courseID, seq, source, courseConfigurationID);
                returnCommand = LoadSequenceItemIntoCommand(courseID, seq, requiredSequenceItem, true);
            }
            return returnCommand;
        }

        /// <summary>
        /// This method create ShowSlide command object whenver course pointer reaches to Flash Asset in sequence. 
        /// </summary>
        /// <param name="sequenceItem">SequenceItem, ICPCourseService.SequenceItem object.</param>
        /// <returns>If successfully executes it will return ShowSlide command</returns>
        private object LoadFlashAsset(ICPCourseService.SequenceItem sequenceItem, bool remidiationMode)
        {
            ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide showSlide = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide();
            ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset slideMediaAsset = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset();
                    
            int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["currentindex"]);
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            string icpFileSystem = ConfigurationManager.AppSettings["ICPFileSystem"];
            double percentageCourseProgress = 0;
            string courseName = Convert.ToString(HttpContext.Current.Session["CourseName"]);
            bool isDemoable = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]);

            slideMediaAsset.MediaAssetID = sequenceItem.Item_GUID;
            slideMediaAsset.MediaAssetSceneID = sequenceItem.SceneGUID;
            slideMediaAsset.MediaAssetType = sequenceItem.SequenceItemType;
            slideMediaAsset.ContentObjectID = sequenceItem.ParentID;
            slideMediaAsset.RemidiationMode = remidiationMode;

           
            //slideMediaAsset.IsJSPlayerEnabled = System.Configuration.ConfigurationManager.AppSettings["isJSPlayerEnabled"];
            slideMediaAsset.IsJSPlayerEnabled = CheckForJSEnabledForCourse(Convert.ToString(courseID));

            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                if (sequenceItem.Assets == null || sequenceItem.Assets.Length <= 0)
                {
                    sequenceItem.Assets = courseService.GetSceneAssets(sequenceItem.sceneID);
                }
            }

            if (sequenceItem.Assets != null)
            {
                if (sequenceItem.Assets[0].URL.IndexOf("http") == -1)
                    slideMediaAsset.FlashURL = icpFileSystem + sequenceItem.Assets[0].URL;
                else
                    slideMediaAsset.FlashURL = sequenceItem.Assets[0].URL;
                slideMediaAsset.ActionScriptVersion = sequenceItem.Assets[0].ActionScriptVersion; 

            }

            slideMediaAsset.FlashFirstSceneName = "";
            slideMediaAsset.FlashSceneNo = "";
            slideMediaAsset.IsMovieEnded = false;
            slideMediaAsset.LastScene = "";
            slideMediaAsset.NextButtonState = true;
            slideMediaAsset.AudioURL = "";
            if (isDemoable == false)
            {
                slideMediaAsset.TitleBreadCrumb = GetTitleBreadCrumb(courseID, seqNo);
                #region Course Progress Bar
                {
                    try
                    {
                        int visitedSceneCount;
                        int totalSceneCount;
                        percentageCourseProgress = CalculateCourseProgressPercentageFromSequence(courseID, seqNo, Convert.ToInt32(System.Web.HttpContext.Current.Session["TotalNoOfViewableScenes"]), out visitedSceneCount, out totalSceneCount);

                        if (percentageCourseProgress > 0)
                        {
                            slideMediaAsset.CourseProgressPercentage = Convert.ToInt32(Math.Round(percentageCourseProgress));
                            slideMediaAsset.CourseProgressToolTip = GetToolTipForProgressBar(courseID, courseName, seqNo, totalSceneCount, visitedSceneCount);
                        }
                    }
                    catch (Exception exception)
                    {
                        ExceptionPolicyForLCMS.HandleException(exception, "ICPException");
                        slideMediaAsset.CourseProgressPercentage = 0;
                        slideMediaAsset.CourseProgressToolTip = string.Empty;
                    }
                }
                #endregion

            }
            else
            {
                slideMediaAsset.TitleBreadCrumb = string.Empty;
                slideMediaAsset.CourseProgressPercentage = 0;
                slideMediaAsset.CourseProgressToolTip = string.Empty;
            }
            
            showSlide.MediaAsset = slideMediaAsset;
            showSlide.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowSlide;
            return showSlide;
        }

        /// <summary>
        /// This method create ShowSlide command object whenver course pointer reaches to Content Asset in sequence.
        /// </summary>
        /// <param name="sequenceItem">SequenceItem, ICPCourseService.SequenceItem object.</param>
        /// <returns>If successfully executes it will return ShowSlide command</returns>
        private object LoadContentAsset(ICPCourseService.SequenceItem sequenceItem, bool remidiationMode)
        {
            ////////////////////////////////Fix for LCMS-2025 ////////////////////////
            if (!remidiationMode) // LCMS-3148
            {
                if ( Convert.ToBoolean(System.Web.HttpContext.Current.Session["CancelSpecialPostAssessmentValidation"]) == false)
                {
                    System.Web.HttpContext.Current.Session.Remove("AssessmentEndStats");
                }
            }
            ///////////////////////////////////////////////////////////////////////////
            ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide showSlide = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide();
            ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset slideMediaAsset = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset();

          

            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["currentindex"]);
            double percentageCourseProgress = 0;

            string courseName = Convert.ToString(HttpContext.Current.Session["CourseName"]);
            bool isDemoable=Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]);

            ICPCourseService.CourseConfiguration courseConfiguration = null;
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                courseConfiguration = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);
            }

            // slideMediaAsset.IsJSPlayerEnabled = System.Configuration.ConfigurationManager.AppSettings["isJSPlayerEnabled"];
            slideMediaAsset.IsJSPlayerEnabled = CheckForJSEnabledForCourse(Convert.ToString(courseID)); 

            slideMediaAsset.MediaAssetID = sequenceItem.Item_GUID;
            slideMediaAsset.MediaAssetType = sequenceItem.SequenceItemType;
            slideMediaAsset.MediaAssetSceneID = sequenceItem.SceneGUID;
            slideMediaAsset.ContentObjectID = sequenceItem.ParentID;
            slideMediaAsset.RemidiationMode = remidiationMode;
            slideMediaAsset.FlashSceneNo = "";
            slideMediaAsset.FlashURL = "";
            slideMediaAsset.IsMovieEnded = false;
            slideMediaAsset.LastScene = "";
            slideMediaAsset.MediaAssetType = sequenceItem.SequenceItemType;
            slideMediaAsset.NextButtonState = true;
            slideMediaAsset.ShowBookMark = true;
            slideMediaAsset.IsAssessmentStartMessage = false;
            slideMediaAsset.SceneSequenceID = sequenceItem.SequenceItemID; //Abdus Samad LCMS-13556
            slideMediaAsset.IsHTML5Content = false; //Waqas Zakai LCMS-13630
            slideMediaAsset.HTML5Message = string.Empty;
            slideMediaAsset.PlayerAllowTOCDisplaySlides = courseConfiguration.PlayerAllowTOCDisplaySlides;
            
            if (isDemoable == false)
            {
                slideMediaAsset.TitleBreadCrumb = GetTitleBreadCrumb(courseID, seqNo);
                #region Course Progress Bar
                {
                    try
                    {
                        int visitedSceneCount;
                        int totalSceneCount;
                        percentageCourseProgress = CalculateCourseProgressPercentageFromSequence(courseID, seqNo, Convert.ToInt32(System.Web.HttpContext.Current.Session["TotalNoOfViewableScenes"]), out visitedSceneCount, out totalSceneCount);

                        if (percentageCourseProgress > 0)
                        {
                            slideMediaAsset.CourseProgressPercentage = Convert.ToInt32(Math.Round(percentageCourseProgress));
                            slideMediaAsset.CourseProgressToolTip = GetToolTipForProgressBar(courseID, courseName, seqNo, totalSceneCount, visitedSceneCount);
                        }
                    }
                    catch (Exception exception)
                    {
                        ExceptionPolicyForLCMS.HandleException(exception, "ICPException");
                        slideMediaAsset.CourseProgressPercentage = 0;
                        slideMediaAsset.CourseProgressToolTip = string.Empty;
                    }
                }
                #endregion
            }

            else
            {
                slideMediaAsset.TitleBreadCrumb = string.Empty;
                slideMediaAsset.CourseProgressPercentage = 0;
                slideMediaAsset.CourseProgressToolTip = string.Empty;
                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {
                    ICPCourseService.Sequence sequence = cacheManager.GetIFDemoSequenceExistInCache(courseID);
                    slideMediaAsset.DisableBackButton = !isNotFirstViewableObjectInSequence(sequence, sequenceItem);
                }
            }
            
            slideMediaAsset.ViewStreaming = sequenceItem.IsViewStreamingInScene;

            slideMediaAsset.PlayPauseFeature = sequenceItem.IsPlayPauseFeatureInScene; //Added By Abdus Samad For lcms-12267

            if (Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]) == false)
            {
                # region Policy checking for scene Duration
                if (courseConfiguration.PlayerEnforceTimedOutline && !remidiationMode)
                {
                    //Changes LCMS-3807 : Starts
                    List<VisitedScene> VisitedSceneList = (List<VisitedScene>)System.Web.HttpContext.Current.Session["VisitedSceneList"];
                    VisitedScene visitedScene = getVisitedScene(VisitedSceneList, sequenceItem.SceneGUID);
                    if (visitedScene == null)
                    {
                        visitedScene = new VisitedScene();
                        visitedScene.SceneGUID = sequenceItem.SceneGUID;
                        visitedScene.SceneId = sequenceItem.sceneID;
                        /*LCMS-8972 - Start*/
                        visitedScene.TimeSpent = 0;
                        visitedScene.SceneDurationInSeconds = sequenceItem.SceneDuration;
                        /*LCMS-8972 - End*/
                        VisitedSceneList.Add(visitedScene);
                        System.Web.HttpContext.Current.Session["VisitedSceneList"] = VisitedSceneList;

                    }

                    /*LCMS-8972 - Start*/                    
                    //slideMediaAsset.SceneDurationTimer = sequenceItem.SceneDuration;
                    visitedScene.SceneDurationInSeconds = sequenceItem.SceneDuration;
                    slideMediaAsset.SceneDurationTimer = visitedScene.GetRemainingSceneDurationTimeInSeconds();
                    /*LCMS-8972 - End*/

                    
                    /*if (visitedScene.IsCompleted && visitedScene.TimeSpent == sequenceItem.SceneDuration)
                        slideMediaAsset.SceneDurationTimer = 0;*/
                    //else if (!visitedScene.IsCompleted)
                   // {
                        /*if (sequenceItem.SceneDuration - visitedScene.TimeSpent >= 0)
                        {
                            slideMediaAsset.SceneDurationTimer = (sequenceItem.SceneDuration - visitedScene.TimeSpent);
                        }*/
                    //}
                    /*
                    else
                    {
                        slideMediaAsset.SceneDurationTimer = sequenceItem.SceneDuration;

                        VisitedSceneList.Add(visitedScene);
                        System.Web.HttpContext.Current.Session["VisitedSceneList"] = VisitedSceneList;
                    }
                    //Changes LCMS-3807 : Ends
                    if (VisitedSceneList.Count == 0)
                    {
                        VisitedSceneList.Add(visitedScene);
                        System.Web.HttpContext.Current.Session["VisitedSceneList"] = VisitedSceneList;
                    }
                     * */
                    
                    
                }
                else
                {
                    slideMediaAsset.SceneDurationTimer = 0;
                }
                #endregion
            }
            else
            {
                slideMediaAsset.SceneDurationTimer = 0;
            }


            string HTML = "";
            string icpFileSystem = ConfigurationManager.AppSettings["ICPFileSystem"];
            bool isVOText = false;
            bool isText = false;
            bool isVisualTop = false;
            bool isHeading = false;
            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
				if (sequenceItem.Assets == null || sequenceItem.Assets.Length <= 0)
                {
                    sequenceItem.Assets = courseService.GetSceneAssets(sequenceItem.sceneID);
                }
                // Adding asset for heading CO:SceneName
                if (sequenceItem.Assets != null)
                {
                    foreach (ICPCourseService.Asset localasset in sequenceItem.Assets)
                    {
                        if (localasset.AssetSceneOrientation.Equals("$Heading"))
                        {
                            if (sequenceItem.IsTitleVisible == true)
                            {
                                localasset.ContentText = sequenceItem.SceneName;
                            }
                            else
                            {
                                localasset.ContentText = string.Empty;
                            }
                            localasset.IsTopicTitleVisible = sequenceItem.IsTopicTitleVisible;
                        }
                    }

                    foreach (ICPCourseService.Asset localasset in sequenceItem.Assets)
                    {
                        if (localasset.AssetSceneOrientation == "$Text" && localasset.ContentText != string.Empty)
                        {
                            isText = true;
                        }
                        if (localasset.AssetSceneOrientation == "$VOText" && localasset.ContentText != string.Empty)
                        {
                            isVOText = true;
                        }
                        if (localasset.AssetSceneOrientation == "$Heading")
                        {
                            if (localasset.ContentText != string.Empty || localasset.IsTopicTitleVisible == true)
                                isHeading = true;
                        }
                        if (localasset.AssetSceneOrientation == "$VisualTop" && localasset.URL != string.Empty)
                        {
                            isVisualTop = true;
                        }
                    }
                }
                // isVisualTop = true;//There is no variant defined for visual top
                isText = true;//There is no variant defined for text area.
                ICPCourseService.SceneTemplate sceneTemplate = new ICP4.BusinessLogic.ICPCourseService.SceneTemplate();
                sceneTemplate = courseService.GetSceneTemplateWithHTMLVariant(sequenceItem.SceneTemplateID, isText, isVOText, isVisualTop, isHeading);                
                HTML = sceneTemplate.TemplateHTML;
                StringBuilder sb = new StringBuilder(HTML);
                string sceneName = string.Empty;
                bool isShowHeading = false;
                bool isShowTopicTitle = false;
                slideMediaAsset.SceneTemplateType = sceneTemplate.SceneTemplateType;
                if (sequenceItem.Assets != null)
                {
                    foreach (ICPCourseService.Asset localasset in sequenceItem.Assets)
                    {
                        if (localasset.AssetSceneOrientation == "$Heading")
                        {
                            isShowHeading = true;
                            if (localasset.IsTopicTitleVisible == true)
                            {
                                isShowTopicTitle = true;
                            }
                            sceneName = localasset.ContentText;
                        }
                        if (localasset.AssetSceneOrientation == "$Text")
                        {
                            sb.Replace("$Text", localasset.ContentText);
                        }
                        if (localasset.AssetSceneOrientation == "$VOText")
                        {
                            sb.Replace("$VOText", localasset.ContentText);
                        }
                        if (localasset.AssetSceneOrientation == "$VisualTop")
                        {
                            string visualTopUrl = "";
                            if (localasset.URL.IndexOf('.') != -1)
                                slideMediaAsset.VisualTopType = System.IO.Path.GetExtension(localasset.URL).Remove(0, 1);

                            if (localasset.URL.IndexOf("http") == -1 && localasset.URL != string.Empty)
                                visualTopUrl = icpFileSystem + localasset.URL;
                            else
                                visualTopUrl = localasset.URL;
                            slideMediaAsset.ActionScriptVersion = localasset.ActionScriptVersion;  

                            sb.Replace("$VisualTop", visualTopUrl);
                            //if (visualTopUrl.IndexOf('.')!=-1)
                            //    slideMediaAsset.VisualTopType = System.IO.Path.GetExtension(visualTopUrl).Remove(0,1);
                        }
                        if (localasset.AssetSceneOrientation == "$Audio")
                        {
                            if (localasset.URL.IndexOf("http") == -1)
                                slideMediaAsset.AudioURL = icpFileSystem + localasset.URL;
                            else
                                slideMediaAsset.AudioURL = localasset.URL;
                        }

                    }
                }

                sb.Replace("$VOText", "");
                sb.Replace("$Text", "");
                bool isVisualTopFound = false;
                if (sb.ToString().Contains("$VisualTop") == false)
                    isVisualTopFound = true;
                #region Code specific to the SceneTemplateTypes
                switch (sceneTemplate.SceneTemplateType)
                {
                    case SceneTemplateType.SI:
                        {

                            if (isVisualTopFound == false)
                            {
                                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                                {
                                    string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                                    string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                                    string imageURL = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageDefaultSpecialInstructionsImage, brandCode, variant);
                                    if (imageURL.IndexOf('.') != -1)
                                        slideMediaAsset.VisualTopType = System.IO.Path.GetExtension(imageURL).Remove(0, 1);
                                    sb.Replace("$VisualTop", imageURL);
                                }
                            }
                            if (isShowHeading == true)
                            {
                                sb.Replace("$Heading", sceneName);
                            }
                            if (isDemoable == false)
                                slideMediaAsset.TitleBreadCrumb = string.Empty;
                            break;

                        }
                    case SceneTemplateType.SME:
                        {

                            if (isVisualTopFound == false)
                            {
                                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                                {
                                    string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                                    string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                                    string imageURL = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageDefaultSMEImage, brandCode, variant);
                                    if (imageURL.IndexOf('.') != -1)
                                        slideMediaAsset.VisualTopType = System.IO.Path.GetExtension(imageURL).Remove(0, 1);
                                    sb.Replace("$VisualTop", imageURL);
                                }
                            }
                            if (isShowHeading == true)
                            {
                                sb.Replace("$Heading", sceneName);
                            }
                            if (isDemoable == false)
                                slideMediaAsset.TitleBreadCrumb = string.Empty;
                            break;

                        }

                    case SceneTemplateType.CD:
                        {
                            if (isVisualTopFound == false)
                            {
                                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                                {
                                    string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                                    string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                                    string imageURL = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageDefaultCourseDescriptionImage, brandCode, variant);
                                    if (imageURL.IndexOf('.') != -1)
                                        slideMediaAsset.VisualTopType = System.IO.Path.GetExtension(imageURL).Remove(0, 1);
                                    sb.Replace("$VisualTop", imageURL);
                                }
                            }
                            if (isShowHeading == true)
                            {
                                sb.Replace("$Heading", sceneName);
                            }
                            if (isDemoable == false)
                                slideMediaAsset.TitleBreadCrumb = string.Empty;
                            break;

                        }

                    case SceneTemplateType.CLO:
                        {
                            if (isVisualTopFound == false)
                            {
                                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                                {
                                    string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                                    string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                                    string imageURL = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageDefaultCourseLearningObjectivesImage, brandCode, variant);
                                    if (imageURL.IndexOf('.') != -1)
                                        slideMediaAsset.VisualTopType = System.IO.Path.GetExtension(imageURL).Remove(0, 1);
                                    sb.Replace("$VisualTop", imageURL);
                                }
                            }
                            if (isShowHeading == true)
                            {
                                sb.Replace("$Heading", sceneName);
                            }
                            if (isDemoable == false)
                                slideMediaAsset.TitleBreadCrumb = string.Empty;
                            break;


                        }

                    case SceneTemplateType.LI:
                        {
                            if (isVisualTopFound == false)
                            {
                                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                                {
                                    string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                                    string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                                    string imageURL = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageDefaultLessonIntroImage, brandCode, variant);
                                    if (imageURL.IndexOf('.') != -1)
                                        slideMediaAsset.VisualTopType = System.IO.Path.GetExtension(imageURL).Remove(0, 1);
                                    sb.Replace("$VisualTop", imageURL);
                                }
                            }
                            if (isShowHeading == true)
                            {
                                sb.Replace("$Heading", sceneName);
                            }
                            if (isDemoable == false)
                                slideMediaAsset.TitleBreadCrumb = string.Empty;
                            break;

                        }

                    case SceneTemplateType.LT:
                        {
                            if (isVisualTopFound == false)
                            {
                                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                                {
                                    string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                                    string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                                    string imageURL = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageDefaultLessonTopicsImage, brandCode, variant);
                                    if (imageURL.IndexOf('.') != -1)
                                        slideMediaAsset.VisualTopType = System.IO.Path.GetExtension(imageURL).Remove(0, 1);
                                    sb.Replace("$VisualTop", imageURL);
                                }
                            }
                            if (isShowHeading == true)
                            {
                                sb.Replace("$Heading", sceneName);
                            }
                            if (isDemoable == false)
                                slideMediaAsset.TitleBreadCrumb = string.Empty;
                            break;

                        }

                    case SceneTemplateType.LS:
                        {
                            if (isVisualTopFound == false)
                            {
                                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                                {
                                    string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                                    string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                                    string imageURL = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageDefaultLessonSummaryImage, brandCode, variant);
                                    if (imageURL.IndexOf('.') != -1)
                                        slideMediaAsset.VisualTopType = System.IO.Path.GetExtension(imageURL).Remove(0, 1);
                                    sb.Replace("$VisualTop", imageURL);
                                }
                            }
                            if (isShowHeading == true)
                            {
                                sb.Replace("$Heading", sceneName);
                            }
                            if (isDemoable == false)
                                slideMediaAsset.TitleBreadCrumb = string.Empty;
                            break;

                        }
                    case SceneTemplateType.HTML5:
                        {
                            string html5BrowserMessage = string.Empty;
                            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                            {
                                string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                                string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                                html5BrowserMessage = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HTML5BrowserCompatibleMessage, brandCode, variant);                                
                            }

                            slideMediaAsset.IsHTML5Content = true;
                            if (html5BrowserMessage==null)
                            {
                                //if resource key not found into resource table then bwlow message appeared.
                                slideMediaAsset.HTML5Message = "This content requires HTML5 support to run. Your current browser does not appear to support HTML5. Please switch browsers or upgrade your browser to a version that supports HTML5, or contact your administrator";
                            }
                            else
                            {
                                slideMediaAsset.HTML5Message = html5BrowserMessage;
                            }

                            foreach (ICPCourseService.Asset localasset in sequenceItem.Assets)
                            {
                                if (localasset.AssetSceneOrientation == "$VisualTop")
                                {
                                    string assetURL = localasset.URL;
                                    string assetABSPath = icpFileSystem;
                                    string BasePersistentFolder = ConfigurationManager.AppSettings["BasePersistentFolder"].ToString();
                                    string filename = System.IO.Path.GetFileName(assetURL);
                                    string Html5MainFile = string.Empty;
                                    using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                                    {
                                        string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                                        string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                                        Html5MainFile = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HTML5MainFile, brandCode, variant);
                                    }
                                    assetURL = assetURL.Replace(filename, "");
                                    assetABSPath = assetABSPath + assetURL;                                    
                                    assetURL = assetURL.Replace("/", "\\");
                                    string assetpath = BasePersistentFolder + assetURL;
                                    string[] aHtml5MainFile =Html5MainFile.Split(',');

                                    foreach (string html5file in aHtml5MainFile)
                                    {
                                        try
                                        {
                                            using (TextReader textReader = new StreamReader(assetpath + html5file))
                                            {
                                                string template = textReader.ReadToEnd();
                                                sb.Replace("$HTML5TEMPLATE", template);
                                                sb.Replace("{0}", assetABSPath);
                                                if (isShowHeading == true)
                                                {
                                                    sb.Replace("$SceneHeading", sceneName);
                                                }
                                                else
                                                {
                                                    sb.Replace("$SceneHeading", "");
                                                }
                                                break;
                                            }
                                        }
                                        catch (Exception exp1)
                                        {

                                        }
                                    }                                    
                                }
                            }

                            break;
                        }
                    default:
                        {
                           if(sceneTemplate.SceneTemplateType == "VSC")
                        {
                            slideMediaAsset.VideoFileName = sequenceItem.VideoFilename;
                            slideMediaAsset.StreamingServer = sequenceItem.StreamingServerApplication;
                            slideMediaAsset.StreamingServerURL = ConfigurationManager.AppSettings["StreamingServerURL"].ToString();
                            slideMediaAsset.VideoHeight = sequenceItem.VideoHeight;
                            slideMediaAsset.VideoWidth = sequenceItem.VideoWidth;
                            slideMediaAsset.FullScreen = sequenceItem.FullScreen;
                            slideMediaAsset.DisplayStandard = sequenceItem.DisplayStandardTF;
                            slideMediaAsset.DisplayWideScreen = sequenceItem.DisplayWideScreenTF;

                            //Added by Abdus Samad //Embeded Code WLCMS-2609 //Start 

                               if(sequenceItem.IsEmbedCode == true)
                               {
                                 slideMediaAsset.IsEmbedCode = sequenceItem.IsEmbedCode;
                                 slideMediaAsset.EmbedCode = sequenceItem.EmbedCode;
                                 slideMediaAsset.VisualTopType = "embed";                               
                               
                               }                           
                             
                         
                            //Added by Abdus Samad //Embeded Code WLCMS-2609 //Stop
                            
                               
                        }
                           else if (sceneTemplate.SceneTemplateType == "MC") // MC
                           {
                               slideMediaAsset.MCSceneXml = sequenceItem.MCSceneXml; // MC
                           }
                            
                            if (isVisualTopFound == false)
                            {
                                /*
                                    Changes made by Waqas Zakai 08th April 2010
                                    LCMS-3786  
                                    sb.Replace("$VisualTop", "");
                                 */
                                sb.Replace("src=\"$VisualTop\"", "");
                                slideMediaAsset.VisualTopType = string.Empty;
                            }
                            if (isShowHeading == true)
                            {
                                string sceneBreadcrumb = string.Empty;
                                    if (isShowTopicTitle == true && isDemoable==false)
                                    {
                                        string topicTitle =  GetSceneBreadCrumbShowContent(sequenceItem);
                                        if (sceneName != string.Empty)
                                            sceneBreadcrumb = topicTitle + ": ";
                                        else
                                            sceneBreadcrumb = topicTitle;
                                    }
                                    sceneBreadcrumb += sceneName;
                                sb.Replace("$Heading", sceneBreadcrumb);
                            }
                            if (isDemoable == false)
                                slideMediaAsset.TitleBreadCrumb = GetTitleBreadCrumb(courseID, seqNo);
                            break;
                        }
                }
                #endregion

                HTML = sb.ToString();
            }


            slideMediaAsset.TemplateHtml = HTML;
            slideMediaAsset.TemplateHtml = slideMediaAsset.TemplateHtml.Replace("\n", "");


            showSlide.MediaAsset = slideMediaAsset;
            showSlide.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowSlide;
            return showSlide;
        }

        public VisitedScene getVisitedScene(List<VisitedScene> visitedSceneList, string sceneGuid)
        {
            VisitedScene scene = null;
            foreach (VisitedScene visitedScene in visitedSceneList)
            {

                if (visitedScene.SceneGUID == sceneGuid)
                {
                    scene = visitedScene;
                    break;
                }
            }
            return scene;
        }

        /// <summary>
        /// This method create ShowSlide command object whenever course pointer reaches to Course Loading scene.
        /// </summary>
        /// <param name="sequenceItem">SequenceItem, ICPCourseService.SequenceItem object.</param>
        /// <returns>If successfully executes it will return ShowSlide command</returns>
        private object LoadCourseLoadingScene(ICPCourseService.SequenceItem sequenceItem)
        {
            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();

            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide showSlide = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide();
            ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset slideMediaAsset = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset();

            //slideMediaAsset.IsJSPlayerEnabled = System.Configuration.ConfigurationManager.AppSettings["isJSPlayerEnabled"];
            slideMediaAsset.IsJSPlayerEnabled = CheckForJSEnabledForCourse(Convert.ToString(courseID)); 

            slideMediaAsset.MediaAssetID = sequenceItem.Item_GUID;
            slideMediaAsset.MediaAssetType = SequenceItemTypeName.ContentAsset;
            slideMediaAsset.MediaAssetSceneID = sequenceItem.SceneGUID;
            slideMediaAsset.ContentObjectID = sequenceItem.ParentID;
            slideMediaAsset.RemidiationMode = false;
            slideMediaAsset.FlashSceneNo = "";
            slideMediaAsset.FlashURL = "";
            slideMediaAsset.IsMovieEnded = false;
            slideMediaAsset.LastScene = "";
            slideMediaAsset.NextButtonState = true;
            slideMediaAsset.SceneDurationTimer = 0;
            slideMediaAsset.ShowBookMark = false;
            slideMediaAsset.IsAssessmentStartMessage = false;
            
            string HTML = "";
            string icpFileSystem = ConfigurationManager.AppSettings["ICPFileSystem"];
            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                HTML = courseService.GetSceneTemplateHTML(sequenceItem.SceneTemplateID).TemplateHTML;
            }
           
            string courseName = "";
            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                courseName = courseService.GetCourseName(courseID);
            }
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);                
                ICPCourseService.Sequence sequence = cacheManager.GetIFSequenceExistInCache(courseID, source, courseConfigurationID);
                slideMediaAsset.DisableBackButton = !isNotFirstViewableObjectInSequence(sequence, sequenceItem);

                StringBuilder sb = new StringBuilder(HTML);
                sb.Replace("$Heading", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.CourseLoadingHeading, brandCode, variant));
                sb.Replace("$VisualTop", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.CourseLoadingImage, brandCode, variant));
                sb.Replace("$Text", courseName);
                HTML = sb.ToString();
            }

            slideMediaAsset.TemplateHtml = HTML;
            slideMediaAsset.TemplateHtml = slideMediaAsset.TemplateHtml.Replace("\n", "");

            showSlide.MediaAsset = slideMediaAsset;
            showSlide.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowSlide;
            return showSlide;
        }

        /// <summary>
        /// This method create ShowSlide command object whenever course pointer reaches to Course Loading scene.
        /// </summary>
        /// <param name="sequenceItem">SequenceItem, ICPCourseService.SequenceItem object.</param>
        /// <returns>If successfully executes it will return ShowSlide command</returns>
        private object LoadCourseIntroductionScene(ICPCourseService.SequenceItem sequenceItem)
        {
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            int learnerID = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerID"]);
            int courseApprovalID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseApprovalID"]);
            string learnerSessionGUID = Convert.ToString(System.Web.HttpContext.Current.Session["LearnerSessionID"]);
            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
            string courseName = HttpContext.Current.Session["CourseName"].ToString();
            string courseDescription = HttpContext.Current.Session["CourseDescription"].ToString();

            ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide showSlide = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide();
            ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset slideMediaAsset = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset();


            //slideMediaAsset.IsJSPlayerEnabled = System.Configuration.ConfigurationManager.AppSettings["isJSPlayerEnabled"];
            slideMediaAsset.IsJSPlayerEnabled = CheckForJSEnabledForCourse(Convert.ToString(courseID)); 

            slideMediaAsset.MediaAssetID = sequenceItem.Item_GUID;
            slideMediaAsset.MediaAssetType = SequenceItemTypeName.ContentAsset;
            slideMediaAsset.MediaAssetSceneID = sequenceItem.SceneGUID;
            slideMediaAsset.ContentObjectID = sequenceItem.ParentID;
            slideMediaAsset.RemidiationMode = false;
            slideMediaAsset.FlashSceneNo = "";
            slideMediaAsset.FlashURL = "";
            slideMediaAsset.IsMovieEnded = false;
            slideMediaAsset.LastScene = "";
            slideMediaAsset.NextButtonState = true;
            slideMediaAsset.SceneDurationTimer = 0;
            slideMediaAsset.ShowBookMark = false;
            slideMediaAsset.IsAssessmentStartMessage = false;
            slideMediaAsset.TitleBreadCrumb = string.Empty;

            if (courseApprovalID > 0)
            {
                using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
                {

                    courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                    courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                    slideMediaAsset.IsCourseApproval = courseService.SelectCourseApprovalMessage(Convert.ToString(courseID), Convert.ToString(learnerID), Convert.ToString(courseApprovalID), learnerSessionGUID);
                }
            }
            else
            {
                slideMediaAsset.IsCourseApproval = false;
            }            

            if (slideMediaAsset.IsCourseApproval == true)
            {
                int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);

                ICP4.BusinessLogic.ICPTrackingService.LearnerProfile serviceLearnerProfile;

                using (TrackingService trackingService = new TrackingService())
                {
                    trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];

                    serviceLearnerProfile = trackingService.GetUserProfileInformation(enrollmentID);
                }

                //slideMediaAsset.CourseApprovalMessage = "Is this you? " + serviceLearnerProfile.FullName +
                //                                        "It looks like you have taken this course before! Please be aware that learners should not share accounts, and regulatory guidelines may prevent us from being able to report you more than once for the same course within a certain period of time." +
                //                                        "If you know that you are outside of the regulated period of time, or are taking this course again purely for your own benefit, please click OK to continue!" +
                //                                        "If you need to receive credit for this course or a similar course that will fill this requirement, please exit the course and contact customer service for assistance.";

                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {
                    StringBuilder sbCourseApproval = new StringBuilder(cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.CourseApprovalTextAlert, brandCode, variant));
                    sbCourseApproval.Replace("$learnerFullName", serviceLearnerProfile.FullName);
                    slideMediaAsset.CourseApprovalMessage = sbCourseApproval.ToString();
                }
            }
            #region Course Progress Bar
            {
                slideMediaAsset.CourseProgressPercentage = 0;
                slideMediaAsset.CourseProgressToolTip = courseName;
            }
            #endregion

            string HTML = "";
            string icpFileSystem = ConfigurationManager.AppSettings["ICPFileSystem"];
            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                HTML = courseService.GetSceneTemplateHTML(sequenceItem.SceneTemplateID).TemplateHTML;
            }

            //using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
            //{
            //    courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
            //    courseName = courseService.GetCourseName(courseID);
            //}
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                GetCourseImage(courseID);
                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);                
                ICPCourseService.Sequence sequence = cacheManager.GetIFSequenceExistInCache(courseID, source, courseConfigurationID);
                slideMediaAsset.DisableBackButton = !isNotFirstViewableObjectInSequence(sequence, sequenceItem);

                StringBuilder sb = new StringBuilder(HTML);
                sb.Replace("$Heading", courseName);
                if(System.Web.HttpContext.Current.Session["CourseImage"]!=null)
                {
                    sb.Replace("$VisualTop", System.Web.HttpContext.Current.Session["CourseImage"].ToString());
                }
                //sb.Replace("$VisualTop", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.CourseIntroductionImage, brandCode, variant));

                if (courseName.Length > 150)
                {
                    sb.Replace("$CSSNAME", "heading-exceeding");
                }
                else
                {
                    sb.Replace("$CSSNAME", "");
                }

                if (courseDescription.Length > 210)
                {
                    sb.Replace("$Text", courseDescription.Substring(0, 210).ToString() + " ... " + "<a href='javascript:;' id='read-more-2' data-group='modal-dynamic' data-trg='course-read-more' data-type='cd-modal-trigger'><span id='coursedescreadMoreText'>Read more</span></a>");
                }
                else
                {
                    sb.Replace("$Text", courseDescription);
                }
                HTML = sb.ToString();
            }


            slideMediaAsset.TemplateHtml = HTML;
            slideMediaAsset.TemplateHtml = slideMediaAsset.TemplateHtml.Replace("\n", "");

            showSlide.MediaAsset = slideMediaAsset;
            showSlide.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowSlide;
            return showSlide;
        }
        /// <summary>
        /// This method create ShowSlide command object whenever course pointer reaches to disclaimer scene.
        /// </summary>
        /// <param name="sequenceItem">SequenceItem, ICPCourseService.SequenceItem object.</param>
        /// <returns>If successfully executes it will return ShowSlide command</returns>
        private object LoadDisclaimerScene(ICPCourseService.SequenceItem sequenceItem)
        {
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
            string courseName = Convert.ToString(HttpContext.Current.Session["CourseName"]);

            ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide showSlide = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide();
            ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset slideMediaAsset = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset();

            //slideMediaAsset.IsJSPlayerEnabled = System.Configuration.ConfigurationManager.AppSettings["isJSPlayerEnabled"];
            slideMediaAsset.IsJSPlayerEnabled = CheckForJSEnabledForCourse(Convert.ToString(courseID)); 

            slideMediaAsset.MediaAssetID = sequenceItem.Item_GUID;
            slideMediaAsset.MediaAssetType = SequenceItemTypeName.ContentAsset;
            slideMediaAsset.MediaAssetSceneID = sequenceItem.SceneGUID;
            slideMediaAsset.ContentObjectID = sequenceItem.ParentID;
            slideMediaAsset.RemidiationMode = false;
            slideMediaAsset.FlashSceneNo = "";
            slideMediaAsset.FlashURL = "";
            slideMediaAsset.IsMovieEnded = false;
            slideMediaAsset.LastScene = "";
            slideMediaAsset.NextButtonState = true;
            slideMediaAsset.SceneDurationTimer = 0;
            slideMediaAsset.ShowBookMark = false;
            slideMediaAsset.IsAssessmentStartMessage = false;
          //  slideMediaAsset.DisableBackButton = true;
            #region Course Progress Bar
            slideMediaAsset.CourseProgressPercentage = 0;
            slideMediaAsset.CourseProgressToolTip = courseName;
            #endregion

            string HTML = "";
            string icpFileSystem = ConfigurationManager.AppSettings["ICPFileSystem"];
            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                HTML = courseService.GetSceneTemplateHTML(sequenceItem.SceneTemplateID).TemplateHTML;
            }
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);                
                ICPCourseService.Sequence sequence = cacheManager.GetIFSequenceExistInCache(courseID, source, courseConfigurationID);
                slideMediaAsset.DisableBackButton = !isNotFirstViewableObjectInSequence(sequence, sequenceItem);

                StringBuilder sb = new StringBuilder(HTML);
                sb.Replace("$Heading", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingDisclaimerScene, brandCode, variant));
                sb.Replace("$VisualTop", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageDisclaimerScene, brandCode, variant));
                sb.Replace("$Text", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentDisclaimerScene, brandCode, variant));
                HTML = sb.ToString();
            }


            slideMediaAsset.TemplateHtml = HTML;
            slideMediaAsset.TemplateHtml = slideMediaAsset.TemplateHtml.Replace("\n", "");

            showSlide.MediaAsset = slideMediaAsset;
            showSlide.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowSlide;
            return showSlide;
        }
        /// <summary>
        /// This method create ShowSlide command object whenever course pointer reaches to copyright scene.
        /// </summary>
        /// <param name="sequenceItem">SequenceItem, ICPCourseService.SequenceItem object.</param>
        /// <returns>If successfully executes it will return ShowSlide command</returns>
        private object LoadCopyrightScene(ICPCourseService.SequenceItem sequenceItem)
        {
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
            string courseName = Convert.ToString(HttpContext.Current.Session["CourseName"]);

            ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide showSlide = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide();
            ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset slideMediaAsset = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset();

            //slideMediaAsset.IsJSPlayerEnabled = System.Configuration.ConfigurationManager.AppSettings["isJSPlayerEnabled"];
            slideMediaAsset.IsJSPlayerEnabled = CheckForJSEnabledForCourse(Convert.ToString(courseID)); 

            slideMediaAsset.MediaAssetID = sequenceItem.Item_GUID;
            slideMediaAsset.MediaAssetType = SequenceItemTypeName.ContentAsset;
            slideMediaAsset.MediaAssetSceneID = sequenceItem.SceneGUID;
            slideMediaAsset.ContentObjectID = sequenceItem.ParentID;
            slideMediaAsset.RemidiationMode = false;
            slideMediaAsset.FlashSceneNo = "";
            slideMediaAsset.FlashURL = "";
            slideMediaAsset.IsMovieEnded = false;
            slideMediaAsset.LastScene = "";
            slideMediaAsset.NextButtonState = true;
            slideMediaAsset.SceneDurationTimer = 0;
            slideMediaAsset.ShowBookMark = false;
            slideMediaAsset.IsAssessmentStartMessage = false;
            #region Course Progress Bar
            slideMediaAsset.CourseProgressPercentage = 0;
            slideMediaAsset.CourseProgressToolTip = courseName;
            #endregion

            string HTML = "";
            string icpFileSystem = ConfigurationManager.AppSettings["ICPFileSystem"];
            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                HTML = courseService.GetSceneTemplateHTML(sequenceItem.SceneTemplateID).TemplateHTML;
            }
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                StringBuilder sb = new StringBuilder(HTML);
                sb.Replace("$Heading", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingCopyrightScene, brandCode, variant));
                sb.Replace("$VisualTop", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageCopyrightScene, brandCode, variant));
                sb.Replace("$Text", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentCopyrightScene, brandCode, variant));
                HTML = sb.ToString();
            }


            slideMediaAsset.TemplateHtml = HTML;
            slideMediaAsset.TemplateHtml = slideMediaAsset.TemplateHtml.Replace("\n", "");

            showSlide.MediaAsset = slideMediaAsset;
            showSlide.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowSlide;
            return showSlide;
        }
        /// <summary>
        /// This method create ShowSlide command object whenever course pointer reaches to Mission Statement scene.
        /// </summary>
        /// <param name="sequenceItem">SequenceItem, ICPCourseService.SequenceItem object.</param>
        /// <returns>If successfully executes it will return ShowSlide command</returns>
        private object LoadMissionStatementScene(ICPCourseService.SequenceItem sequenceItem)
        {
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
            string courseName = Convert.ToString(HttpContext.Current.Session["CourseName"]);

            ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide showSlide = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide();
            ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset slideMediaAsset = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset();

           // slideMediaAsset.IsJSPlayerEnabled = System.Configuration.ConfigurationManager.AppSettings["isJSPlayerEnabled"];
            slideMediaAsset.IsJSPlayerEnabled = CheckForJSEnabledForCourse(Convert.ToString(courseID)); 

            slideMediaAsset.MediaAssetID = sequenceItem.Item_GUID;
            slideMediaAsset.MediaAssetType = SequenceItemTypeName.ContentAsset;
            slideMediaAsset.MediaAssetSceneID = sequenceItem.SceneGUID;
            slideMediaAsset.ContentObjectID = sequenceItem.ParentID;
            slideMediaAsset.RemidiationMode = false;
            slideMediaAsset.FlashSceneNo = "";
            slideMediaAsset.FlashURL = "";
            slideMediaAsset.IsMovieEnded = false;
            slideMediaAsset.LastScene = "";
            slideMediaAsset.NextButtonState = true;
            slideMediaAsset.SceneDurationTimer = 0;
            slideMediaAsset.ShowBookMark = false;
            slideMediaAsset.IsAssessmentStartMessage = false;
            #region Course Progress Bar
            slideMediaAsset.CourseProgressPercentage = 0;
            slideMediaAsset.CourseProgressToolTip = courseName;
            #endregion

            string HTML = "";
            string icpFileSystem = ConfigurationManager.AppSettings["ICPFileSystem"];
            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                HTML = courseService.GetSceneTemplateHTML(sequenceItem.SceneTemplateID).TemplateHTML;
            }
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                StringBuilder sb = new StringBuilder(HTML);
                sb.Replace("$Heading", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingMissionStatementScene, brandCode, variant));
                sb.Replace("$VisualTop", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageMissionStatementScene, brandCode, variant));
                sb.Replace("$Text", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentMissionStatementScene, brandCode, variant));
                HTML = sb.ToString();
            }


            slideMediaAsset.TemplateHtml = HTML;
            slideMediaAsset.TemplateHtml = slideMediaAsset.TemplateHtml.Replace("\n", "");

            showSlide.MediaAsset = slideMediaAsset;
            showSlide.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowSlide;
            return showSlide;
        }
        /// <summary>
        /// This method create ShowSlide command object whenever course pointer reaches to Customer Support scene.
        /// </summary>
        /// <param name="sequenceItem">SequenceItem, ICPCourseService.SequenceItem object.</param>
        /// <returns>If successfully executes it will return ShowSlide command</returns>
        private object LoadCustomerSupportScene(ICPCourseService.SequenceItem sequenceItem)
        {
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
            string courseName = Convert.ToString(HttpContext.Current.Session["CourseName"]);

            ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide showSlide = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide();
            ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset slideMediaAsset = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset();

            //slideMediaAsset.IsJSPlayerEnabled = System.Configuration.ConfigurationManager.AppSettings["isJSPlayerEnabled"];
            slideMediaAsset.IsJSPlayerEnabled = CheckForJSEnabledForCourse(Convert.ToString(courseID)); 

            slideMediaAsset.MediaAssetID = sequenceItem.Item_GUID;
            slideMediaAsset.MediaAssetType = SequenceItemTypeName.ContentAsset;
            slideMediaAsset.MediaAssetSceneID = sequenceItem.SceneGUID;
            slideMediaAsset.ContentObjectID = sequenceItem.ParentID;
            slideMediaAsset.RemidiationMode = false;
            slideMediaAsset.FlashSceneNo = "";
            slideMediaAsset.FlashURL = "";
            slideMediaAsset.IsMovieEnded = false;
            slideMediaAsset.LastScene = "";
            slideMediaAsset.NextButtonState = true;
            slideMediaAsset.SceneDurationTimer = 0;
            slideMediaAsset.ShowBookMark = false;
            slideMediaAsset.IsAssessmentStartMessage = false;
            #region Course Progress Bar
            slideMediaAsset.CourseProgressPercentage = 0;
            slideMediaAsset.CourseProgressToolTip = courseName;
            #endregion

            string HTML = "";
            string icpFileSystem = ConfigurationManager.AppSettings["ICPFileSystem"];
            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                HTML = courseService.GetSceneTemplateHTML(sequenceItem.SceneTemplateID).TemplateHTML;
            }
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                StringBuilder sb = new StringBuilder(HTML);
                sb.Replace("$Heading", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingCustomerSupportScene, brandCode, variant));
                sb.Replace("$VisualTop", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageCustomerSupportScene, brandCode, variant));
                sb.Replace("$Text", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentCustomerSupportScene, brandCode, variant));
                HTML = sb.ToString();
            }


            slideMediaAsset.TemplateHtml = HTML;
            slideMediaAsset.TemplateHtml = slideMediaAsset.TemplateHtml.Replace("\n", "");

            showSlide.MediaAsset = slideMediaAsset;
            showSlide.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowSlide;
            return showSlide;
        }
        /// <summary>
        /// This method create ShowSlide command object whenever course pointer reaches to Lesson Intro scene.
        /// </summary>
        /// <param name="sequenceItem">SequenceItem, ICPCourseService.SequenceItem object.</param>
        /// <returns>If successfully executes it will return ShowSlide command</returns>
        private object LoadLessonIntroScene(ICPCourseService.SequenceItem sequenceItem)
        {
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
            int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["currentindex"]);
            bool isDemoable = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]);
            double percentageCourseProgress = 0;
            ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide showSlide = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide();
            ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset slideMediaAsset = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset();

            //slideMediaAsset.IsJSPlayerEnabled = System.Configuration.ConfigurationManager.AppSettings["isJSPlayerEnabled"];
            slideMediaAsset.IsJSPlayerEnabled = CheckForJSEnabledForCourse(Convert.ToString(courseID)); 

            slideMediaAsset.MediaAssetID = sequenceItem.Item_GUID;
            slideMediaAsset.MediaAssetType = SequenceItemTypeName.ContentAsset;
            slideMediaAsset.MediaAssetSceneID = sequenceItem.SceneGUID;
            slideMediaAsset.ContentObjectID = sequenceItem.ParentID;
            slideMediaAsset.RemidiationMode = false;
            slideMediaAsset.FlashSceneNo = "";
            slideMediaAsset.FlashURL = "";
            slideMediaAsset.IsMovieEnded = false;
            slideMediaAsset.LastScene = "";
            slideMediaAsset.NextButtonState = true;
            slideMediaAsset.SceneDurationTimer = 0;
            slideMediaAsset.ShowBookMark = false;
            slideMediaAsset.IsAssessmentStartMessage = false;
            if (isDemoable == false)
            {
                slideMediaAsset.TitleBreadCrumb = GetTitleBreadCrumb(courseID, seqNo);
                {
                    int visitedSceneCount;
                    int totalSceneCount;
                    percentageCourseProgress = CalculateCourseProgressPercentageFromSequence(courseID, seqNo, Convert.ToInt32(System.Web.HttpContext.Current.Session["TotalNoOfViewableScenes"]), out visitedSceneCount, out totalSceneCount);

                    if (percentageCourseProgress > 0)
                        slideMediaAsset.CourseProgressPercentage = Convert.ToInt32(Math.Round(percentageCourseProgress));
                }
            }
            else
            {
                slideMediaAsset.TitleBreadCrumb = string.Empty;
                slideMediaAsset.CourseProgressToolTip = string.Empty;
                slideMediaAsset.CourseProgressPercentage = 0;
            }
            string HTML = "";
            string contentObjectName = "";
            string icpFileSystem = ConfigurationManager.AppSettings["ICPFileSystem"];
            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                HTML = courseService.GetSceneTemplateHTML(sequenceItem.SceneTemplateID).TemplateHTML;
                contentObjectName = courseService.GetContentObjectName(sequenceItem.ParentID);
            }
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                StringBuilder sb = new StringBuilder(HTML);
                // sb.Replace("$Heading", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingCustomerSupportScene, brandCode, variant));
                sb.Replace("$VisualTop", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageLessonIntroductionScene, brandCode, variant));
                sb.Replace("$Text", contentObjectName);
                HTML = sb.ToString();
            }


            slideMediaAsset.TemplateHtml = HTML;
            slideMediaAsset.TemplateHtml = slideMediaAsset.TemplateHtml.Replace("\n", "");

            showSlide.MediaAsset = slideMediaAsset;
            showSlide.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowSlide;
            return showSlide;
        }
        /// <summary>
        /// This method create ShowSlide command object whenver course pointer reaches to IntroPage in sequence.
        /// </summary>
        /// <param name="sequenceItem">SequenceItem, ICPCourseService.SequenceItem object.</param>
        /// <returns>If successfully executes it will return ShowSlide command</returns>
        private object LoadIntroPage(int courseID, ICPCourseService.SequenceItem sequenceItem)
        {

            if (sequenceItem.Assets != null && sequenceItem.Assets[0].URL != "")
            {
                ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide showSlide = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide();
                ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset slideMediaAsset = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset();

                //slideMediaAsset.IsJSPlayerEnabled = System.Configuration.ConfigurationManager.AppSettings["isJSPlayerEnabled"];
                slideMediaAsset.IsJSPlayerEnabled = CheckForJSEnabledForCourse(Convert.ToString(courseID));

                string icpFileSystem = ConfigurationManager.AppSettings["ICPFileSystem"];

                slideMediaAsset.MediaAssetID = "IntroPage";
                slideMediaAsset.MediaAssetSceneID = "IntroScene";
                slideMediaAsset.MediaAssetType = sequenceItem.SequenceItemType;
                slideMediaAsset.ContentObjectID = 0;
                slideMediaAsset.RemidiationMode = false;

                if (sequenceItem.Assets[0].URL.IndexOf("http") == -1)
                    slideMediaAsset.FlashURL = icpFileSystem + sequenceItem.Assets[0].URL;
                else
                    slideMediaAsset.FlashURL = sequenceItem.Assets[0].URL;

                slideMediaAsset.FlashSceneNo = "";
                slideMediaAsset.IsMovieEnded = false;
                slideMediaAsset.LastScene = "";
                slideMediaAsset.NextButtonState = true;
                slideMediaAsset.AudioURL = "";
                slideMediaAsset.FlashFirstSceneName = "";
                slideMediaAsset.TemplateHtml = "";          

                showSlide.MediaAsset = slideMediaAsset;
                showSlide.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowSlide;
                return showSlide;
            }
            else
            {
                return NextBack(courseID, 1);
            }

        }


        /// <summary>
        /// This method create ShowSlide command object whenver course pointer reaches to EndPage in sequence.
        /// </summary>
        /// <param name="sequenceItem">SequenceItem, ICPCourseService.SequenceItem object.</param>
        /// <returns>If successfully executes it will return ShowSlide command</returns>
        private object LoadEndPage(int courseID, ICPCourseService.SequenceItem sequenceItem)
        {
            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();

            if (sequenceItem.Assets != null && sequenceItem.Assets[0].URL != "")
            {
                ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide showSlide = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.ShowSlide();
                ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset slideMediaAsset = new ICP4.CommunicationLogic.CommunicationCommand.ShowSlide.SlideMediaAsset();

               // slideMediaAsset.IsJSPlayerEnabled = System.Configuration.ConfigurationManager.AppSettings["isJSPlayerEnabled"];
                slideMediaAsset.IsJSPlayerEnabled = CheckForJSEnabledForCourse(Convert.ToString(courseID)); 
                
                //string icpFileSystem = ConfigurationManager.AppSettings["ICPFileSystem"];
                slideMediaAsset.MediaAssetID = "EndOfCourseScene";
                slideMediaAsset.MediaAssetSceneID = "EndOfCourseScene";
                slideMediaAsset.MediaAssetType = sequenceItem.SequenceItemType;
                slideMediaAsset.ContentObjectID = 0;
                slideMediaAsset.RemidiationMode = false;

                //if (sequenceItem.Assets[0].URL.IndexOf("http") == -1)
                //    slideMediaAsset.FlashURL = icpFileSystem + sequenceItem.Assets[0].URL;
                //else
               //    slideMediaAsset.FlashURL = sequenceItem.Assets[0].URL;

                string url = "";
                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {
                    url = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.EndCourseFlashURL, brandCode, variant);
                }
                slideMediaAsset.FlashURL = url;

                slideMediaAsset.FlashSceneNo = "";
                slideMediaAsset.IsMovieEnded = false;
                slideMediaAsset.LastScene = "";
                slideMediaAsset.AudioURL = "";
                slideMediaAsset.FlashFirstSceneName = "";
                slideMediaAsset.TemplateHtml = "";
                slideMediaAsset.NextButtonState = true;
                slideMediaAsset.EnableAllTOC = true;
            
                showSlide.MediaAsset = slideMediaAsset;
                showSlide.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowSlide;

                //return showSlide;
                //For LCMS-11283              

                //string docuSignEnvelopeStatus = string.Empty;
                //ICP4.BusinessLogic.DocuSignManager.DocuSignHelper docuSignHelper = new ICP4.BusinessLogic.DocuSignManager.DocuSignHelper();
                //docuSignEnvelopeStatus=docuSignHelper.GetEnvelopeStatus();

                if (System.Web.HttpContext.Current.Session["EnrollmentID"] != null)
                {
                    int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
                    //using (ICPCourseService.CourseService courseService = new ICPCourseService.CourseService())
                    //{
                    //    courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                    //    courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                    //    string envelopeId = courseService.GetEnvelopeId(enrollmentID);
                    //    string learnerCoruseStatus = courseService.GetCourseStatusByEnrollmentId(enrollmentID);

                    //    if ((learnerCoruseStatus == "inprogress" || learnerCoruseStatus == "affidavitpending") && docuSignEnvelopeStatus.ToLower() == "completed")
                    //    {
                    //        SaveStatusAfterDocuSignProcessComplete();
                    //        return showSlide;
                    //    }
                    //    else if (docuSignEnvelopeStatus.ToLower() == "completed")
                    //    {
                    //        return showSlide;
                    //    }
                    //}


                    bool isDocuSignSigned = true;
                   
                    if (Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsPreview"]) == false)
                    {
                        ICP4.BusinessLogic.ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();
                        trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                        trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                        isDocuSignSigned = trackingService.GetDocuSignStatusByEnrollmentId(enrollmentID);                       

                    }                    

                    if (isDocuSignSigned == false )
                    {
                       return LoadDocuSignProcess(showSlide);
                    }
                    else
                    {
                        return showSlide;
                    }
                }

                //return LoadDocuSignProcess(showSlide);
            }
            else
            {
                return NextBack(courseID, 1);
            }
            return null;

        }

        private bool isNotFirstViewableObjectInSequence(ICPCourseService.Sequence sequence, ICPCourseService.SequenceItem currentSequenceItem)
        {

            for (int index = 0; index <= sequence.SequenceItems.Length - 1;index++)
            {
                if (sequence.SequenceItems[index] == currentSequenceItem)
                {
                    for (int requiredItemIndex = index-1; requiredItemIndex >= 0; requiredItemIndex--)
                    {
                        if (sequence.SequenceItems[requiredItemIndex].SequenceItemType != SequenceItemTypeName.ContentObject)
                            return true;

                    }
                }
            }
            return false;
        }
        private string GetTitleBreadCrumb(int courseID,int seqNo)
        {
            string breadCrumb = string.Empty;
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);                
                ICPCourseService.Sequence sequence = cacheManager.GetIFSequenceExistInCache(courseID, source, courseConfigurationID);
                breadCrumb = MakeTitleBreadCrumbFromSequence(seqNo, sequence);
            }
            return breadCrumb;
        }       
        
            private string GetSceneBreadCrumbShowContent(ICPCourseService.SequenceItem sequenceItem)
        {
            string breadCrumb = string.Empty;           
            breadCrumb = MakeSceneBreadCrumbFromSequenceContent(sequenceItem);           
            return breadCrumb;
        }
            private string MakeSceneBreadCrumbFromSequenceContent(ICPCourseService.SequenceItem sequenceItem)
            {
                string breadcrumb = string.Empty;
                breadcrumb = sequenceItem.ContentObjectName.ToString();                
                
                return breadcrumb;
            }
          
        private string GetSceneBreadCrumb(int courseID, int seqNo)
        {
            string breadCrumb = string.Empty;
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);                
                ICPCourseService.Sequence sequence = cacheManager.GetIFSequenceExistInCache(courseID, source, courseConfigurationID);
                breadCrumb = MakeSceneBreadCrumbFromSequence(seqNo, sequence);
            }
            return breadCrumb;
        }
        public string GetToolTipForProgressBar(int courseID, string courseName, int seqNo, int totalNoScene, int currentNoScene)
        {
            string toolTip = string.Empty;
            string sceneBreadCrumb = string.Empty;
            string sceneName = string.Empty;
            StringBuilder stringBuilder = new StringBuilder();

            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);                
                ICPCourseService.Sequence sequence = cacheManager.GetIFSequenceExistInCache(courseID, source, courseConfigurationID);
                sceneBreadCrumb = MakeSceneBreadCrumbFromSequence(seqNo, sequence);
                ICPCourseService.SequenceItem sequenceItem = GetSequenceItem(courseID, seqNo);
                sceneName = StripTagsCharArray(sequenceItem.SceneName);
            }

            stringBuilder.Append(courseName);
            stringBuilder.Append(": ");
            stringBuilder.Append(sceneBreadCrumb);
            stringBuilder.Append(": ");
            stringBuilder.Append(sceneName);
            stringBuilder.Append(" ");
            stringBuilder.Append(currentNoScene);
            stringBuilder.Append("/");
            stringBuilder.Append(totalNoScene);
            toolTip = stringBuilder.ToString();

            return toolTip;

        }
        /// <summary>
        /// This method traverses the sequnece backwards to find the root contentobject and sets its title in 
        /// breadcrumb ,if the passes argument is itself the root then it returns the empty string.
        /// </summary>
        /// <param name="seqNo">int seqNO</param>
        /// <param name="sequence">Object Sequence</param>
        /// <returns>string breadcrumb</returns>
        private string MakeTitleBreadCrumbFromSequence(int seqNo, ICPCourseService.Sequence sequence)
        {
            string breadcrumb=string.Empty;
            int parentID = sequence.SequenceItems[seqNo].ParentID;

            for (int index = seqNo; index >=0; index--)
            {
                

                if (parentID == sequence.SequenceItems[index].SequenceItemID && sequence.SequenceItems[index].SequenceItemType == SequenceItemTypeName.ContentObject)
                {
                    parentID = sequence.SequenceItems[index].ParentID;
                    breadcrumb = sequence.SequenceItems[index].ContentObjectName; 
                }
                if (parentID == 0)
                    break;
            }
            if (breadcrumb != string.Empty)
                return ": " + breadcrumb;
            else
                return breadcrumb;
        }
        /// <summary>
        /// This method traverses the sequnece backwards to find the immediate parent contentobject and sets its title in 
        /// breadcrumb ,if the passes argument is itself the root then it returns the empty string.
        /// </summary>
        /// <param name="seqNo">int seqNO</param>
        /// <param name="sequence">Object Sequence</param>
        /// <returns>string breadcrumb</returns>
        private string MakeSceneBreadCrumbFromSequence(int seqNo, ICPCourseService.Sequence sequence)
        {
            string breadcrumb = string.Empty;
            int parentID = sequence.SequenceItems[seqNo].ParentID;

            for (int index = seqNo; index >= 0; index--)
            {
                if (parentID == sequence.SequenceItems[index].SequenceItemID && sequence.SequenceItems[index].SequenceItemType == SequenceItemTypeName.ContentObject)
                {
                    breadcrumb = sequence.SequenceItems[index].ContentObjectName;
                    break;
                }
            }
            return breadcrumb;
        }
        /// <summary>
        /// This method save tracking information related to slides of course.
        /// </summary>
        /// <param name="itemGUID">ItemGUID string value, represent GUID of asset</param>
        /// <param name="ID">ID interger value, represent LearningSession_ID(a primary key)</param>
        /// <param name="statisticType">StatisticType string value</param>
        /// <param name="assetStartTime">AssetStartTime datetime value, represent the datetime value when the asset was sent to client</param>
        /// <returns></returns>
        public bool SaveCourseStudentTrack(string itemGUID, string sceneGUID, int ID, string statisticType, DateTime assetStartTime)
        {
            //Now calculate time difference
            
            /*LCMS-8972 - Start*/
            int timeInSeconds = Convert.ToInt32(Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval.Second, assetStartTime, DateTime.Now, Microsoft.VisualBasic.FirstDayOfWeek.System, Microsoft.VisualBasic.FirstWeekOfYear.System));
            /*LCMS-8972 - End*/

            if (statisticType == SequenceItemType.PreAssessment || statisticType == SequenceItemType.Quiz || statisticType == SequenceItemType.PostAssessment || statisticType == SequenceItemType.PracticeExam || statisticType == SequenceItemType.Exam)
            {
                ICPCourseService.CourseConfiguration courseConfiguration = null;
                ICPCourseService.SequenceItem sequenceItem = null;
                string itemType = "";
                int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["CurrentIndex"]);
                int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {
                    int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                    int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                    courseConfiguration = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);
                    sequenceItem = cacheManager.GetRequestedItemFromQueue(courseID, seqNo, source, courseConfigurationID);
                    itemType = cacheManager.GetSequenceItemType(courseID, seqNo, source, courseConfigurationID);
                }

                if (itemType == SequenceItemTypeName.Exam)
                {
                    itemType = sequenceItem.ExamType;
                }

                statisticType = itemType;
                sceneGUID = sequenceItem.Item_GUID;
                
            }
            else if (statisticType != LearnerStatisticsType.ContentAsset && statisticType != LearnerStatisticsType.KnowledgeCheck && statisticType != LearnerStatisticsType.FlashAsset)
            {
                sceneGUID = statisticType;
            }

            //Get visitedSceneList from session and update time for the scene
            List<VisitedScene> visitedSceneList = (List<VisitedScene>)System.Web.HttpContext.Current.Session["VisitedSceneList"];
            for (int index = 0; index < visitedSceneList.Count; index++)
            {
                VisitedScene scene = visitedSceneList[index];
                if (scene.SceneGUID == sceneGUID)
                {
                    visitedSceneList.RemoveAt(index);
                    /*LCMS-8972 - Start*/
                    scene.TimeSpent += timeInSeconds;
                    /*LCMS-8972 - End*/
                    visitedSceneList.Add(scene);
                    break;
                }


            }
            System.Web.HttpContext.Current.Session["VisitedSceneList"] = visitedSceneList;

            //if (statisticType == SequenceItemType.PreAssessment || statisticType == SequenceItemType.Quiz || statisticType == SequenceItemType.PostAssessment || statisticType == SequenceItemType.PracticeExam || statisticType == SequenceItemType.Exam)
            //{
            //    return true;
            //}

            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["isPreview"]);
            if (isPreview)//as we do not want tracking in preview mode
            {
                return true;
            }
            try
            {
                using (ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
                {
                    trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                    trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                    ICPTrackingService.LearnerStatistics learnerStatistics = new ICP4.BusinessLogic.ICPTrackingService.LearnerStatistics();

                    //LCMS-5883: no need for Item_Guid because we are not saving ContentObject Guid now in every Scene
                    //learnerStatistics.Item_GUID = itemGUID;
                    learnerStatistics.Scene_GUID = sceneGUID;
                    learnerStatistics.LearningSession_ID = ID;
                    learnerStatistics.Statistic_Type = statisticType;
                    learnerStatistics.LearnerEnrollment_ID = long.Parse(System.Web.HttpContext.Current.Session["EnrollmentID"].ToString());
                    //LCMS-5883: no need to send Time
                    /*LCMS-8972 -Start*/
                    learnerStatistics.TimeInSeconds = timeInSeconds;
                    /*LCMS-8972 -End*/

                    return trackingService.SaveLearnerStatistics_Scene(learnerStatistics);
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicyForLCMS.HandleException(ex, "ICPException");
                return false;
            }

        }


        /// <summary>
        /// This method get index of particular sequenceItem by searching the sequence based on ItemGUID AND SceneGUID
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <param name="itemGUID">ItemGUI string value</param>
        /// <param name="sceneGUID">SceneGUID string value</param>
        /// <param name="statisticsType">StatisticsType string value</param>
        /// <returns>In case of successful search it will return the index otherwise -1</returns>
        private int GetSequenceNoByID(int courseID, string itemGUID, string sceneGUID, string statisticsType)
        {
            int seqeunceNo = -1;
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                seqeunceNo = cacheManager.GetRequestedItemNoFromQueue(courseID, itemGUID, sceneGUID, statisticsType, source, courseConfigurationID);
            }
            return seqeunceNo;
        }


        /// <summary>
        /// This method get index of particular sequenceItem by searching the sequence based on ItemID
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <param name="sequenceItemID">SequenceItemID integer value</param>
        /// <returns>In case of successful search it will return the index otherwise -1</returns>
        private int GetSequenceNoBySequenceItemID(int courseID, int sequenceItemID, String type)
        {
            int seqeunceNo = -1;
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                seqeunceNo = cacheManager.GetRequestedItemNoFromQueueOnSequenceItemID(courseID, sequenceItemID, type, source, courseConfigurationID);
            }
            return seqeunceNo;
        }


        /// <summary>
        /// This method translate ICPCourseService.CourseConfiguration object to ICPAssessmentService.CourseConfiguration
        /// </summary>
        /// <param name="courseConfiguration">CourseConfiguration, ICPCourseService.CourseConfiguration</param>
        /// <returns>ICPAssessmentService.CourseConfiguration object</returns>
        private ICPAssessmentService.CourseConfiguration TranslateCourseServiceConfigrationToAssessmentServiceConfiguration(ICPCourseService.CourseConfiguration courseConfiguration)
        {
            ICPAssessmentService.CourseConfiguration translatedConfiguration = new ICPAssessmentService.CourseConfiguration();

            translatedConfiguration.CourseConfigurationID = courseConfiguration.CourseConfigurationID;

            translatedConfiguration.CompletionCompleteAfterNOUniqueCourseVisit = courseConfiguration.CompletionCompleteAfterNOUniqueCourseVisit;
            translatedConfiguration.CompletionMustCompleteWithinSpecifiedAmountOfTimeDay = courseConfiguration.CompletionMustCompleteWithinSpecifiedAmountOfTimeDay;
            translatedConfiguration.CompletionMustCompleteWithinSpecifiedAmountOfTimeMinute = courseConfiguration.CompletionMustCompleteWithinSpecifiedAmountOfTimeMinute;
            translatedConfiguration.CompletionPostAssessmentAttempted = courseConfiguration.CompletionPostAssessmentAttempted;
            translatedConfiguration.CompletionPostAssessmentMastery = courseConfiguration.CompletionPostAssessmentMastery;
            translatedConfiguration.CompletionPreAssessmentMastery = courseConfiguration.CompletionPreAssessmentMastery;
            translatedConfiguration.CompletionQuizMastery = courseConfiguration.CompletionQuizMastery;
            translatedConfiguration.CompletionSurvey = courseConfiguration.CompletionSurvey;
            translatedConfiguration.CompletionViewEverySceneInCourse = courseConfiguration.CompletionViewEverySceneInCourse;


            translatedConfiguration.PlayerAllowUserToReviewCourseAfterCompletion = courseConfiguration.PlayerAllowUserToReviewCourseAfterCompletion;
            translatedConfiguration.PlayerCourseFlow = courseConfiguration.PlayerCourseFlow;
            translatedConfiguration.PlayerEnableContent = courseConfiguration.PlayerEnableContent;
            translatedConfiguration.PlayerEnableEndOfCourseScene = courseConfiguration.PlayerEnableEndOfCourseScene;
            translatedConfiguration.PlayerEnableIntroPage = courseConfiguration.PlayerEnableIntroPage;
            translatedConfiguration.PlayerEnforceTimedOutline = courseConfiguration.PlayerEnforceTimedOutline;
            translatedConfiguration.PlayerIdleUserTimeout = courseConfiguration.PlayerIdleUserTimeout;


            if (translatedConfiguration.PostAssessmentConfiguration == null)
            {
                translatedConfiguration.PostAssessmentConfiguration = new ICPAssessmentService.AssessmentConfiguration();
            }

            translatedConfiguration.PostAssessmentConfiguration.ID = courseConfiguration.PostAssessmentConfiguration.ID;
            translatedConfiguration.PostAssessmentConfiguration.AssessmentType = courseConfiguration.PostAssessmentConfiguration.AssessmentType;          
            translatedConfiguration.PostAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt = courseConfiguration.PostAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt;
            translatedConfiguration.PostAssessmentConfiguration.AllowPauseResumeAssessment = courseConfiguration.PostAssessmentConfiguration.AllowPauseResumeAssessment;
            translatedConfiguration.PostAssessmentConfiguration.AllowSkippingQuestion = courseConfiguration.PostAssessmentConfiguration.AllowSkippingQuestion;
            translatedConfiguration.PostAssessmentConfiguration.ContentRemediation = courseConfiguration.PostAssessmentConfiguration.ContentRemediation;
            translatedConfiguration.PostAssessmentConfiguration.Enabled = courseConfiguration.PostAssessmentConfiguration.Enabled;
            translatedConfiguration.PostAssessmentConfiguration.EnforceMaximumTimeLimit = courseConfiguration.PostAssessmentConfiguration.EnforceMaximumTimeLimit;
            translatedConfiguration.PostAssessmentConfiguration.EnforceUniqueQuestionsOnRetake = courseConfiguration.PostAssessmentConfiguration.EnforceUniqueQuestionsOnRetake;
            translatedConfiguration.PostAssessmentConfiguration.MasteryScore = courseConfiguration.PostAssessmentConfiguration.MasteryScore;
            translatedConfiguration.PostAssessmentConfiguration.MaximumNOAttempt = courseConfiguration.PostAssessmentConfiguration.MaximumNOAttempt;
            translatedConfiguration.PostAssessmentConfiguration.NOQuestion = courseConfiguration.PostAssessmentConfiguration.NOQuestion;
            translatedConfiguration.PostAssessmentConfiguration.ProctoredAssessment = courseConfiguration.PostAssessmentConfiguration.ProctoredAssessment;
            translatedConfiguration.PostAssessmentConfiguration.QuestionLevelResult = courseConfiguration.PostAssessmentConfiguration.QuestionLevelResult;
            translatedConfiguration.PostAssessmentConfiguration.RandomizeAnswers = courseConfiguration.PostAssessmentConfiguration.RandomizeAnswers;
            translatedConfiguration.PostAssessmentConfiguration.RandomizeQuestion = courseConfiguration.PostAssessmentConfiguration.RandomizeQuestion;
            translatedConfiguration.PostAssessmentConfiguration.ScoreAsYouGo = courseConfiguration.PostAssessmentConfiguration.ScoreAsYouGo;
            translatedConfiguration.PostAssessmentConfiguration.ScoreType = courseConfiguration.PostAssessmentConfiguration.ScoreType;
            translatedConfiguration.PostAssessmentConfiguration.ShowQuestionAnswerSummary = courseConfiguration.PostAssessmentConfiguration.ShowQuestionAnswerSummary;

            translatedConfiguration.PostAssessmentConfiguration.AdvanceQuestionSelectionType = courseConfiguration.PostAssessmentConfiguration.AdvanceQuestionSelectionType;
            translatedConfiguration.PostAssessmentConfiguration.UseWeightedScore = courseConfiguration.PostAssessmentConfiguration.UseWeightedScore;
            translatedConfiguration.PostAssessmentConfiguration.DisplaySeatTimeSatisfiedMessageTF = courseConfiguration.PostAssessmentConfiguration.DisplaySeatTimeSatisfiedMessageTF;
            translatedConfiguration.PostAssessmentConfiguration.AllowPostAssessmentAfterSeatTimeSatisfiedTF = courseConfiguration.PostAssessmentConfiguration.AllowPostAssessmentAfterSeatTimeSatisfiedTF;
            
            

            translatedConfiguration.PostAssessmentConfiguration.MinimumTimeBeforeStart = courseConfiguration.PostAssessmentConfiguration.MinimumTimeBeforeStart;
            translatedConfiguration.PostAssessmentConfiguration.MinimumTimeBeforeStartUnit = courseConfiguration.PostAssessmentConfiguration.MinimumTimeBeforeStartUnit;
            translatedConfiguration.PostAssessmentConfiguration.RestrictiveMode = courseConfiguration.PostAssessmentConfiguration.RestrictiveMode;
            translatedConfiguration.PostAssessmentConfiguration.StrictlyEnforcePolicyToBeUsed = courseConfiguration.PostAssessmentConfiguration.StrictlyEnforcePolicyToBeUsed;

            


            if (translatedConfiguration.PreAssessmentConfiguration == null)
            {
                translatedConfiguration.PreAssessmentConfiguration = new ICPAssessmentService.AssessmentConfiguration();
            }

            translatedConfiguration.PreAssessmentConfiguration.ID = courseConfiguration.PreAssessmentConfiguration.ID;
            translatedConfiguration.PreAssessmentConfiguration.AssessmentType = courseConfiguration.PreAssessmentConfiguration.AssessmentType;
            translatedConfiguration.PreAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt = courseConfiguration.PreAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt;
            translatedConfiguration.PreAssessmentConfiguration.AllowPauseResumeAssessment = courseConfiguration.PreAssessmentConfiguration.AllowPauseResumeAssessment;
            translatedConfiguration.PreAssessmentConfiguration.AllowSkippingQuestion = courseConfiguration.PreAssessmentConfiguration.AllowSkippingQuestion;
            translatedConfiguration.PreAssessmentConfiguration.ContentRemediation = courseConfiguration.PreAssessmentConfiguration.ContentRemediation;
            translatedConfiguration.PreAssessmentConfiguration.Enabled = courseConfiguration.PreAssessmentConfiguration.Enabled;
            translatedConfiguration.PreAssessmentConfiguration.EnforceMaximumTimeLimit = courseConfiguration.PreAssessmentConfiguration.EnforceMaximumTimeLimit;
            translatedConfiguration.PreAssessmentConfiguration.EnforceUniqueQuestionsOnRetake = courseConfiguration.PreAssessmentConfiguration.EnforceUniqueQuestionsOnRetake;
            translatedConfiguration.PreAssessmentConfiguration.MasteryScore = courseConfiguration.PreAssessmentConfiguration.MasteryScore;
            translatedConfiguration.PreAssessmentConfiguration.MaximumNOAttempt = courseConfiguration.PreAssessmentConfiguration.MaximumNOAttempt;
            translatedConfiguration.PreAssessmentConfiguration.NOQuestion = courseConfiguration.PreAssessmentConfiguration.NOQuestion;
            translatedConfiguration.PreAssessmentConfiguration.ProctoredAssessment = courseConfiguration.PreAssessmentConfiguration.ProctoredAssessment;
            translatedConfiguration.PreAssessmentConfiguration.QuestionLevelResult = courseConfiguration.PreAssessmentConfiguration.QuestionLevelResult;
            translatedConfiguration.PreAssessmentConfiguration.RandomizeAnswers = courseConfiguration.PreAssessmentConfiguration.RandomizeAnswers;
            translatedConfiguration.PreAssessmentConfiguration.RandomizeQuestion = courseConfiguration.PreAssessmentConfiguration.RandomizeQuestion;
            translatedConfiguration.PreAssessmentConfiguration.ScoreAsYouGo = courseConfiguration.PreAssessmentConfiguration.ScoreAsYouGo;
            translatedConfiguration.PreAssessmentConfiguration.ScoreAsYouGo = courseConfiguration.PreAssessmentConfiguration.ScoreAsYouGo;
            translatedConfiguration.PreAssessmentConfiguration.ScoreType = courseConfiguration.PreAssessmentConfiguration.ScoreType;
            translatedConfiguration.PreAssessmentConfiguration.ShowQuestionAnswerSummary = courseConfiguration.PreAssessmentConfiguration.ShowQuestionAnswerSummary;
            translatedConfiguration.PreAssessmentConfiguration.AdvanceQuestionSelectionType = courseConfiguration.PreAssessmentConfiguration.AdvanceQuestionSelectionType;
            translatedConfiguration.PreAssessmentConfiguration.MinimumTimeBeforeStart = courseConfiguration.PreAssessmentConfiguration.MinimumTimeBeforeStart;
            translatedConfiguration.PreAssessmentConfiguration.MinimumTimeBeforeStartUnit = courseConfiguration.PreAssessmentConfiguration.MinimumTimeBeforeStartUnit;
            translatedConfiguration.PreAssessmentConfiguration.RestrictiveMode = courseConfiguration.PreAssessmentConfiguration.RestrictiveMode;
            translatedConfiguration.PreAssessmentConfiguration.StrictlyEnforcePolicyToBeUsed = courseConfiguration.PreAssessmentConfiguration.StrictlyEnforcePolicyToBeUsed;
            translatedConfiguration.PreAssessmentConfiguration.UseWeightedScore = courseConfiguration.PreAssessmentConfiguration.UseWeightedScore;
            translatedConfiguration.PreAssessmentConfiguration.DisplaySeatTimeSatisfiedMessageTF = courseConfiguration.PreAssessmentConfiguration.DisplaySeatTimeSatisfiedMessageTF;
            translatedConfiguration.PreAssessmentConfiguration.AllowPostAssessmentAfterSeatTimeSatisfiedTF = courseConfiguration.PreAssessmentConfiguration.AllowPostAssessmentAfterSeatTimeSatisfiedTF;


            if (translatedConfiguration.QuizConfiguration == null)
            {
                translatedConfiguration.QuizConfiguration = new ICPAssessmentService.AssessmentConfiguration();
            }

            translatedConfiguration.QuizConfiguration.ID = courseConfiguration.QuizConfiguration.ID;
            translatedConfiguration.QuizConfiguration.AssessmentType = courseConfiguration.QuizConfiguration.AssessmentType;
            translatedConfiguration.QuizConfiguration.ActionToTakeAfterFailingMaxAttempt = courseConfiguration.QuizConfiguration.ActionToTakeAfterFailingMaxAttempt;
            translatedConfiguration.QuizConfiguration.AllowPauseResumeAssessment = courseConfiguration.QuizConfiguration.AllowPauseResumeAssessment;
            translatedConfiguration.QuizConfiguration.AllowSkippingQuestion = courseConfiguration.QuizConfiguration.AllowSkippingQuestion;
            translatedConfiguration.QuizConfiguration.ContentRemediation = courseConfiguration.QuizConfiguration.ContentRemediation;
            translatedConfiguration.QuizConfiguration.Enabled = courseConfiguration.QuizConfiguration.Enabled;
            translatedConfiguration.QuizConfiguration.EnforceMaximumTimeLimit = courseConfiguration.QuizConfiguration.EnforceMaximumTimeLimit;
            translatedConfiguration.QuizConfiguration.EnforceUniqueQuestionsOnRetake = courseConfiguration.QuizConfiguration.EnforceUniqueQuestionsOnRetake;
            translatedConfiguration.QuizConfiguration.MasteryScore = courseConfiguration.QuizConfiguration.MasteryScore;
            translatedConfiguration.QuizConfiguration.MaximumNOAttempt = courseConfiguration.QuizConfiguration.MaximumNOAttempt;
            translatedConfiguration.QuizConfiguration.NOQuestion = courseConfiguration.QuizConfiguration.NOQuestion;
            translatedConfiguration.QuizConfiguration.ProctoredAssessment = courseConfiguration.QuizConfiguration.ProctoredAssessment;
            translatedConfiguration.QuizConfiguration.QuestionLevelResult = courseConfiguration.QuizConfiguration.QuestionLevelResult;
            translatedConfiguration.QuizConfiguration.RandomizeAnswers = courseConfiguration.QuizConfiguration.RandomizeAnswers;
            translatedConfiguration.QuizConfiguration.RandomizeQuestion = courseConfiguration.QuizConfiguration.RandomizeQuestion;
            translatedConfiguration.QuizConfiguration.ScoreAsYouGo = courseConfiguration.QuizConfiguration.ScoreAsYouGo;
            translatedConfiguration.QuizConfiguration.ScoreAsYouGo = courseConfiguration.QuizConfiguration.ScoreAsYouGo;
            translatedConfiguration.QuizConfiguration.ScoreType = courseConfiguration.QuizConfiguration.ScoreType;
            translatedConfiguration.QuizConfiguration.ShowQuestionAnswerSummary = courseConfiguration.QuizConfiguration.ShowQuestionAnswerSummary;
            translatedConfiguration.QuizConfiguration.AdvanceQuestionSelectionType = courseConfiguration.QuizConfiguration.AdvanceQuestionSelectionType;
            translatedConfiguration.QuizConfiguration.MinimumTimeBeforeStart = courseConfiguration.QuizConfiguration.MinimumTimeBeforeStart;
            translatedConfiguration.QuizConfiguration.MinimumTimeBeforeStartUnit = courseConfiguration.QuizConfiguration.MinimumTimeBeforeStartUnit;
            translatedConfiguration.QuizConfiguration.RestrictiveMode = courseConfiguration.QuizConfiguration.RestrictiveMode;
            translatedConfiguration.QuizConfiguration.StrictlyEnforcePolicyToBeUsed = courseConfiguration.QuizConfiguration.StrictlyEnforcePolicyToBeUsed;
            translatedConfiguration.QuizConfiguration.UseWeightedScore = courseConfiguration.QuizConfiguration.UseWeightedScore;
            translatedConfiguration.QuizConfiguration.DisplaySeatTimeSatisfiedMessageTF = courseConfiguration.QuizConfiguration.DisplaySeatTimeSatisfiedMessageTF;
            translatedConfiguration.QuizConfiguration.AllowPostAssessmentAfterSeatTimeSatisfiedTF = courseConfiguration.QuizConfiguration.AllowPostAssessmentAfterSeatTimeSatisfiedTF;

            translatedConfiguration.ValidationNOMissedQuestionsAllowed = courseConfiguration.ValidationNOMissedQuestionsAllowed;
            translatedConfiguration.ValidationNOValidationQuestion = courseConfiguration.ValidationNOValidationQuestion;
            translatedConfiguration.ValidationRequireIdentityValidation = courseConfiguration.ValidationRequireIdentityValidation;
            translatedConfiguration.ValidationTimeBetweenQuestion = courseConfiguration.ValidationTimeBetweenQuestion;
            translatedConfiguration.ValidationTimeToAnswerQuestion = courseConfiguration.ValidationTimeToAnswerQuestion;


            //Practice Exam
            if (translatedConfiguration.PracticeAssessmentConfiguration == null)
            {
                translatedConfiguration.PracticeAssessmentConfiguration = new ICPAssessmentService.AssessmentConfiguration();
            }

            translatedConfiguration.PracticeAssessmentConfiguration.ID = courseConfiguration.PracticeAssessmentConfiguration.ID;
            translatedConfiguration.PracticeAssessmentConfiguration.AssessmentType = courseConfiguration.PracticeAssessmentConfiguration.AssessmentType;
            translatedConfiguration.PracticeAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt = courseConfiguration.PracticeAssessmentConfiguration.ActionToTakeAfterFailingMaxAttempt;
            translatedConfiguration.PracticeAssessmentConfiguration.AllowPauseResumeAssessment = courseConfiguration.PracticeAssessmentConfiguration.AllowPauseResumeAssessment;
            translatedConfiguration.PracticeAssessmentConfiguration.AllowSkippingQuestion = courseConfiguration.PracticeAssessmentConfiguration.AllowSkippingQuestion;
            translatedConfiguration.PracticeAssessmentConfiguration.ContentRemediation = courseConfiguration.PracticeAssessmentConfiguration.ContentRemediation;
            translatedConfiguration.PracticeAssessmentConfiguration.Enabled = courseConfiguration.PracticeAssessmentConfiguration.Enabled;
            translatedConfiguration.PracticeAssessmentConfiguration.EnforceMaximumTimeLimit = courseConfiguration.PracticeAssessmentConfiguration.EnforceMaximumTimeLimit;
            translatedConfiguration.PracticeAssessmentConfiguration.EnforceUniqueQuestionsOnRetake = courseConfiguration.PracticeAssessmentConfiguration.EnforceUniqueQuestionsOnRetake;
            translatedConfiguration.PracticeAssessmentConfiguration.MasteryScore = courseConfiguration.PracticeAssessmentConfiguration.MasteryScore;
            translatedConfiguration.PracticeAssessmentConfiguration.MaximumNOAttempt = courseConfiguration.PracticeAssessmentConfiguration.MaximumNOAttempt;
            translatedConfiguration.PracticeAssessmentConfiguration.NOQuestion = courseConfiguration.PracticeAssessmentConfiguration.NOQuestion;
            translatedConfiguration.PracticeAssessmentConfiguration.ProctoredAssessment = courseConfiguration.PracticeAssessmentConfiguration.ProctoredAssessment;
            translatedConfiguration.PracticeAssessmentConfiguration.QuestionLevelResult = courseConfiguration.PracticeAssessmentConfiguration.QuestionLevelResult;
            translatedConfiguration.PracticeAssessmentConfiguration.RandomizeAnswers = courseConfiguration.PracticeAssessmentConfiguration.RandomizeAnswers;
            translatedConfiguration.PracticeAssessmentConfiguration.RandomizeQuestion = courseConfiguration.PracticeAssessmentConfiguration.RandomizeQuestion;
            translatedConfiguration.PracticeAssessmentConfiguration.ScoreAsYouGo = courseConfiguration.PracticeAssessmentConfiguration.ScoreAsYouGo;
            translatedConfiguration.PracticeAssessmentConfiguration.ScoreType = courseConfiguration.PracticeAssessmentConfiguration.ScoreType;
            translatedConfiguration.PracticeAssessmentConfiguration.ShowQuestionAnswerSummary = courseConfiguration.PracticeAssessmentConfiguration.ShowQuestionAnswerSummary;

            translatedConfiguration.PracticeAssessmentConfiguration.AdvanceQuestionSelectionType = courseConfiguration.PracticeAssessmentConfiguration.AdvanceQuestionSelectionType;
            translatedConfiguration.PracticeAssessmentConfiguration.UseWeightedScore = courseConfiguration.PracticeAssessmentConfiguration.UseWeightedScore;
            translatedConfiguration.PracticeAssessmentConfiguration.DisplaySeatTimeSatisfiedMessageTF = courseConfiguration.PracticeAssessmentConfiguration.DisplaySeatTimeSatisfiedMessageTF;
            translatedConfiguration.PracticeAssessmentConfiguration.AllowPostAssessmentAfterSeatTimeSatisfiedTF = courseConfiguration.PracticeAssessmentConfiguration.AllowPostAssessmentAfterSeatTimeSatisfiedTF;



            translatedConfiguration.PracticeAssessmentConfiguration.MinimumTimeBeforeStart = courseConfiguration.PracticeAssessmentConfiguration.MinimumTimeBeforeStart;
            translatedConfiguration.PracticeAssessmentConfiguration.MinimumTimeBeforeStartUnit = courseConfiguration.PracticeAssessmentConfiguration.MinimumTimeBeforeStartUnit;
            translatedConfiguration.PracticeAssessmentConfiguration.RestrictiveMode = courseConfiguration.PracticeAssessmentConfiguration.RestrictiveMode;
            translatedConfiguration.PracticeAssessmentConfiguration.StrictlyEnforcePolicyToBeUsed = courseConfiguration.PracticeAssessmentConfiguration.StrictlyEnforcePolicyToBeUsed;

            return translatedConfiguration;

        }


        private ICPAssessmentService.AssessmentConfiguration TranslateCourseServiceAssessmentConfigurationToAssessmentServiceAssessmentConfiguration(ICPCourseService.AssessmentConfiguration courseServiceassessmentConfiguration)
        {
            ICPAssessmentService.AssessmentConfiguration assessmentServiceassessmentConfiguration = new ICP4.BusinessLogic.ICPAssessmentService.AssessmentConfiguration();

            assessmentServiceassessmentConfiguration.AssessmentType = courseServiceassessmentConfiguration.AssessmentType;
            assessmentServiceassessmentConfiguration.ID = courseServiceassessmentConfiguration.ID;
            assessmentServiceassessmentConfiguration.AssessmentType = courseServiceassessmentConfiguration.AssessmentType;
            assessmentServiceassessmentConfiguration.ActionToTakeAfterFailingMaxAttempt = courseServiceassessmentConfiguration.ActionToTakeAfterFailingMaxAttempt;
            assessmentServiceassessmentConfiguration.AllowPauseResumeAssessment = courseServiceassessmentConfiguration.AllowPauseResumeAssessment;
            assessmentServiceassessmentConfiguration.AllowSkippingQuestion = courseServiceassessmentConfiguration.AllowSkippingQuestion;
            assessmentServiceassessmentConfiguration.ContentRemediation = courseServiceassessmentConfiguration.ContentRemediation;
            assessmentServiceassessmentConfiguration.Enabled = courseServiceassessmentConfiguration.Enabled;
            assessmentServiceassessmentConfiguration.EnforceMaximumTimeLimit = courseServiceassessmentConfiguration.EnforceMaximumTimeLimit;
            assessmentServiceassessmentConfiguration.EnforceUniqueQuestionsOnRetake = courseServiceassessmentConfiguration.EnforceUniqueQuestionsOnRetake;
            assessmentServiceassessmentConfiguration.MasteryScore = courseServiceassessmentConfiguration.MasteryScore;
            assessmentServiceassessmentConfiguration.MaximumNOAttempt = courseServiceassessmentConfiguration.MaximumNOAttempt;
            assessmentServiceassessmentConfiguration.NOQuestion = courseServiceassessmentConfiguration.NOQuestion;
            assessmentServiceassessmentConfiguration.ProctoredAssessment = courseServiceassessmentConfiguration.ProctoredAssessment;
            assessmentServiceassessmentConfiguration.QuestionLevelResult = courseServiceassessmentConfiguration.QuestionLevelResult;
            assessmentServiceassessmentConfiguration.RandomizeAnswers = courseServiceassessmentConfiguration.RandomizeAnswers;
            assessmentServiceassessmentConfiguration.RandomizeQuestion = courseServiceassessmentConfiguration.RandomizeQuestion;
            assessmentServiceassessmentConfiguration.ScoreAsYouGo = courseServiceassessmentConfiguration.ScoreAsYouGo;
            assessmentServiceassessmentConfiguration.ScoreType = courseServiceassessmentConfiguration.ScoreType;
            assessmentServiceassessmentConfiguration.ShowQuestionAnswerSummary = courseServiceassessmentConfiguration.ShowQuestionAnswerSummary;
            assessmentServiceassessmentConfiguration.AdvanceQuestionSelectionType = courseServiceassessmentConfiguration.AdvanceQuestionSelectionType;
            assessmentServiceassessmentConfiguration.UseWeightedScore = courseServiceassessmentConfiguration.UseWeightedScore;
            assessmentServiceassessmentConfiguration.DisplaySeatTimeSatisfiedMessageTF = courseServiceassessmentConfiguration.DisplaySeatTimeSatisfiedMessageTF;
            assessmentServiceassessmentConfiguration.AllowPostAssessmentAfterSeatTimeSatisfiedTF = courseServiceassessmentConfiguration.AllowPostAssessmentAfterSeatTimeSatisfiedTF;
            assessmentServiceassessmentConfiguration.MinimumTimeBeforeStart = courseServiceassessmentConfiguration.MinimumTimeBeforeStart;
            assessmentServiceassessmentConfiguration.MinimumTimeBeforeStartUnit = courseServiceassessmentConfiguration.MinimumTimeBeforeStartUnit;
            assessmentServiceassessmentConfiguration.RestrictiveMode = courseServiceassessmentConfiguration.RestrictiveMode;
            assessmentServiceassessmentConfiguration.StrictlyEnforcePolicyToBeUsed = courseServiceassessmentConfiguration.StrictlyEnforcePolicyToBeUsed;
            return assessmentServiceassessmentConfiguration;        
        }


        /// <summary>
        /// This method gets item from sequence according to sequenceNo
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <param name="seqNo">SeqNo integer value, represetn index to currently pointed sequenceItem</param>
        /// <returns>ICPCourseService.SequenceItem object</returns>
        public ICPCourseService.SequenceItem GetSequenceItem(int courseID, int seqNo)
        {
            ICPCourseService.SequenceItem sequenceItem = null;
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                sequenceItem = cacheManager.GetRequestedItemFromQueue(courseID, seqNo, source, courseConfigurationID);
            }
            return sequenceItem;
        }

        /// <summary>
        /// This method gets item from sequence according to sequenceNo
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <param name="seqNo">SeqNo integer value, represetn index to currently pointed sequenceItem</param>
        /// <returns>ICPCourseService.SequenceItem object</returns>
        private ICPCourseService.SequenceItem GetDemoSequenceItem(int courseID, int seqNo)
        {
            ICPCourseService.SequenceItem sequenceItem = null;
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                sequenceItem = cacheManager.GetRequestedDemoItemFromQueue(courseID, seqNo);
            }
            return sequenceItem;
        }

        /// <summary>
        /// This method gets item from sequence according to NEXT/BACK request.
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <param name="direction">Direction integer value, if contain 1 represent NEXT : if contain -1 represent BACK</param>
        /// <param name="seqNo">SeqNo integer value, represetn index to currently pointed sequenceItem</param>
        /// <returns>ICPCourseService.SequenceItem object</returns>
        private ICPCourseService.SequenceItem GetNextBackItem(int courseID, int direction, int seqNo)
        {
            ICPCourseService.SequenceItem sequenceItem = null;
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                sequenceItem = cacheManager.GetNextBackItem(courseID, direction, seqNo);
            }
            return sequenceItem;
        }

        /// <summary>
        /// This method gets item from sequence according to NEXT/BACK request in DEMO mode.
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <param name="direction">Direction integer value, if contain 1 represent NEXT : if contain -1 represent BACK</param>
        /// <param name="seqNo">SeqNo integer value, represetn index to currently pointed sequenceItem</param>
        /// <returns>ICPCourseService.SequenceItem object</returns>
        private ICPCourseService.SequenceItem GetDemoNextBackItem(int courseID, int direction, int seqNo)
        {
            ICPCourseService.SequenceItem sequenceItem = null;
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                sequenceItem = cacheManager.GetDemoNextBackItem(courseID, direction, seqNo);
            }
            return sequenceItem;
        }


        /// <summary>
        /// This method get previous course track if any by calling Tracking Service.
        /// </summary>
        /// <param name="learnerSessionID">LearnerSessionID string value, represent GUID for current session</param>
        /// <returns>ICPTrackingService.LearnerCourseTrackInfo object</returns>
        private ICPTrackingService.LearnerCourseTrackInfo GetPreviousInfo(string learnerSessionID)
        {
            ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();
            trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
            trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

            ICPTrackingService.LearnerCourseTrackInfo learnerCourseTrackInfo = trackingService.GetLearnerCoursetrackInfo(learnerSessionID);

            return learnerCourseTrackInfo;
        }


        /// <summary>
        /// This method get previous course track if any by calling Tracking Service.
        /// </summary>
        /// <param name="learnerSessionID">LearnerSessionID string value, represent GUID for current session</param>
        /// <returns>ICPTrackingService.LearnerCourseTrackInfo object</returns>
        private bool IsCourseLocked(int enrollmentID,out string lockingReason)
        {
            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["isPreview"]);
            if (isPreview)//as course is never locked in preview mode
            {
                lockingReason = string.Empty;
                return false;
            }
            ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();
            trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
            trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

            return trackingService.IsCourseLocked(enrollmentID,out  lockingReason);
        }

        /// <summary>
        /// This method get course CourseConfiguration by calling Course Service if not available in the cache.
        /// </summary>
        /// <param name="courseID">CourseID intger value</param>
        /// <returns>ICPCourseService.CourseConfiguration object</returns>
        private ICPCourseService.CourseConfiguration GetCourseConfiguration(int CourseConfigurationID)
        {

            CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager();
            ICPCourseService.CourseConfiguration courseConfiguration = new ICP4.BusinessLogic.ICPCourseService.CourseConfiguration();
            ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService();
            courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
            courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
            int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
            int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
            courseConfiguration = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);

            if (courseConfiguration == null)
            {
                courseConfiguration = courseService.GetCourseConfiguaration(courseConfigurationID);
                cacheManager.CreateCourseConfigurationInCache(CourseConfigurationID, courseConfiguration);
            }

            return courseConfiguration;
        }

        /// <summary>
        /// This method insert course approval ID in the cache.
        /// </summary>
        /// <param name="courseID">CourseApprovalID intger value</param>
        /// <returns>true/false</returns>
        private bool InsertCourseApprovalInCache(int courseApprovalID)
        {
            CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager();            
            int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
            int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
            DateTime learningSessionStartDateTime = Convert.ToDateTime(System.Web.HttpContext.Current.Session["LearningSessionStartDateTime"]);
            cacheManager.CreateCourseApprovalInCache(courseApprovalID, learningSessionStartDateTime);
            return true;
        }

        /// <summary>
        /// This method get Practice Exam Assessment Configuration by calling Course Service.
        /// </summary>
        /// <param name="courseID">examID intger value</param>
        /// <returns>ICPCourseService.CourseConfiguration object</returns>
        private ICPCourseService.AssessmentConfiguration GetAssessmentConfiguration(int examID)
        {
            ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService();
            ICPCourseService.AssessmentConfiguration assessmentConfiguration = new ICPCourseService.AssessmentConfiguration();
            courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
            courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
            assessmentConfiguration = courseService.GetPraceticeExamAssessmentConfiguration(examID);
            return assessmentConfiguration;
        }

        /// <summary>
        /// This method get Quiz Exam Assessment Configuration by calling Course Service.
        /// </summary>
        /// <param name="courseID">contentObjectID intger value</param>
        /// <returns>ICPCourseService.CourseConfiguration object</returns>
        private ICPCourseService.AssessmentConfiguration GetAssessentConfigurationForQuiz(int contentObjectID)
        {
            ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService();
            ICPCourseService.AssessmentConfiguration assessmentConfiguration = new ICPCourseService.AssessmentConfiguration();
            courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
            courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
            assessmentConfiguration = courseService.GetQuizExamAssessmentConfiguration(contentObjectID);
            return assessmentConfiguration;
        }

        /// <summary>
        /// This method get course Sequence by calling Course Service if not available in the cache.
        /// </summary>
        /// <param name="courseID">CourseID integer value.</param>
        /// <param name="courseConfiguration">CourseConfiguration, ICPCourseService.CourseConfiguration object</param>
        /// <returns>ICPCourseService.Sequence object</returns>
        private void GetCourseSequence(int courseID, ICPCourseService.CourseConfiguration courseConfiguration)
        {

            CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager();
            ICPCourseService.Sequence courseSequence = new ICPCourseService.Sequence();
            ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService();
            courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
            courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsPreview"]);
            int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
            int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
            int courseApproval = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseApprovalID"]);
            if (ConfigurationManager.AppSettings["ClearCache"] != "Yes" && isPreview == false)
            {
                courseSequence = cacheManager.GetIFSequenceExistInCache(courseID, source, courseConfigurationID);
            }
            else
            {
                courseSequence = null;
            }

            if (courseSequence == null)
            {
                courseSequence = courseService.GetSequence(courseID, courseConfiguration);
                if (ConfigurationManager.AppSettings["ClearCache"] == "Yes" || isPreview == true)
                {
                    courseSequence = courseService.GetSequence(courseID, courseConfiguration);

                    if (HttpRuntime.Cache["COURSESEQUENCE" + "_" + courseID.ToString() + "_" + courseConfigurationID.ToString() + "_" + source.ToString()] != null)
                    {
                        HttpRuntime.Cache["COURSESEQUENCE" + "_" + courseID.ToString() + "_" + courseConfigurationID.ToString() + "_" + source.ToString()] = courseSequence;
                    }

                //    System.Web.HttpContext.Current.Cache.Remove(courseID.ToString() + "CourseSequence");
                }
                if (HttpRuntime.Cache["COURSESEQUENCE" + "_" + courseID.ToString() + "_" + courseConfigurationID.ToString() + "_" + source.ToString()] == null)
                {

                    cacheManager.CreateCourseSequenceInCache(courseID, courseSequence, source, courseConfigurationID);
                }

            }
        }

        /// <summary>
        /// This method get course Sequence by calling Course Service if not available in the cache.
        /// </summary>
        /// <param name="courseID">CourseID integer value.</param>
        /// <param name="courseConfiguration">CourseConfiguration, ICPCourseService.CourseConfiguration object</param>
        /// <returns>ICPCourseService.Sequence object</returns>
        private ICPCourseService.Sequence GetDemoableCourseSequence(int courseID)
        {

            CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager();
            ICPCourseService.Sequence courseSequence = null;
            ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService();
            courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
            courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

            courseSequence = cacheManager.GetIFDemoSequenceExistInCache(courseID);

            if (courseSequence == null)
            {
                courseSequence = courseService.GetCourseDemoSequence(courseID);
                cacheManager.CreateDemoCourseSequenceInCache(courseID, courseSequence);
            }

            return courseSequence;
        }


        /// <summary>
        /// This method converts array of ICPCourseService.ContentObject to List of ShowTableofContent.ContentObjectItem
        /// </summary>
        /// <param name="contentObjects">ContentObjects, Array of ICPCourseService.ContentObject object</param>
        /// <param name="traversedContentObjectIDs">TraversedContentObjectIDs list of integer, represent the List of all traversed ContentObjectId</param>
        /// <param name="byDefault">ByDefault boolean value</param>
        /// <returns>List of ShowTableofContent.ContentObjectItem object</returns>
        private List<ICP4.CommunicationLogic.CommunicationCommand.ShowTableofContent.TOCItem> ContentObjectsTranslator(ICPCourseService.TOCItem[] tocitems, List<int> traversedContentObjectIDs, bool byDefault)
        {
            List<ICP4.CommunicationLogic.CommunicationCommand.ShowTableofContent.TOCItem> bizContentObjects = new List<ICP4.CommunicationLogic.CommunicationCommand.ShowTableofContent.TOCItem>();

            if (tocitems != null)
            {
                foreach (ICPCourseService.TOCItem tocitem in tocitems)
                {
                    bizContentObjects.Add(ContentObjectTranslator(tocitem, traversedContentObjectIDs, byDefault));

                    foreach (ICP4.CommunicationLogic.CommunicationCommand.ShowTableofContent.TOCItem mainContentObject in bizContentObjects)
                    {
                        for (int i = 0; i < mainContentObject.TOCItems.Count; i++)
                        {

                            if (!mainContentObject.TOCItems[i].IsDisabled)
                            {
                                mainContentObject.IsDisabled = false;
                                break;
                            }
                        }
                    }
                }
            }
            return bizContentObjects;
        }


        /// <summary>
        /// This method converts ICPCourseService.ContentObject to ShowTableofContent.ContentObjectItem
        /// </summary>
        /// <param name="contentObject">ContentObject, ICPCourseService.ContentObject object</param>
        /// <param name="traversedContentObjectIDs">TraversedContentObjectIDs list of integer, represent the List of all traversed ContentObjectId</param>
        /// <param name="byDefault">ByDefault boolean value</param>
        /// <returns>ShowTableofContent.ContentObjectItem object</returns>
        private ICP4.CommunicationLogic.CommunicationCommand.ShowTableofContent.TOCItem ContentObjectTranslator(ICPCourseService.TOCItem tocitem, List<int> traversedContentObjectIDs, bool byDefault)
        {
            ICP4.CommunicationLogic.CommunicationCommand.ShowTableofContent.TOCItem bizContentObject = new ICP4.CommunicationLogic.CommunicationCommand.ShowTableofContent.TOCItem();

            bizContentObject.ID = tocitem.ID;
            bizContentObject.Title = tocitem.Name;
            bizContentObject.IsDisabled = byDefault;
            bizContentObject.BreadCrumb = ": " + tocitem.Name;
            bizContentObject.Type = tocitem.Type;   
            if (traversedContentObjectIDs.Count > 0)
            {
                bizContentObject.IsDisabled = !CheckIfContentObjectTraversedAlready(tocitem.ID, traversedContentObjectIDs);
            }

            bizContentObject.TOCItems = new List<ICP4.CommunicationLogic.CommunicationCommand.ShowTableofContent.TOCItem>();
            bizContentObject.TOCItems = ContentObjectsTranslator(tocitem.TOCItems, traversedContentObjectIDs, byDefault);


            return bizContentObject;
        }


        /// <summary>
        /// This methods checks whether a contentObjectID is traversed or not by looking through a list of traversed contect objects.
        /// </summary>
        /// <param name="currentContentObjectItemID">CurrentContentObjectItemID integer value, represent the ContentObjectID to be find</param>
        /// <param name="traversedContentObjectIDs">TraversedContentObjectIDs list of integer, represent the List of all traversed ContentObjectId</param>
        /// <returns>If successfully execute returns true, false otherwise</returns>
        private bool CheckIfContentObjectTraversedAlready(int currentContentObjectItemID, List<int> traversedContentObjectIDs)
        {
            foreach (int contentObjectID in traversedContentObjectIDs)
            {
                if (currentContentObjectItemID == contentObjectID)
                {
                    return true;
                }

            }
            return false;
        }


        /// <summary>
        /// This method creates ShowErrorMessage command.
        /// </summary>
        /// <returns>ShowErrorMessage command object.</returns>
        private ICP4.CommunicationLogic.CommunicationCommand.ShowErrorMessage.ShowErrorMessage CreateErrorMessageForInvalidMove()
        {
            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
            ICP4.CommunicationLogic.CommunicationCommand.ShowErrorMessage.ShowErrorMessage showErrorMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowErrorMessage.ShowErrorMessage();
            ICP4.CommunicationLogic.CommunicationCommand.ShowErrorMessage.ErrorMessage errorMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowErrorMessage.ErrorMessage();
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                errorMessage.ErrorMessageHeading = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingInvalidMoveMessage, brandCode, variant);
                errorMessage.ErrorMessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentInvalidMoveMessage, brandCode, variant);
                errorMessage.ErrorMessageImageURL = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageInvalidMoveMessage, brandCode, variant);
                errorMessage.ErrorMessageButtonText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingInvalidMoveMessageOkButton, brandCode, variant);
            }
            showErrorMessage.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowErrorMessage;
            showErrorMessage.ErrorMessage = errorMessage;
            return showErrorMessage;

        }


        /// <summary>
        /// This method creates ShowCustomMessage command for END.
        /// </summary>
        /// <returns>ShowCustomMessage command object.</returns>
        private ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.ShowCustomMessage CreateCustomeMessageForLearningSessionExpire()
        {

            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();

            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsPreview"]);
            bool isDemoable = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]);

            ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.ShowCustomMessage showCustomMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.ShowCustomMessage();
            ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.CustomMessage customMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.CustomMessage();
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                customMessage.MessageHeading = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingLearningSessionExpireMessage, brandCode, variant);
                customMessage.MessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentLearningSessionExpireMessage, brandCode, variant);
                customMessage.MessageImageURL = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageEndCourseMessage, brandCode, variant);
                customMessage.ButtonText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentEndCourseOkButton, brandCode, variant);
                customMessage.CustomMessageType = "CourseEnd";
                if (!isPreview && !isDemoable)
                {
                    string redirectURL = System.Web.HttpContext.Current.Session["RedirectURL"].ToString();
                    customMessage.RedirectURL = redirectURL;
                }
                else
                {
                    customMessage.RedirectURL = string.Empty;
                }

            }
            showCustomMessage.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowCustomMessage;
            showCustomMessage.CustomMessage = customMessage;
            return showCustomMessage;
        }

        /// <summary>
        /// This method creates ShowCustomMessage command for END.
        /// </summary>
        /// <returns>ShowCustomMessage command object.</returns>
        private ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.ShowCustomMessage CreateCustomeMessageForEnd()
        {

            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
            
            bool isPreview=Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsPreview"]);
            bool isDemoable = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]);

            ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.ShowCustomMessage showCustomMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.ShowCustomMessage();
            ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.CustomMessage customMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.CustomMessage();
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                customMessage.MessageHeading = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingEndCourseMessage, brandCode, variant);
                customMessage.MessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentEndCourseMessage, brandCode, variant);
                customMessage.MessageImageURL = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageEndCourseMessage, brandCode, variant);
                customMessage.ButtonText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentEndCourseOkButton, brandCode, variant);
                customMessage.CustomMessageType = "CourseEnd";
                if (!isPreview && !isDemoable)
                {
                    string redirectURL = System.Web.HttpContext.Current.Session["RedirectURL"].ToString();
                    customMessage.RedirectURL = redirectURL;
                }
                else
                {
                    customMessage.RedirectURL = string.Empty;
                }
              
            }
            showCustomMessage.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowCustomMessage;
            showCustomMessage.CustomMessage = customMessage;
            return showCustomMessage;
        }
        /// <summary>
        /// This message creates custom message for session end
        /// </summary>
        /// <returns></returns>
        public ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.ShowCustomMessage CreateCustomeMessageForSessionEnd()
        {

           // string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            //string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
            string brandCode = "DEFAULT";
            string variant = "En-US";
            ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.ShowCustomMessage showCustomMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.ShowCustomMessage();
            ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.CustomMessage customMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.CustomMessage();
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                customMessage.MessageHeading = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingSessionExpired, brandCode, variant);
                customMessage.MessageText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentSessionExpired, brandCode, variant);
                customMessage.MessageImageURL = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageSessionExpired, brandCode, variant);
                customMessage.ButtonText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentSessionExpiredOkButton, brandCode, variant);
                customMessage.CustomMessageType = "CourseEnd";
                //customMessage.CustomMessageType = "SessionEnd";
                customMessage.RedirectURL = string.Empty;
                System.Web.Configuration.SessionStateSection sessionStateSection = (System.Web.Configuration.SessionStateSection)System.Configuration.ConfigurationManager.GetSection("system.web/sessionState");
                customMessage.MessageText = customMessage.MessageText.Replace("${sessionTimeOut}", sessionStateSection.Timeout.Minutes.ToString());
                
            }
            showCustomMessage.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowCustomMessage;
            showCustomMessage.CustomMessage = customMessage;
            return showCustomMessage;
        }

        /// <summary>
        /// This method create a list of contentObjectId which is being traversed so far.
        /// </summary>
        /// <param name="courseID">CourseID integer value.</param>
        /// <param name="studentID">StudentID integer value.</param>
        /// <returns>List of integer values containing contentObject IDs</returns>
        private List<int> CreateListOfTraversedContentObjects(int courseID, int studentID,int enrollmentID)
        {
            ICPTrackingService.LearnerCourseTrackInfo[] learnerCourseTrackInfo;
            using (ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
            {
                trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                learnerCourseTrackInfo = trackingService.GetAllLearnerCourseTrackInfo(courseID, studentID,enrollmentID);

                if (learnerCourseTrackInfo != null)
                {
                    foreach (ICPTrackingService.LearnerCourseTrackInfo singleLearnerCourseTrackInfo in learnerCourseTrackInfo)
                    {
                        //Changes LCMS-3807 : Starts
                        List<VisitedScene> VisitedSceneList = (List<VisitedScene>)System.Web.HttpContext.Current.Session["VisitedSceneList"];
                        VisitedScene visitedScene = getVisitedScene(VisitedSceneList, singleLearnerCourseTrackInfo.SceneGUID);
                        /*LCMS-8972 - Start*/
                        if (visitedScene == null)
                        {
                            visitedScene = new VisitedScene();
                            //visitedScene.SceneId = singleLearnerCourseTrackInfo.s sequence.SequenceItems[index].SceneID;
                            /*LCMS-8972 - Start*/
                            visitedScene.TimeSpent = singleLearnerCourseTrackInfo.TimeSpent;
                            /*LCMS-8972 - End*/
                            visitedScene.SceneGUID = singleLearnerCourseTrackInfo.SceneGUID;
                            //TODO mark visited scene as finished here

                            VisitedSceneList.Add(visitedScene);
                        }                        
                        else
                        {
                            visitedScene.TimeSpent = visitedScene.TimeSpent + singleLearnerCourseTrackInfo.TimeSpent;
                        }
                        /*LCMS-8972 - End*/
                        System.Web.HttpContext.Current.Session["VisitedSceneList"] = VisitedSceneList;
                        //Changes LCMS-3807 : Ends
                    }
                }
            }

            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                return cacheManager.GetTraversedContentObjectSequenceItemIDs(courseID, learnerCourseTrackInfo, source, courseConfigurationID);
            }

        }

        /// <summary>
        /// This metho gets the file icon by searching through extension
        /// </summary>
        /// <param name="url">URL string value, represent the URL with file extension</param>
        /// <returns>String value containing image URL.</returns>
        private string FindAppropriateIcon(string url)
        {
            string[] array = url.Split('.');

            string fileFormat = "";
            string imageURL = "";

            if (array.Length > 0)
            {
                fileFormat = array[array.Length - 1].ToUpper();
                switch (fileFormat)
                {
                    case "PPT":
                        {
                            imageURL = "images/ico_pptx.png";
                            break;
                        }

                    case "PPTX":
                        {
                            imageURL = "images/ico_pptx.png";
                            break;
                        }
                    //Additional Support 
                    // LCMS-1487
                    case "PPS":
                    case "PPSX":
                        {
                            imageURL = "images/ico_pptx.png";
                            break;
                        }
                    case "DOC":
                        {
                            imageURL = "images/ico_docM.png";
                            break;
                        }
                    case "DOCX":
                        {
                            imageURL = "images/ico_docM.png";
                            break;
                        }
                    case "XLS":
                        {
                            imageURL = "images/ico_xlsm.png";
                            break;
                        }
                    case "XLSX":
                        {
                            imageURL = "images/ico_xlsm.png";
                            break;
                        }
                    case "PDF":
                        {
                            imageURL = "images/ico_pdf.png";
                            break;
                        }
                    case "JPG":
                        {
                            imageURL = "images/ico_jpg.gif";
                            break;
                        }
                    case "GIF":
                        {
                            imageURL = "images/ico_gif.gif";
                            break;
                        }
                    case "BMP":                
                        {
                            imageURL = "images/ico_bmp.gif";
                            break;
                        }
                    case "TXT":
                    case "RTF":
                        {
                            imageURL = "images/ico_txtS.png";
                            break;
                        }
                    case "HTML":
                        {
                            imageURL = "images/ico_html.png";
                            break;
                        }
                    case "ASP":
                        {
                            imageURL = "images/ico_html.png";
                            break;
                        }
                    case "PHP":
                        {
                            imageURL = "images/ico_html.png";
                            break;
                        }
                    case "ASPX":
                        {
                            imageURL = "images/ico_html.png";
                            break;
                        }
                    case "CFM":
                        {
                            imageURL = "images/ico_html.png";
                            break;
                        }

                    default:
                        {
                            //Additional Support 
                            // LCMS-1487
                            //Implementation for Web Link Icon
                            if (url.StartsWith("http:"))
                            {
                                imageURL = "images/ico_html.png";
                            }
                            else
                            {
                                imageURL = "images/ico_file.png";
                            }
                            break;
                        }

                }

            }
            else
            {                
                imageURL = "images/ico_file.png";
            }

            return imageURL;

        }      

        /// <summary>
        /// 
        /// </summary>
        /// <param name="remidationSequenceNo"></param>
        /// <param name="direction"></param>
        /// <param name="remidationIndexSequence"></param>
        /// <returns></returns>
        private int GetNextBackRemidationSequenceItem(int remidationSequenceNo, int direction, List<int> remidationIndexSequence)
        {
            bool isValidMove = true;
            ///////Checkings for valid move///////////////
            switch (direction)
            {
                case 1:
                    if (remidationSequenceNo >= remidationIndexSequence.Count - 1)
                        isValidMove = false;
                    break;
                case -1:
                    if (remidationSequenceNo <= 0)
                        isValidMove = false;
                    break;
            }
            //////////////////////////////////////////////

            if (isValidMove == true)
            {
                return remidationIndexSequence[remidationSequenceNo + direction];
            }
            else
                return -1;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sceneGUIDs"></param>
        /// <param name="sequence"></param>
        /// <returns></returns>
        private List<int> GetRemidationIndexSequence(string[] sceneGUIDs, ICPCourseService.Sequence sequence)
        {
            List<int> remidationIndexSequence = new List<int>();
            foreach (string sceneGUID in sceneGUIDs)
            {
                for (int index = 0; index <= sequence.SequenceItems.Length - 1; index++)
                {
                    if (sequence.SequenceItems[index].SceneGUID == sceneGUID)
                        remidationIndexSequence.Add(index);

                }
            }
            return remidationIndexSequence;
        }
       
        private int CalculateTotalViewableScenes(ICPCourseService.Sequence sequence)
        {
            int totalViewableScenes=0;
            for (int index = 0; index <= sequence.SequenceItems.Length - 1; index++)
            {
                if (sequence.SequenceItems[index].SequenceItemType == SequenceItemTypeName.ContentAsset ||
                    sequence.SequenceItems[index].SequenceItemType == SequenceItemTypeName.FlashAsset)
                {
                    totalViewableScenes++;
                }
            }
            return totalViewableScenes;
        }
        public double CalculateCourseProgressPercentageFromSequence(int courseID,int seqNo,int total,out int visitedSceneNo,out int totalSceneNo)
        {
            try
            {
                if (total <= 0)
                {
                    //visitedSceneNo = 0;
                    //totalSceneNo = 0;
                    //return 100;    

                    // LCMS-9157 START HERE
                    using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                    {
                        int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                        int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                        ICPCourseService.Sequence sequencefortotal = cacheManager.GetIFSequenceExistInCache(courseID, source, courseConfigurationID);
                        total = CalculateTotalViewableScenes(sequencefortotal);
                    }
                    if (seqNo <= 0)
                    {
                        string itemGUID = System.Web.HttpContext.Current.Session["ItemGUID"].ToString();
                        string sceneGUID = System.Web.HttpContext.Current.Session["SceneGUID"].ToString();
                        string statisticsType = System.Web.HttpContext.Current.Session["StatisticsType"].ToString();
                        seqNo = GetSequenceNoByID(courseID, itemGUID, sceneGUID, statisticsType);
                    }
                    // LCMS-9157 END HERE
                }

                ICPCourseService.Sequence sequence = new ICP4.BusinessLogic.ICPCourseService.Sequence();
                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {
                    int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                    int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                    sequence = cacheManager.GetIFSequenceExistInCache(courseID, source, courseConfigurationID);
                }
                int visitedSceneCount = 0;
                for (int index = 0; index <= seqNo; index++)
                {
                    if (sequence.SequenceItems[index].SequenceItemType == SequenceItemTypeName.ContentAsset ||
                        sequence.SequenceItems[index].SequenceItemType == SequenceItemTypeName.FlashAsset)
                    {
                        visitedSceneCount++;
                    }
                }
                totalSceneNo = total;
                visitedSceneNo = visitedSceneCount;
                if (visitedSceneCount > 0 && total > 0)
                {
                    return (visitedSceneCount / Convert.ToDouble(total)) * 100;
                }
                else
                {
                    return 0.0;
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicyForLCMS.HandleException(ex, "ICPException");
                visitedSceneNo = -1;
                totalSceneNo = -1;
                return -1;
            }
            
        }

        public string GetCourseTypeByGUID(string courseGUID)
        {
            string courseType = string.Empty;
            try
            {
                ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService();
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                courseType = courseService.GetCourseTypeByGUID(courseGUID);
            }
            catch (Exception ex)
            {
                ExceptionPolicyForLCMS.HandleException(ex, "ICPException");
                return string.Empty;
            }
            return courseType;
        }

        private int CalculateAssessmentRemediationCount(int lastRemediationCount, int maxNoOfAttempts, int lastAttemptNo)
        {
            
            int currentRemediaitonCount=0;
            try
            {
                //not considering the case when maxnoofattempts is zero as assessment will not be asked
                if (maxNoOfAttempts == lastAttemptNo )
                {
                    currentRemediaitonCount = lastRemediationCount +1;
                }
                else if (maxNoOfAttempts < lastAttemptNo)
                {
                    if (lastAttemptNo % maxNoOfAttempts== 0)
                    {
                        currentRemediaitonCount = lastRemediationCount + 1;
                    }
                    else
                    {
                        currentRemediaitonCount = lastRemediationCount;
                    }
                }
                else
                {
                    currentRemediaitonCount= lastRemediationCount;
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicyForLCMS.HandleException(ex, "ICPException");
                return 0;
            }
            return currentRemediaitonCount;
        }

        public object GetEOCInstructions_LMS(int courseID)
        {

//----------LCMS-3138 Code add by Danish khan--------------------
			string brandCode = string.Empty;
            string variant = string.Empty;
			string brandingEOCInstructions = string.Empty;
            
			brandCode=System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            variant = System.Web.HttpContext.Current.Session["variant"].ToString();

			ICP4.CommunicationLogic.CommunicationCommand.EOCInstructions.EOCInstructions eoc = new ICP4.CommunicationLogic.CommunicationCommand.EOCInstructions.EOCInstructions();
            ICP4.CommunicationLogic.CommunicationCommand.EOCInstructions.ShowEOCInstructions showEOC = new ICP4.CommunicationLogic.CommunicationCommand.EOCInstructions.ShowEOCInstructions();
            
			ICPCourseService.EOCInstructions endOfCourseInstructions = new ICP4.BusinessLogic.ICPCourseService.EOCInstructions();
            ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService();
			using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {                    
                brandingEOCInstructions= cacheManager.GetResourceValueByResourceKey("EOCInstructions",brandCode,variant);
            
            courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
            courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

            //Loaded Course Configuration from Cache for EOC Instructions
            ICPCourseService.CourseConfiguration courseConfiguration = GetCourseConfiguration(Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]));

            //endOfCourseInstructions = courseService.GetEOCInstructions_LMS(courseID);


            eoc.CourseID = courseID;
            eoc.CourseConfigurationEOCInstructions = courseConfiguration.PlayerEndOfCourseInstructions;
            //eoc.CourseID = endOfCourseInstructions.CourseID;
            eoc.BrandingEOCInstructions = brandingEOCInstructions;//EOCInstructions loaded from Cache according to brand
            //eoc.CourseConfigurationEOCInstructions = courseConfiguration.PlayerEndOfCourseInstructions;
            eoc.CourseEOCInstructions = courseService.GetCourseEOCInstructions(courseID);
            eoc.HeadingEOCInstructions = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingEOCInstructions, brandCode, variant);
            eoc.LMS_VU = 0;
            }

            showEOC.EOCInstructions = eoc;
            showEOC.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowEOCInstructions;

            return showEOC;           
        }
//--------End LCMS-3138 -----------------


/// <summary>
///EOC INstructions For VU
/// </summary>
        public int GetASV(int courseID, int learnerID, string courseGUID)
        {
            //string courseGUID = string.Empty;
            int asv = 0;        

            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
            {

                //courseGUID = courseService.GetCourseGUID(courseID);
                using (LCMS_VUConnectorService.LCMS_VUConnectorServiceService lCMS_VUConnectorServiceService = new ICP4.BusinessLogic.LCMS_VUConnectorService.LCMS_VUConnectorServiceService())
                {
                    lCMS_VUConnectorServiceService.Url = ConfigurationManager.AppSettings["LCMS_VUConnectorService"];
                    lCMS_VUConnectorServiceService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                    ServicePointManager.CertificatePolicy = new CommonAPI.AcceptAllCertificatePolicy();
                    lCMS_VUConnectorServiceService.UseDefaultCredentials = true;
                    asv = int.Parse(lCMS_VUConnectorServiceService.GetASV(courseGUID, learnerID).ToString());
                }
            }
            return asv;
        }

        public object GetEOCInstructions_VU(int courseID, int learnerID, string courseGUID, int enrollmentID)
        {
            ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService();
            ICP4.CommunicationLogic.CommunicationCommand.EOCInstructions.EOCInstructions eoc = new ICP4.CommunicationLogic.CommunicationCommand.EOCInstructions.EOCInstructions(); 
            ICP4.CommunicationLogic.CommunicationCommand.EOCInstructions.ShowEOCInstructions showEOC = new ICP4.CommunicationLogic.CommunicationCommand.EOCInstructions.ShowEOCInstructions();
            string eocInstructions = string.Empty;
            
            courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
            courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
            
            using (LCMS_VUConnectorService.LCMS_VUConnectorServiceService lCMS_VUConnectorServiceService = new ICP4.BusinessLogic.LCMS_VUConnectorService.LCMS_VUConnectorServiceService())
            {
                lCMS_VUConnectorServiceService.Url = ConfigurationManager.AppSettings["LCMS_VUConnectorService"];
                lCMS_VUConnectorServiceService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                ServicePointManager.CertificatePolicy = new CommonAPI.AcceptAllCertificatePolicy();
                lCMS_VUConnectorServiceService.UseDefaultCredentials = true;
                eocInstructions = lCMS_VUConnectorServiceService.GetEOCInstructionWithASV(courseGUID, learnerID, enrollmentID);


                eoc.CourseID = courseID;
                eoc.LMS_VU = 1;
                //eoc.BrandingEOCInstructions = endOfCourseInstructions.BrandingEOCInstructions;
                //eoc.CourseConfigurationEOCInstructions = endOfCourseInstructions.CourseConfigurationEOCInstructions;
                eoc.CourseEOCInstructions = eocInstructions;

                showEOC.EOCInstructions = eoc;
                showEOC.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowEOCInstructions;

                return showEOC;

            }

        }
  
        /// <summary>
        /// Remove HTML tags from string using char array.
        /// </summary>
        public static string StripTagsCharArray(string source)
        {
            if (source != null)
            {
                char[] array = new char[source.Length];
                int arrayIndex = 0;
                bool inside = false;

                for (int i = 0; i < source.Length; i++)
                {
                    char let = source[i];
                    if (let == '<')
                    {
                        inside = true;
                        continue;
                    }
                    if (let == '>')
                    {
                        inside = false;
                        continue;
                    }
                    if (!inside)
                    {
                        array[arrayIndex] = let;
                        arrayIndex++;
                    }
                }
                return new string(array, 0, arrayIndex);
            }
            return string.Empty;
            
        }

        public String GetCertificateInfo(int courseID)
        {

            try
            {
                ICPCourseService.CourseConfiguration courseConfiguration = new ICP4.BusinessLogic.ICPCourseService.CourseConfiguration();
                ICPCourseService.Asset asset = new ICP4.BusinessLogic.ICPCourseService.Asset();
                ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService();
                
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {
                    courseConfiguration = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);
                }                
                //courseConfiguration = courseService.GetCourseConfiguaration(courseConfigurationID);
                asset = courseService.GetAsset(courseConfiguration.CertificateAssetID);

                return asset.URL.ToString();// showEOC;

            }
            catch (System.Exception ex)
            {
                ExceptionPolicyForLCMS.HandleException(ex, "ICPException");
                throw ex;
                return null;
            }
        }

        public bool SetFormPDFFileds(ref AcroFields acroField)
        {
            try
            {
                Hashtable formField = acroField.Fields;
                string learningSessionID = System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
                int CourseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
                int LearnerID = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerID"]);
                int EnrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
                //ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService();

                string CourseName = string.Empty;
                string ApprovedCourseHours = string.Empty;
                DateTime CompletionDate = DateTime.MinValue;
                string FirstName = string.Empty;
                string currentDate = string.Empty;
                string LastName = string.Empty;
                string CertificateNumber = string.Empty;
                DateTime CertificateIssueDate = DateTime.MinValue;
                string CertIssueDate = string.Empty;

                using (ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
                {
                    trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                    trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                    CourseName = trackingService.GetLearnerCourseMetaCertificateInfo(CourseID, LearnerID, EnrollmentID, out ApprovedCourseHours, out CompletionDate, out FirstName, out LastName, out CertificateNumber, out CertificateIssueDate);
                }
                //
                if (CompletionDate.Equals(DateTime.MinValue))
                    currentDate = DateTime.Now.ToShortDateString();
                else
                    currentDate = CompletionDate.ToString();



                foreach (String key in formField.Keys)
                {
                    if (key.Equals("name"))
                        acroField.SetField("name", FirstName +" "+ LastName);

                    if (key.Equals("course_name"))
                        acroField.SetField("course_name", CourseName);

                    if (key.Equals("comp_date"))
                        acroField.SetField("comp_date", currentDate);

                    if (key.Equals("dob"))
                        acroField.SetField("dob", "");

                    if (key.Equals("course_hours"))
                        acroField.SetField("course_hours", ApprovedCourseHours);

                    if (key.Equals("license_num"))
                        acroField.SetField("license_num", "");

                    // ----  LCMS-4691 S T A R T---------

                    if (CertificateIssueDate.Equals(DateTime.MinValue))
                        CertIssueDate = DateTime.Now.ToShortDateString();
                    else
                        CertIssueDate = CompletionDate.ToString();

                    if (key.Equals("certificate_issue_date"))
                        acroField.SetField("certificate_issue_date", CertIssueDate);


                    if (key.Equals("certificate_id"))
                        acroField.SetField("certificate_id", CertificateNumber);



                    // ----  LCMS-4691 E N D ---------
                }
                return true;
            }
            catch (Exception ex)
            {
                ExceptionPolicyForLCMS.HandleException(ex, "ICPException");
                throw ex;
                return false;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <returns> command object</returns>
        public object CreateReviewCourseAfterCompletionCommandObject(int courseID)
        {
            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
            string paramValue = string.Empty;
            string queryParam = string.Empty;

            ICP4.CommunicationLogic.CommunicationCommand.ShowEOCTextCommand.CourseEndTextOnRelaunch courseEndTextOnRelaunch = new ICP4.CommunicationLogic.CommunicationCommand.ShowEOCTextCommand.CourseEndTextOnRelaunch();
            ICP4.CommunicationLogic.CommunicationCommand.ShowEOCTextCommand.ShowCourseEndTextOnRelaunch showCourseEndTextOnRelaunch = new ICP4.CommunicationLogic.CommunicationCommand.ShowEOCTextCommand.ShowCourseEndTextOnRelaunch();
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                courseEndTextOnRelaunch.CourseEndHeading = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingEndCourseMessage, brandCode, variant);
                courseEndTextOnRelaunch.CourseEndText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AllowReviewPolicyText, brandCode, variant);
                
            }
            showCourseEndTextOnRelaunch.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowPlayerCourseReviewAfterCompletion;

            showCourseEndTextOnRelaunch.CourseEndTextOnRelaunch = courseEndTextOnRelaunch;
            return showCourseEndTextOnRelaunch;

        }

        /// <summary>
        /// This message creates custom message for session end
        /// </summary>
        /// <returns></returns>
        //This method is made for LCMS-3385 .An exception was thrown because seq no. was getting -1
        public object CreateCustomeMessageForSessionEndWhenRelaunch()
        {
            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["isPreview"]);
            bool isDemoable = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]);
            bool isCourseCompleted = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsCourseCompleted"]);
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            ICPCourseService.CourseConfiguration courseConfiguration = null;
            if (isPreview == false && isDemoable == false)
            {
                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {
                    int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                    int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                    courseConfiguration = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);
                }
                if (courseConfiguration.PlayerAllowUserToReviewCourseAfterCompletion == false && isCourseCompleted)
                {
                    // string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                    //string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                    string brandCode = "DEFAULT";
                    string variant = "En-US";
                    ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.ShowCustomMessage showCustomMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.ShowCustomMessage();
                    ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.CustomMessage customMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowCustomMessage.CustomMessage();
                    customMessage.MessageHeading = "";
                    customMessage.MessageText = "";
                    customMessage.MessageImageURL = "";
                    customMessage.ButtonText = "";
                    customMessage.CustomMessageType = "SessionEnd";
                    customMessage.RedirectURL = System.Web.HttpContext.Current.Session["RedirectURL"].ToString();
                    showCustomMessage.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowCustomMessage;
                    showCustomMessage.CustomMessage = customMessage;
                    return showCustomMessage;
                }

                else
                {
                    string learnerSessionID = System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
                    int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["CurrentIndex"]);

                    return EndSession(courseID, learnerSessionID, DateTime.Now, DateTime.Now, false);
                }
            }
            else
            {
                string learnerSessionID = System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
                int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["CurrentIndex"]);

                return EndSession(courseID, learnerSessionID, DateTime.Now, DateTime.Now, false);
            }
        }

        /// <summary>
        /// This method Checking is course complete within Specific Amount of time or not.
        /// </summary>
        /// <param name=""></param>
        /// <returns>If course not complete within Specific amount of time then return false and then lock that course else return true</returns>
        public bool MustCourseCompleteWithinSpecificAmountOfTime()
        {            
            ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();            

            int courseId = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            string learnerSessionID = System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
            int learnerID = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerID"]);
            int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
            int TotalTimeSpent = 0;
            bool courseLocked = false;
            bool isCourseCompleted = false;
                        

            if (System.Web.HttpContext.Current.Session["PreviousLearningSessionTotalTimeSpent"] != null)
            {
                TotalTimeSpent = int.Parse(System.Web.HttpContext.Current.Session["PreviousLearningSessionTotalTimeSpent"].ToString());
            }

            if (System.Web.HttpContext.Current.Session["CourseCompleted"] != null)
            {
                isCourseCompleted = bool.Parse(System.Web.HttpContext.Current.Session["CourseCompleted"].ToString());  
            }
            else
            {
                isCourseCompleted = trackingService.IsCourseCompleted(enrollmentID);
                System.Web.HttpContext.Current.Session["CourseCompleted"] = isCourseCompleted;
            }
            
            if (isCourseCompleted == false) 
            {
                ICPCourseService.CourseConfiguration courseConfiguration = GetCourseConfiguration(Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]));

                DateTime CourseStartTime = (DateTime)System.Web.HttpContext.Current.Session["CourseStartTime"];
                int MustCompleteWithinSpecifiedAmountOfTimeMinute = courseConfiguration.CompletionMustCompleteWithinSpecifiedAmountOfTimeMinute;
                string MustCompleteUnitWithinSpecifiedAmountOfTime = courseConfiguration.CompletionUnitOfMustCompleteWithInSpecifiedAmountOfTime;

                if (MustCompleteWithinSpecifiedAmountOfTimeMinute > 0)
                {                    
                    if (System.Web.HttpContext.Current.Session["CourseLocked"] != null)
                    {
                        courseLocked = bool.Parse(System.Web.HttpContext.Current.Session["CourseLocked"].ToString());
                    }

                    int MustCompleteWithinSpecifiedAmountOfTimeinSeconds = 0;
                    
                    if (MustCompleteUnitWithinSpecifiedAmountOfTime.Equals("Minutes"))
                    {
                        MustCompleteWithinSpecifiedAmountOfTimeinSeconds = MustCompleteWithinSpecifiedAmountOfTimeMinute * 60;
                    }

                    if (MustCompleteUnitWithinSpecifiedAmountOfTime.Equals("Days"))
                    {
                        MustCompleteWithinSpecifiedAmountOfTimeinSeconds = ((MustCompleteWithinSpecifiedAmountOfTimeMinute * 24) * 3600);
                    }

                    if (MustCompleteUnitWithinSpecifiedAmountOfTime.Equals("Months"))
                    {
                        MustCompleteWithinSpecifiedAmountOfTimeinSeconds = (((MustCompleteWithinSpecifiedAmountOfTimeMinute * 30) * 24) * 3600);
                    }

                    int CurrentTimeSpent = Convert.ToInt32(Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval.Second, CourseStartTime, DateTime.Now, Microsoft.VisualBasic.FirstDayOfWeek.System, Microsoft.VisualBasic.FirstWeekOfYear.System));
                    int TimeSpentinSeconds = TotalTimeSpent + CurrentTimeSpent;


                    if (TimeSpentinSeconds > MustCompleteWithinSpecifiedAmountOfTimeinSeconds)
                    {
                        if (!courseLocked)
                        {
                            LockCourse(courseId, learnerID, enrollmentID, ICP4.BusinessLogic.CourseManager.LockingReason.FailedCompletionMustCompleteWithinSpecificAmountOfTimeMinute);
                            System.Web.HttpContext.Current.Session["CourseLocked"] = true;
                        }
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
                else
                {
                    return true; 
                }

            }
            return true;
        }

        /// <summary>
        /// This method Checking is course is published or Course Configuration is updated or not.
        /// </summary>
        /// <param name=""></param>
        /// <returns>If course not published or Course Configuration not updated  then return false else return true</returns>
        public bool IsCoursePublished() 
        {
            int courseId = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);             
            DateTime learningSessionStartDateTime = Convert.ToDateTime(System.Web.HttpContext.Current.Session["LearningSessionStartDateTime"]);
            CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager();
            int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
            int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
            int courseApproval = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseApprovalID"]);

            ICPCourseService.CourseConfiguration courseConfiguration = cacheManager.GetIFConfigurationExistInCache(courseConfigurationID);

            ICPCourseService.Sequence sequence = cacheManager.GetIFSequenceExistInCache(courseId, source, courseConfigurationID);
            
            DateTime lastCoursePublishDateTime = sequence.LastPublishedDateTime;            
            DateTime lastcourseConfigurationModifiedDateTime = courseConfiguration.LastModifiedDateTime;            

            int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["CurrentIndex"]);
            //DateTime assetStartTime = Convert.ToDateTime(System.Web.HttpContext.Current.Session["AssetStartTime"]);
            //int timeInSeconds = 0;
            //string itemType = "";
            if (Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsPreview"]) == false)
            {
                //LCMS-7154
                //START
                if (Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]))
                {
                    return false;
                }
                //END
                if (learningSessionStartDateTime != new DateTime(1900, 1, 1))
                {
                    if (learningSessionStartDateTime < lastCoursePublishDateTime)
                    {
                        //LCMS-7169
                        //START                        
                        //itemType = cacheManager.GetSequenceItemType(courseId, seqNo);
                        
                        //if (itemType != LearnerStatisticsType.PostAssessment && itemType != LearnerStatisticsType.PreAssessment && itemType != LearnerStatisticsType.Quiz)
                        //{
                            //timeInSeconds = Convert.ToInt32(Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval.Second, assetStartTime, DateTime.Now, Microsoft.VisualBasic.FirstDayOfWeek.System, Microsoft.VisualBasic.FirstWeekOfYear.System));
                            //System.Web.HttpContext.Current.Session["LearningSessionTimeSpentOnScene"] = timeInSeconds;
                        //}                        
                        //END
                        return true;
                    }

                    bool isCheckCourseConfigurationCourseApprovalModification = Convert.ToBoolean(ConfigurationManager.AppSettings["OnPublishCheckCCCAmodified"]);                    
                    if (isCheckCourseConfigurationCourseApprovalModification)
                    {
                        // Course Configuration Updated check
                        if (learningSessionStartDateTime < lastcourseConfigurationModifiedDateTime)
                        {
                            return true;
                        }
                        // Course Approval Updated Check
                        if (courseApproval > 0)
                        {
                            Dictionary<int, DateTime> courseapprovals = cacheManager.GetCourseApprovalInCache();
                            DateTime lastCourseApprovalModifiedDateTime = courseapprovals[courseApproval];
                            if (learningSessionStartDateTime < lastCourseApprovalModifiedDateTime)
                            {
                                return true;
                            }
                        }
                    }
                }
                else
                {
                    return false;
                }
            }
            return false;
        }


        public int GetOriginalCourseIDFromSubContentOwner(int offerCourseID)
        {
            ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService();
            courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
            courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
            int originalCourseID = courseService.GetOriginalCourseIDFromSubContentOwner(offerCourseID);
            return originalCourseID;
        }

        #region Course Background Image
        /// <summary>
        /// This method Getting the course background image from Store Front
        /// </summary>
        /// <param name="courseID">int courseID</param>
        /// <returns></returns>
        /// <Description>LCMS-13988 Author: Waqas Zakai Date : 21-April-2016</Description>
        private void GetCourseImage(int courseID) 
        {
            string courseImage = null;
            string courseImagePrefix = ConfigurationManager.AppSettings["ICPFileSystem"].ToString();
            courseImagePrefix = courseImagePrefix.Replace("ICPFileSystem", "ICP4");
            string defaultCourseImage = courseImagePrefix + "/" + ConfigurationManager.AppSettings["DefaultCourseImage"].ToString();
            bool isServiceCall = Convert.ToBoolean(ConfigurationManager.AppSettings["StoreFrontServiceCall"].ToString());
            try
            {                
                if (Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]) == false)
                {

                    if (isServiceCall)
                    {
                        using (ICP4.BusinessLogic.CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                        {
                            courseImage = cacheManager.GetIFCourseImageExistInCache(courseID);
                            if (courseImage == null)
                            {
                                ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService();
                                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                                int originalCourseID = courseService.GetOriginalCourseID(courseID);
                                if (originalCourseID > 0)
                                {
                                    courseID = originalCourseID;
                                }
                                string courseGroupGUID = courseService.GetCourseGroupsByCourse(courseID);
                                string courseGUID = courseService.GetCourseGUID(courseID);

                                string courseImageURLPrefix = ConfigurationManager.AppSettings["StoreFrontCourseImageURLPrefix"].ToString();
                                using (WebClient client = new WebClient())
                                {
                                    string serviceURL = ConfigurationManager.AppSettings["StoreFrontServiceCallsURL_CourseImage"].ToString();
                                    serviceURL = serviceURL.Replace("{0}", courseGUID + courseGroupGUID);
                                    try
                                    {
                                        string content = client.DownloadString(serviceURL);
                                        object objcontent = Newtonsoft.Json.JavaScriptConvert.DeserializeObject(content);
                                        Newtonsoft.Json.Linq.JObject json = Newtonsoft.Json.Linq.JObject.Parse(content);
                                        string wLCMS_Thumbnail = json["catalogEntryView"][0]["UserData"][0]["WLCMS_THUMBNAIL"].ToString();
                                        wLCMS_Thumbnail = wLCMS_Thumbnail.Replace("\"", "");
                                        if (!wLCMS_Thumbnail.Equals(""))
                                        {
                                            courseImage = "{0}" + wLCMS_Thumbnail.ToString();
                                            if (courseImage.Contains("http://") || courseImage.Contains("https://"))
                                            {
                                                courseImage = courseImage.Replace("{0}", "");
                                            }
                                            else
                                            {
                                                courseImage = courseImage.Replace("{0}", courseImageURLPrefix);
                                            }

                                            //if (courseImage != null && courseImage.Length > 0)
                                            //{
                                            //    cacheManager.CreateCourseImageInCache(courseID, courseImage);
                                            //}
                                        }

                                        if (courseImage == null)
                                        {
                                            courseImage = defaultCourseImage;
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        courseImage = defaultCourseImage;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        courseImage = defaultCourseImage;
                    }                  
                }
                else
                {
                    courseImage = defaultCourseImage;
                }

                using (ICP4.BusinessLogic.CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {
                    if (courseImage != null && courseImage.Length > 0)
                    {
                        cacheManager.CreateCourseImageInCache(courseID, courseImage);
                    }
                }

                System.Web.HttpContext.Current.Session["CourseImage"] = courseImage;
            }
            catch (Exception exp)
            {
                System.Web.HttpContext.Current.Session["CourseImage"] = defaultCourseImage;                          
            }
        }
        #endregion


        #region Course Evaluation
        public object ResumeCourseFromCourseEvaluation(bool isNormalDirection)
        {
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            if (isNormalDirection)
            {
                object returnCommand = new object();
                returnCommand = CheckSeatTime(1);
                if (returnCommand == null)
                {
                    return NextBack(courseID, 1);
                }
                else
                {
                    return returnCommand;
                }
            }
            else
            {
                object returnCommand = new object();
                returnCommand = CheckSeatTime(-1);
                if (returnCommand == null)
                {
                    return NextBack(courseID, -1);
                }
                else
                {
                    return returnCommand;
                }                
            }
        }
        private object StartCourseEvaluation(ICPCourseService.SequenceItem sequenceItem,bool isNormalDirection)
        {
            using (CourseEvaluation.CourseEvaluationManager courseEvaluationManager = new ICP4.BusinessLogic.CourseEvaluation.CourseEvaluationManager())
            {
                return courseEvaluationManager.StartCourseEvaluation(sequenceItem, isNormalDirection, sequenceItem.SequenceItemType);
            }
        }
        #endregion

        #region KnowledgeCheck
        private object StartKnowledgeCheck(ICPCourseService.SequenceItem sequenceItem,bool isNormalDirection)
        {
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            object returnObject=null;

            using (KnowledgeCheckManager.KnowledgeCheckManager knowledgeCheckManager = new ICP4.BusinessLogic.KnowledgeCheckManager.KnowledgeCheckManager())
            {
                returnObject = knowledgeCheckManager.StartKnowledgeCheck(sequenceItem);
            }
            if (returnObject != null)
            {
                return returnObject;
            }
            else 
            {
                if (isNormalDirection)
                    return NextBack(courseID, 1);
                else
                    return NextBack(courseID, -1);
            }
        }
        public object ResumeCourseFromKnowledgeCheck()
        {
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            object returnCommand = new object();
            returnCommand = CheckSeatTime(1);
            if (returnCommand == null)
            {
                return NextBack(courseID, 1);
            }
            else
            {
                return returnCommand;
            }
        }
        #endregion

        #region Seat Time
        /// <summary>
        /// This method create ShowSlide command object whenever course pointer reaches to Course Loading scene.
        /// </summary>
        /// <param name="sequenceItem">SequenceItem, ICPCourseService.SequenceItem object.</param>
        /// <returns>If successfully executes it will return ShowSlide command</returns>
        private object LoadMaximumSeatTimeCourseLaunchScene()
        {
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
            string courseName = HttpContext.Current.Session["CourseName"].ToString();

            int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
			string learningSessionID = System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["isPreview"]);
            double totalUserTimeSpentPreviouslyInSeconds = 0;
            double totalUserTimeSpentCurrentlyInSeconds = 0;

            DateTime courseStartTime = Convert.ToDateTime(System.Web.HttpContext.Current.Session["CourseStartTime"]);
            DateTime endTime = DateTime.Now;
            totalUserTimeSpentCurrentlyInSeconds = Convert.ToInt32(Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval.Second, courseStartTime, endTime, Microsoft.VisualBasic.FirstDayOfWeek.System, Microsoft.VisualBasic.FirstWeekOfYear.System));




            ICPCourseService.CourseConfiguration courseConfiguration = GetCourseConfiguration(Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]));

            ICP4.CommunicationLogic.CommunicationCommand.ShowSeatTimeCourseLaunch.ShowSeatTimeCourseLaunch showSeatTimeCourseLaunch = new ICP4.CommunicationLogic.CommunicationCommand.ShowSeatTimeCourseLaunch.ShowSeatTimeCourseLaunch();
            ICP4.CommunicationLogic.CommunicationCommand.ShowSeatTimeCourseLaunch.SeatTimeCourseLaunch seatTimeCourseLaunch = new ICP4.CommunicationLogic.CommunicationCommand.ShowSeatTimeCourseLaunch.SeatTimeCourseLaunch();

            #region Course Progress Bar
            {
                //slideMediaAsset.CourseProgressPercentage = 0;
                //slideMediaAsset.CourseProgressToolTip = courseName;
            }
            #endregion

            string HTML = "";
            string icpFileSystem = ConfigurationManager.AppSettings["ICPFileSystem"];
            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                HTML = courseService.GetSceneTemplateHTMLByType(SceneTemplateType.MST).TemplateHTML;
            }
            using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
            {
                //Get time string
                string hour_str = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Hour, brandCode, variant);
                string hours_str = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Hours, brandCode, variant);

                string min_str = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Minute, brandCode, variant);
                string mins_str = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Minutes, brandCode, variant);
                string and_str = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.And, brandCode, variant);
                //
                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);                
                ICPCourseService.Sequence sequence = cacheManager.GetIFSequenceExistInCache(courseID, source, courseConfigurationID);
                StringBuilder sb = new StringBuilder(HTML);
                string smaxSeatTimeCourseIntro = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.MaximumSeatTimeCourseIntro, brandCode, variant);

                TimeSpan timeSpanHour = TimeSpan.FromHours(courseConfiguration.SeatTimeInHour);
                TimeSpan timeSpanMinute = TimeSpan.FromMinutes(courseConfiguration.SeatTimeInMin);

                TimeSpan timeSpan = new TimeSpan(courseConfiguration.SeatTimeInHour, courseConfiguration.SeatTimeInMin, 00);  
                
                string seatTimeInHourStr = "";
                string seatTimeInMinuteStr = "";
                if (courseConfiguration.SeatTimeInHour == 24.00)
                {

                    seatTimeInHourStr = "24 hours";
                    seatTimeInMinuteStr = "00 minute";
                }
                else
                {


                    seatTimeInHourStr = NumberToWordConvertor.GetTimeInHourString(timeSpanHour.Hours, hour_str, hours_str);
                    seatTimeInMinuteStr = NumberToWordConvertor.GetTimeInMinuteString(timeSpanHour.Hours, timeSpanMinute.Minutes, hour_str, hours_str, min_str, mins_str,and_str);
                }

                if (isPreview)
                {
                    totalUserTimeSpentPreviouslyInSeconds = totalUserTimeSpentCurrentlyInSeconds;
                }
                else
                {
                    ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();
                    trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                    trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                    DateTime startTime = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
                    totalUserTimeSpentPreviouslyInSeconds =  trackingService.GetLearnerTimeSpentbyTime(enrollmentID, startTime, DateTime.Now, learningSessionID) + totalUserTimeSpentCurrentlyInSeconds;
                }

                TimeSpan timeSpantotalUserTimeSpentPreviouslyInSeconds = TimeSpan.FromSeconds(totalUserTimeSpentPreviouslyInSeconds);

                TimeSpan timeSpanRemaining = timeSpan.Subtract(timeSpantotalUserTimeSpentPreviouslyInSeconds);

                string seatTimeReminingInHourStr = NumberToWordConvertor.GetTimeInHourString(timeSpanRemaining.Hours, hour_str, hours_str);
                string seatTimeReminingInMinuteStr = NumberToWordConvertor.GetTimeInMinuteString(timeSpanRemaining.Hours, timeSpanRemaining.Minutes, hour_str, hours_str, min_str, mins_str,and_str);

                smaxSeatTimeCourseIntro = smaxSeatTimeCourseIntro.Replace("{0}", seatTimeInHourStr);
                smaxSeatTimeCourseIntro = smaxSeatTimeCourseIntro.Replace("{1}", seatTimeInMinuteStr);
                smaxSeatTimeCourseIntro = smaxSeatTimeCourseIntro.Replace("{2}", seatTimeReminingInHourStr);
                smaxSeatTimeCourseIntro = smaxSeatTimeCourseIntro.Replace("{3}", seatTimeReminingInMinuteStr);
                sb.Replace("$Heading", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.MaximumSeatTimeCourseIntroHeading, brandCode, variant));
                sb.Replace("$Text", smaxSeatTimeCourseIntro);
                sb.Replace("$VisualImage", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageCourseLocked, brandCode, variant));
                sb.Replace("$CustomMessage", courseConfiguration.MessageSeatTimeCourseLaunch.ToString());
                HTML = sb.ToString();
            }

            seatTimeCourseLaunch.TemplateHtml = HTML;
            seatTimeCourseLaunch.TemplateHtml = seatTimeCourseLaunch.TemplateHtml.Replace("\n", "");

            showSeatTimeCourseLaunch.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowSeatTimeCourseLaunch;
            showSeatTimeCourseLaunch.SeatTimeCourseLaunch = seatTimeCourseLaunch;
            return showSeatTimeCourseLaunch;
        }
        #endregion

        #region Validation Question
        //LCMS-12532 Yasin
        private object LoadValidationQuestion()
        {
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
            string courseName = HttpContext.Current.Session["CourseName"].ToString();

            int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["isPreview"]);
            //double totalUserTimeSpentPreviouslyInSeconds = 0;
            double totalUserTimeSpentCurrentlyInSeconds = 0;

            DateTime courseStartTime = Convert.ToDateTime(System.Web.HttpContext.Current.Session["CourseStartTime"]);
            DateTime endTime = DateTime.Now;
            totalUserTimeSpentCurrentlyInSeconds = Convert.ToInt32(Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval.Second, courseStartTime, endTime, Microsoft.VisualBasic.FirstDayOfWeek.System, Microsoft.VisualBasic.FirstWeekOfYear.System));

            ICPCourseService.CourseConfiguration courseConfiguration = GetCourseConfiguration(Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]));

            ICP4.CommunicationLogic.CommunicationCommand.ValidationIdentityQuestion.ShowValidationIdentityQuestion showValidationIdentityQuestion = new ICP4.CommunicationLogic.CommunicationCommand.ValidationIdentityQuestion.ShowValidationIdentityQuestion();
            ICP4.CommunicationLogic.CommunicationCommand.ValidationIdentityQuestion.ValidationIdentityQuestion validationQuestion = new ICP4.CommunicationLogic.CommunicationCommand.ValidationIdentityQuestion.ValidationIdentityQuestion();

            string HTML = "";
             /*
             * Code Review : Remove the below line.
             * DONE
             */
            //string icpFileSystem = ConfigurationManager.AppSettings["ICPFileSystem"];
            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                //HTML = courseService.GetSceneTemplateHTMLByType(SceneTemplateType.VQ).TemplateHTML;

                if (variant.ToLower().Equals("en-us"))
                {
                    HTML = courseService.GetSceneTemplateHTMLByType(SceneTemplateType.VQ).TemplateHTML;
                }
                else
                {
                    HTML = courseService.GetSceneTemplateHTMLByType(SceneTemplateType.VQ + "-" + variant).TemplateHTML;
                }
            }
            validationQuestion.TemplateHtml = HTML;
            validationQuestion.TemplateHtml = validationQuestion.TemplateHtml.Replace("\n", "");

            showValidationIdentityQuestion.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowValidationIdentityQuestion;
            showValidationIdentityQuestion.ValidationIdentityQuestion = validationQuestion;
            return showValidationIdentityQuestion;
        }
        #endregion 

        #region IDisposable Members

        public void Dispose()
        {
            GC.SuppressFinalize(this);
        }

        #endregion

        #region Seat Time

        public bool IsSeatTimeExceeded(int seatTimeInHour,int seatTimeInMin)
        {
            try
            {
                TimeSpan timeSpanInput = new TimeSpan(seatTimeInHour,seatTimeInMin,0);
                double seatTimeInTotalHour = timeSpanInput.TotalHours;

                int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
				string learningSessionID = System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
                bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["isPreview"]);
                double totalUserTimeSpentPreviouslyInSeconds = 0;
                double totalUserTimeSpentCurrentlyInSeconds = 0;

                DateTime courseStartTime = Convert.ToDateTime(System.Web.HttpContext.Current.Session["CourseStartTime"]);
                DateTime endTime = DateTime.Now;
                if (courseStartTime.Day < endTime.Day)
                {
                    courseStartTime = new DateTime(endTime.Year, endTime.Month, endTime.Day, 0, 0, 0);
                }
                //System.Diagnostics.Trace.WriteLine("courseStartTime: " + courseStartTime.ToString());
                //System.Diagnostics.Trace.Flush();
                //System.Diagnostics.Trace.WriteLine("Session.courseStartTime: " + System.Web.HttpContext.Current.Session["CourseStartTime"].ToString());
                //System.Diagnostics.Trace.Flush();

                totalUserTimeSpentCurrentlyInSeconds = Convert.ToInt32(Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval.Second, courseStartTime, endTime, Microsoft.VisualBasic.FirstDayOfWeek.System, Microsoft.VisualBasic.FirstWeekOfYear.System));

                if (isPreview)
                {
                    totalUserTimeSpentPreviouslyInSeconds = totalUserTimeSpentCurrentlyInSeconds;
                }
                else
                {
                    ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();
                    trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                    trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                    //Get Time
                    DateTime startTime = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
                    //
                    totalUserTimeSpentPreviouslyInSeconds =  trackingService.GetLearnerTimeSpentbyTime(enrollmentID, startTime, DateTime.Now, learningSessionID) + totalUserTimeSpentCurrentlyInSeconds;
                }
                TimeSpan timeSpan = TimeSpan.FromHours(seatTimeInTotalHour);

                if (totalUserTimeSpentPreviouslyInSeconds >=timeSpan.TotalSeconds)
                    return true;
                else
                    return false;
            }
            catch (Exception exp)
            {
                ExceptionPolicyForLCMS.HandleException(exp, "ICPException");
                return false;
            }
        }

        public object CheckSeatTime(int direction) 
        {
            try
            {
             
                
                //Check If Demo then return null
                if (Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]))
                { return null; }


               
                
                //string assessmentStage = Convert.ToString(System.Web.HttpContext.Current.Session["AssessmentStage"]);
                //if (assessmentStage == "AssessmentIsInProgress")
                //{ return null; }



             
                    int courseId = int.Parse(System.Web.HttpContext.Current.Session["CourseID"].ToString());
                    int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["CurrentIndex"]);

                    
                    string itemType = "";
                    string previousItemType = "";
                    using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                    {
                        int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                        int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                        previousItemType = cacheManager.GetSequenceItemType(courseId, seqNo, source, courseConfigurationID);
                        seqNo += direction;
                        itemType = cacheManager.GetSequenceItemType(courseId, seqNo, source, courseConfigurationID);
                    }


                    ArrayList specialItemTypes = new ArrayList();
                    specialItemTypes.Add(LearnerStatisticsType.EndOfCourseScene);
                    specialItemTypes.Add(LearnerStatisticsType.EOCInstructions);
                    specialItemTypes.Add(LearnerStatisticsType.CourseCertificate);
                    specialItemTypes.Add(LearnerStatisticsType.EmbeddedAcknowledgmentScene);


                    ArrayList assessmentItemTypes = new ArrayList();
                    assessmentItemTypes.Add(LearnerStatisticsType.CourseEvaluation);
                    assessmentItemTypes.Add(LearnerStatisticsType.PreAssessment);
                    assessmentItemTypes.Add(LearnerStatisticsType.PostAssessment);
                    assessmentItemTypes.Add(LearnerStatisticsType.Quiz);



                    ArrayList otherItemTypes = new ArrayList();
                    otherItemTypes.Add(LearnerStatisticsType.ContentAsset);
                    otherItemTypes.Add(LearnerStatisticsType.CourseIntroduction);
                    otherItemTypes.Add("ContentObject");                    



                    if (System.Web.HttpContext.Current.Session["ValidationTimerExpired"] != null)
                    {
                        if (Convert.ToBoolean(System.Web.HttpContext.Current.Session["ValidationTimerExpired"]) == true)
                        {
                            if (previousItemType == LearnerStatisticsType.PostAssessment || previousItemType == LearnerStatisticsType.Quiz || previousItemType == LearnerStatisticsType.PreAssessment)
                            { return null; }
                        }
                    }


                    //if (itemType != LearnerStatisticsType.ContentAsset && previousItemType != LearnerStatisticsType.ContentAsset)
                    if (!otherItemTypes.Contains(itemType) && !otherItemTypes.Contains(previousItemType))
                    {
                        if ((specialItemTypes.Contains(itemType) || itemType == "") && (direction != 0))
                        {
                            return null;
                        }
                        else if (assessmentItemTypes.Contains(itemType) && direction > 0)
                        {
                            return null;
                        }
                        else if (assessmentItemTypes.Contains(itemType) && direction < 0)
                        {
                            return CheckSeatTime(--direction);
                        }

                    }


             /*
                    //Here we have to Save the current running item. ( We are saving the info at the end not at the beginning )
                    //if (itemType == LearnerStatisticsType.EndOfCourseScene || itemType == LearnerStatisticsType.CourseEvaluation || itemType == LearnerStatisticsType.PostAssessment || itemType == LearnerStatisticsType.Quiz)
                    if (itemType == "" || itemType == LearnerStatisticsType.EndOfCourseScene || itemType == LearnerStatisticsType.CourseEvaluation || itemType == LearnerStatisticsType.EOCInstructions || itemType == LearnerStatisticsType.CourseCertificate || itemType == LearnerStatisticsType.EmbeddedAcknowledgmentScene)
                    { return null; }



                    if (System.Web.HttpContext.Current.Session["ValidationTimerExpired"] != null)
                    {
                        if (Convert.ToBoolean(System.Web.HttpContext.Current.Session["ValidationTimerExpired"]) == true)
                        {
                            if (previousItemType == LearnerStatisticsType.PostAssessment || previousItemType == LearnerStatisticsType.Quiz || previousItemType == LearnerStatisticsType.PreAssessment) 
                            { return null; }
                        }
                    }


                    // If it's ENDOFCOURSE or EVAL, then return null (this condition would be executed if CheckSeatTime is not being called from GoTo() method (TOC) AND user is not navigating backward
                    // ----------------------------------------------------------------------------------------------------------------------------------------------------
                   // if (direction > 0)
                    //{
                        if (itemType == LearnerStatisticsType.PostAssessment)
                        {
                            if (previousItemType == LearnerStatisticsType.Quiz || previousItemType == LearnerStatisticsType.CourseEvaluation || previousItemType == LearnerStatisticsType.EmbeddedAcknowledgmentScene)
                            { return null; }

                        }
                  //  }
                // ----------------------------------------------------------------------------------------------------------------------------------------------------
                
                */
                
                
                
                
                
                string HTML = string.Empty;
                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {
                    int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
                    ICPCourseService.CourseConfiguration courseConfiguration = GetCourseConfiguration(Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]));//courseID
                    if (!courseConfiguration.SeatTimeEnabled || (courseConfiguration.SeatTimeInHour == 0 && courseConfiguration.SeatTimeInMin == 0))
                        return null;

                    if (!IsSeatTimeExceeded(courseConfiguration.SeatTimeInHour, courseConfiguration.SeatTimeInMin))
                        return null;

                    string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                    string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();

                    using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
                    {
                        courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                        courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                        HTML = courseService.GetSceneTemplateHTMLByType(SceneTemplateType.MST).TemplateHTML;
                    }

                    //Get time string
                    string hour_str = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Hour, brandCode, variant);
                    string hours_str = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Hours, brandCode, variant);

                    string min_str = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Minute, brandCode, variant);
                    string mins_str = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Minutes, brandCode, variant);
                    string and_str = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.And, brandCode, variant);
                    //
                    StringBuilder sb = new StringBuilder(HTML);
                    string smaxSeatTimeExceeds = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.MaximumSeatTimeExceed, brandCode, variant);

                    TimeSpan timeSpan = TimeSpan.FromHours(courseConfiguration.SeatTimeInHour);
                    TimeSpan timeSpanMinute = TimeSpan.FromMinutes(courseConfiguration.SeatTimeInMin);
                    string seatTimeInHourStr = "";
                    string seatTimeInMinuteStr = "";
                    if (courseConfiguration.SeatTimeInHour == 24.00)
                    {

                        seatTimeInHourStr = "24 hours";
                        seatTimeInMinuteStr = "00 minute";
                    }
                    else
                    {
                        seatTimeInHourStr = NumberToWordConvertor.GetTimeInHourString(timeSpan.Hours, hour_str, hours_str);
                        seatTimeInMinuteStr = NumberToWordConvertor.GetTimeInMinuteString(timeSpan.Hours, timeSpanMinute.Minutes, hour_str, hours_str, min_str, mins_str,and_str);
                    }

                    smaxSeatTimeExceeds = smaxSeatTimeExceeds.Replace("{0}", seatTimeInHourStr);
                    smaxSeatTimeExceeds = smaxSeatTimeExceeds.Replace("{1}", seatTimeInMinuteStr);

                    DateTime dtTimeNow = DateTime.Now;
                    //LCMS-13797 START
                    DateTime dtNextDate = dtTimeNow.AddDays(1);
                    DateTime dtTimeUnLock = new DateTime(dtNextDate.Year, dtNextDate.Month, dtNextDate.Day);
                    TimeSpan TimeSpanUnLock = dtTimeUnLock.Subtract(dtTimeNow);
                    // LCMS-13797 END

                    smaxSeatTimeExceeds = smaxSeatTimeExceeds.Replace("{2}", NumberToWordConvertor.GetTimeInHourString(TimeSpanUnLock.Hours, hour_str, hours_str));
                    smaxSeatTimeExceeds = smaxSeatTimeExceeds.Replace("{3}", NumberToWordConvertor.GetTimeInMinuteString(TimeSpanUnLock.Hours, TimeSpanUnLock.Minutes, hour_str, hours_str, min_str, mins_str,and_str));

                    sb.Replace("$Heading", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.MaximumSeatTimeCourseIntroHeading, brandCode, variant));
                    sb.Replace("$Text", smaxSeatTimeExceeds);
                    sb.Replace("$VisualImage", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageCourseLocked, brandCode, variant));
                    sb.Replace("$CustomMessage", courseConfiguration.MessageSeatTimeExceeds);
                    HTML = sb.ToString();
                }


                ICP4.CommunicationLogic.CommunicationCommand.SeatTimeExceedCommand.ShowSeatTimeExceed showSeatTimeExceed = new ICP4.CommunicationLogic.CommunicationCommand.SeatTimeExceedCommand.ShowSeatTimeExceed();
                ICP4.CommunicationLogic.CommunicationCommand.SeatTimeExceedCommand.SeatTimeExceedMessage seatTimeExceed = new ICP4.CommunicationLogic.CommunicationCommand.SeatTimeExceedCommand.SeatTimeExceedMessage();
                seatTimeExceed.TemplateHtml = HTML;
                showSeatTimeExceed.SeatTimeExceedMessage = seatTimeExceed;
                //GetSceneTemplateHTMLByType
                return showSeatTimeExceed;
            }
            catch (Exception ex)
            {
                ExceptionPolicyForLCMS.HandleException(ex, "ICPException");
                return null;
            }
        }
        #endregion

        public void SessionAbandonOnScene()
        {
            System.Web.HttpContext.Current.Session.Remove("CourseEvaluation");
            System.Web.HttpContext.Current.Session.Remove("CourseEvaluationResult");            
            System.Web.HttpContext.Current.Session.Abandon();
        }

        public object SkipPracticeExam()
        {
            System.Web.HttpContext.Current.Session["IsAssessmentStarting"] = "false";
            System.Web.HttpContext.Current.Session["AssessmentEndStats"] = null;
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            bool isNormalDirection=true;
            if (System.Web.HttpContext.Current.Session["IsNormalDirection"] != null)
            {
                isNormalDirection = bool.Parse(System.Web.HttpContext.Current.Session["IsNormalDirection"].ToString());
            }

            if (isNormalDirection)
            {
                object returnCommand = new object();
                returnCommand = CheckSeatTime(1);
                if (returnCommand == null)
                {
                    return NextBack(courseID, 1);
                }
                else
                {
                    return returnCommand;
                }
            }
            else
            {
                object returnCommand = new object();
                returnCommand = CheckSeatTime(-1);
                if (returnCommand == null)
                {
                    return NextBack(courseID, -1);
                }
                else
                {
                    return returnCommand;
                }
            }
        }

        public object GetCourseCompletionReport()
        {
            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsPreview"]);
            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();

            if (isPreview)
            {
                if (HttpContext.Current.Session["LearnerCourseCompletionStatus"] == null)
                {
                    HttpContext.Current.Session["LearnerCourseCompletionStatus"] = new ICP4.BusinessLogic.ICPTrackingService.LearnerCourseCompletionStatus();
                }

            }



            ICP4.CommunicationLogic.CommunicationCommand.CourseCompletionCommand.ShowCourseCompletion showCourseCompletion = new ICP4.CommunicationLogic.CommunicationCommand.CourseCompletionCommand.ShowCourseCompletion();
            ICP4.CommunicationLogic.CommunicationCommand.CourseCompletionCommand.CourseCompletion courseCompletion = new ICP4.CommunicationLogic.CommunicationCommand.CourseCompletionCommand.CourseCompletion();
            CacheManager.CacheManager cacheManager = null;
            try
            {
                if (HttpContext.Current.Session["LearnerCourseCompletionStatus"] != null)
                {
                    ICPCourseService.CourseConfiguration courseConfiguration = null;
                    cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager();

                    int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
                    courseConfiguration = GetCourseConfiguration(Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]));


                    if (courseConfiguration != null)
                    {


                        if (courseConfiguration.CompletionCompleteAfterNOUniqueCourseVisit > 0)
                        {
                            courseCompletion.IsCompleteAfterNOUniqueCourseVisitEnabled = true;
                            string CompletionReport_IsCompleteAfterNOUniqueCourseVisitText1 = "";
                            if (courseConfiguration.CompletionCompleteAfterNOUniqueCourseVisit > 1)
                                CompletionReport_IsCompleteAfterNOUniqueCourseVisitText1 = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.CompletionReport_IsCompleteAfterNOUniqueCourseVisitText1Plural, brandCode, variant);
                            else
                                CompletionReport_IsCompleteAfterNOUniqueCourseVisitText1 = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.CompletionReport_IsCompleteAfterNOUniqueCourseVisitText1, brandCode, variant);
                            
                            courseCompletion.IsCompleteAfterNOUniqueCourseVisitAchievedText =
                                cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.CompletionReport_IsCompleteAfterNOUniqueCourseVisitText, brandCode, variant)
                                + courseConfiguration.CompletionCompleteAfterNOUniqueCourseVisit
                                + CompletionReport_IsCompleteAfterNOUniqueCourseVisitText1;
                                
                            if (isPreview)
                                courseCompletion.IsCompleteAfterNOUniqueCourseVisitAchievedText += cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.CompletionReport_IsCompleteAfterNOUniqueCourseVisitTextPreview, brandCode, variant);
                            else
                                courseCompletion.IsCompleteAfterNOUniqueCourseVisitAchievedText += ".";
                            
                            /*
                            string plural = (courseConfiguration.CompletionCompleteAfterNOUniqueCourseVisit > 1) ? "es" : "";
                            courseCompletion.IsCompleteAfterNOUniqueCourseVisitAchievedText = "The course can only be completed after at least " + courseConfiguration.CompletionCompleteAfterNOUniqueCourseVisit + " course launch" + plural + ".";
                             */
                        }
                        else
                        {
                            courseCompletion.IsCompleteAfterNOUniqueCourseVisitEnabled = false;
                            courseCompletion.IsCompleteAfterNOUniqueCourseVisitAchievedText = "";
                        }

                        courseCompletion.IsembeddedAcknowledgmentEnabled = courseConfiguration.EmbeddedAcknowledgmentEnabled;
                        if (courseCompletion.IsembeddedAcknowledgmentEnabled == true)
                        {
                            courseCompletion.IsembeddedAcknowledgmentAchievedText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.CompletionReport_IsembeddedAcknowledgmentAchievedText, brandCode, variant);
                        }
                        else
                        {
                            courseCompletion.IsembeddedAcknowledgmentAchievedText = "";
                        }

                        if (courseConfiguration.CompletionMustCompleteWithinSpecifiedAmountOfTimeMinute > 0)
                        {
                            courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccessEnabled = true;
                            string timeUnit = (courseConfiguration.CompletionMustCompleteWithinSpecifiedAmountOfTimeMinute > 1) ? courseConfiguration.CompletionUnitOfMustCompleteWithInSpecifiedAmountOfTime : courseConfiguration.CompletionUnitOfMustCompleteWithInSpecifiedAmountOfTime.Substring(0, courseConfiguration.CompletionUnitOfMustCompleteWithInSpecifiedAmountOfTime.Length - 1);
                            if (timeUnit.Contains("Day") && courseConfiguration.CompletionMustCompleteWithinSpecifiedAmountOfTimeMinute==1)
                                timeUnit = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Completion_IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccessUNITTIME_DAY, brandCode, variant);
                            else if (timeUnit.Contains("Days"))
                                timeUnit = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Completion_IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccessUNITTIME_DAYS, brandCode, variant);
                            else if (timeUnit.Contains("Minute") && courseConfiguration.CompletionMustCompleteWithinSpecifiedAmountOfTimeMinute == 1)
                                timeUnit = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Completion_IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccessUNITTIME_MIN, brandCode, variant);
                            else if (timeUnit.Contains("Minutes"))
                                timeUnit = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Completion_IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccessUNITTIME_MINS, brandCode, variant);
                            else if (timeUnit.Contains("Month") && courseConfiguration.CompletionMustCompleteWithinSpecifiedAmountOfTimeMinute == 1)
                                timeUnit = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Completion_IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccessUNITTIME_MONTH, brandCode, variant);
                            else if (timeUnit.Contains("Months"))
                                timeUnit = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Completion_IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccessUNITTIME_MONTHS, brandCode, variant);

                            //courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccessText = "You must complete the course within " + courseConfiguration.CompletionMustCompleteWithinSpecifiedAmountOfTimeMinute + " " + timeUnit + " after first course launch.";
                            courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccessText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Completion_IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccess, brandCode, variant);
                            courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccessText
                                = courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccessText.Replace("$NUMBER", courseConfiguration.CompletionMustCompleteWithinSpecifiedAmountOfTimeMinute.ToString());
                            courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccessText
                                = courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccessText.Replace("$UNITTIME", timeUnit);

                            if (isPreview)
                            {
                                courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccessText
                                    = courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccessText.Replace("$PREVIEW", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Completion_IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccessPreview, brandCode, variant));
                            }
                            else
                            {
                                courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccessText
                                    = courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccessText.Replace("$PREVIEW", "");

                            }
                        }
                        else
                        {
                            courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccessEnabled = false;
                            courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccessText = "";
                        }

                        if (courseConfiguration.CompletionMustCompleteWithinSpecifiedAmountOfTimeDay > 0)
                        {
                            courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeAfterRegDateEnabled = true;
                            //string plural = (courseConfiguration.CompletionMustCompleteWithinSpecifiedAmountOfTimeDay > 1) ? "s" : "";
                            //courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeAfterRegDateText = "You must complete the course within " + courseConfiguration.CompletionMustCompleteWithinSpecifiedAmountOfTimeDay + " day" + plural + " after registration.";
                            if(courseConfiguration.CompletionMustCompleteWithinSpecifiedAmountOfTimeDay>1)
                                courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeAfterRegDateText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Completion_IsMustCompleteWithinSpecifiedAmountOfTimeAfterRegDateEnabledPlural, brandCode, variant);
                            else
                                courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeAfterRegDateText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Completion_IsMustCompleteWithinSpecifiedAmountOfTimeAfterRegDateEnabled, brandCode, variant);

                            courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeAfterRegDateText
                                = courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeAfterRegDateText.Replace("$NUMBER", courseConfiguration.CompletionMustCompleteWithinSpecifiedAmountOfTimeDay.ToString());

                            if (isPreview)
                            {
                                courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeAfterRegDateText
                                    = courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeAfterRegDateText.Replace("$PREVIEW", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Completion_IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccessPreview, brandCode, variant));
                            }
                            else
                            {
                                courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeAfterRegDateText
                                    = courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeAfterRegDateText.Replace("$PREVIEW", "");

                            }

                        }
                        else
                        {
                            courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeAfterRegDateEnabled = false;
                            courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeAfterRegDateText = "";
                        }

                        courseCompletion.IsPostAssessmentEnabled = courseConfiguration.CompletionPostAssessmentAttempted;
                        if (courseCompletion.IsPostAssessmentEnabled == true)
                        {
                            courseCompletion.IsPostAssessmentAttemptedText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Completion_IsPostAssessmentMasteryAchievedText, brandCode, variant);
                        }
                        else
                        {
                            courseCompletion.IsPostAssessmentAttemptedText = "";
                        }

                        courseCompletion.IsPostAssessmentMasteryEnabled = courseConfiguration.CompletionPostAssessmentMastery;
                        if (courseCompletion.IsPostAssessmentMasteryEnabled == true/* && !courseConfiguration.PostAssessmentConfiguration.ScoreType.ToUpper().Equals(ICP4.BusinessLogic.AssessmentManager.ScoreType.NoResults.ToUpper())*/)
                        {
                            if (courseConfiguration.PostAssessmentConfiguration != null)
                            {
                                //courseCompletion.IsPostAssessmentMasteryAchievedText = "You must pass the post assessment with a mastery of " + courseConfiguration.PostAssessmentConfiguration.MasteryScore + "%.";
                                courseCompletion.IsPostAssessmentMasteryAchievedText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Completion_IsPostAssessmentMasteryScoreAchievedText, brandCode, variant).Replace("$MASTERY", courseConfiguration.PostAssessmentConfiguration.MasteryScore.ToString());
                            }
                            /*else
                            {
                                courseCompletion.IsPostAssessmentMasteryAchievedText = "";
                            }*/
                        }
                        else
                        {
                            courseCompletion.IsPostAssessmentMasteryAchievedText = "";
                        }

                        courseCompletion.IsPreAssessmentMasteryEnabled = courseConfiguration.CompletionPreAssessmentMastery;
                        if (courseCompletion.IsPreAssessmentMasteryEnabled == true/* && !courseConfiguration.PreAssessmentConfiguration.ScoreType.ToUpper().Equals(ICP4.BusinessLogic.AssessmentManager.ScoreType.NoResults.ToUpper())*/)
                        {
                            if (courseConfiguration.PreAssessmentConfiguration != null)
                            {
                                //courseCompletion.IsPreAssessmentMasteryAchievedText = "You must pass the pre assessment with a mastery of " + courseConfiguration.PreAssessmentConfiguration.MasteryScore + "%.";
                                courseCompletion.IsPreAssessmentMasteryAchievedText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Completion_IsPreAssessmentMasteryAchievedText, brandCode, variant).Replace("$MASTERY", courseConfiguration.PreAssessmentConfiguration.MasteryScore.ToString());
                                
                            }
                            /*else
                            {
                                courseCompletion.IsPreAssessmentMasteryAchievedText = "";
                            }*/
                        }
                        else
                        {
                            courseCompletion.IsPreAssessmentMasteryAchievedText = "";
                        }

                        courseCompletion.IsQuizMasteryEnabled = courseConfiguration.CompletionQuizMastery;
                        if (courseCompletion.IsQuizMasteryEnabled == true/* && !courseConfiguration.QuizConfiguration.ScoreType.ToUpper().Equals(ICP4.BusinessLogic.AssessmentManager.ScoreType.NoResults.ToUpper())*/)
                        {
                            if (courseConfiguration.QuizConfiguration != null)
                            {
                                bool multipleQuizConfig = false;
                                using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
                                {
                                    courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                                    courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                                    int course_ID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
                                     multipleQuizConfig = courseService.GetMultipleQuizConfigurationCount(course_ID);
                                }
                             
                             
                                if (multipleQuizConfig == true)
                                {
                                    courseCompletion.IsQuizMasteryAchievedText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Completion_IsMultipleQuizAssessmentMasteryAchievedText, brandCode, variant);
                                    
                                }
                                else
                                {
                                    courseCompletion.IsQuizMasteryAchievedText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Completion_IsQuizAssessmentMasteryAchievedText, brandCode, variant).Replace("$MASTERY", courseConfiguration.QuizConfiguration.MasteryScore.ToString());
                                }
                                
                                //courseCompletion.IsQuizMasteryAchievedText = "You must pass the quiz assessment with a mastery of " + courseConfiguration.QuizConfiguration.MasteryScore + "%.";
                               
                            }
                            /*else
                            {
                                courseCompletion.IsQuizMasteryAchievedText = "";
                            }*/
                        }
                        else
                        {
                            courseCompletion.IsQuizMasteryAchievedText = "";
                        }

                        courseCompletion.IsRespondToCourseEvaluationEnabled = courseConfiguration.CompletionRespondToCourseEvaluation;
                        if (courseCompletion.IsRespondToCourseEvaluationEnabled == true)
                        {
                            //courseCompletion.IsRespondToCourseEvaluationAchievedText = "You must complete all evaluations.";
                            courseCompletion.IsRespondToCourseEvaluationAchievedText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Completion_IsRespondToCourseEvaluationAchievedText, brandCode, variant);
                        }
                        else
                        {
                            courseCompletion.IsRespondToCourseEvaluationAchievedText = "";
                        }
                        courseCompletion.IsViewEverySceneInCourseEnabled = courseConfiguration.CompletionViewEverySceneInCourse;
                        if (courseCompletion.IsViewEverySceneInCourseEnabled == true)
                        {
                            //courseCompletion.IsViewEverySceneInCourseAchievedText = "You must view every scene in the course.";
                            courseCompletion.IsViewEverySceneInCourseAchievedText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Completion_IsViewEverySceneInCourseAchievedText, brandCode, variant);
                        }
                        else
                        {
                            courseCompletion.IsViewEverySceneInCourseAchievedText = "";
                        }
                        //Text Value



                    }

                    //Text

                    courseCompletion.CourseCompletionReportText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Completion_CourseCompletionReportText, brandCode, variant);
                    courseCompletion.CourseCompletionReportSummaryText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Completion_CourseCompletionReportSummaryText, brandCode, variant);
                    courseCompletion.CourseCompletionReportInfo1 = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.Completion_CourseCompletionReportInfo1, brandCode, variant);

                    //Text


                    ICP4.BusinessLogic.ICPTrackingService.LearnerCourseCompletionStatus learnerCourseCompletionStatus =
                        (ICP4.BusinessLogic.ICPTrackingService.LearnerCourseCompletionStatus)HttpContext.Current.Session["LearnerCourseCompletionStatus"];

                    courseCompletion.IsCompleteAfterNOUniqueCourseVisitAchieved = learnerCourseCompletionStatus.IsCompleteAfterNOUniqueCourseVisitAchieved;
                    courseCompletion.IsCourseCompleted = learnerCourseCompletionStatus.IsCourseCompleted;
                    courseCompletion.IsembeddedAcknowledgmentAchieved = learnerCourseCompletionStatus.IsembeddedAcknowledgmentAchieved;
                    courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccess = learnerCourseCompletionStatus.IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccess;
                    courseCompletion.IsMustCompleteWithinSpecifiedAmountOfTimeAfterRegDate = learnerCourseCompletionStatus.IsMustCompleteWithinSpecifiedAmountOfTimeAfterRegDate;
                    courseCompletion.IsPostAssessmentAttempted = learnerCourseCompletionStatus.IsPostAssessmentAttempted;
                    if (courseConfiguration.PostAssessmentConfiguration.ScoreType.ToUpper().Equals(ICP4.BusinessLogic.AssessmentManager.ScoreType.NoResults.ToUpper()))
                        courseCompletion.IsPostAssessmentMasteryAchieved = false;
                    else
                        courseCompletion.IsPostAssessmentMasteryAchieved = learnerCourseCompletionStatus.IsPostAssessmentMasteryAchieved;

                    if (courseConfiguration.PreAssessmentConfiguration.ScoreType.ToUpper().Equals(ICP4.BusinessLogic.AssessmentManager.ScoreType.NoResults.ToUpper()))
                        courseCompletion.IsPreAssessmentMasteryAchieved = false;
                    else
                        courseCompletion.IsPreAssessmentMasteryAchieved = learnerCourseCompletionStatus.IsPreAssessmentMasteryAchieved;

                    if (courseConfiguration.QuizConfiguration.ScoreType.ToUpper().Equals(ICP4.BusinessLogic.AssessmentManager.ScoreType.NoResults.ToUpper()))
                        courseCompletion.IsQuizMasteryAchieved = false;
                    else
                        courseCompletion.IsQuizMasteryAchieved = learnerCourseCompletionStatus.IsQuizMasteryAchieved;

                    courseCompletion.IsRespondToCourseEvaluationAchieved = learnerCourseCompletionStatus.IsRespondToCourseEvaluationAchieved;
                    courseCompletion.IsViewEverySceneInCourseAchieved = learnerCourseCompletionStatus.IsViewEverySceneInCourseAchieved;

                    //For LCMS-11285

                    using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
                    {
                        courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                        courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                        int courseApprovalID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseApprovalID"]);
                        int course_ID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
                        int affidivatID = courseService.GetCourseApprovalAffidavit(course_ID, courseApprovalID);

                        ICPCourseService.Asset asset = new ICP4.BusinessLogic.ICPCourseService.Asset();
                        asset = courseService.GetAffidavitAsset(affidivatID);
                        int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);

                        if (affidivatID > 0 && asset.AssetType == AssetType.Affidavit)
                        {
                            courseCompletion.IsAcceptAffidavitAcknowledgmentEnabled = true;

                            //courseCompletion.IsAcceptAffidavitAcknowledgment=(System.Web.HttpContext.Current.Session["isAffidavitChecked"] != null)?(bool)System.Web.HttpContext.Current.Session["isAffidavitChecked"]:false;
                            courseCompletion.IsAcceptAffidavitAcknowledgment = courseService.GetAffidavitAcknowledgmentStatus(enrollmentID);
                        }
                        if (asset.AffidavitTemplateId > 0)
                        {
                            courseCompletion.IsSubmitSignedAffidavitEnabled = true;
                            courseCompletion.IsSubmitSignedAffidavit = courseService.GetDocuSignedAffidavitStatus(enrollmentID);
                        }
                        //End
                    }
                    showCourseCompletion.CourseCompletion = courseCompletion;
                    showCourseCompletion.CommandName = CommandNames.ShowCourseCompletion;


                }

            }
            catch (Exception exp)
            {
                ExceptionPolicyForLCMS.HandleException(exp, "ICPException");
            }
            finally
            {
                cacheManager = null;
            }

            return showCourseCompletion;
        }


        public void SynchToExternalSystem(string mileStone)
        {
            try
            {

                // Implementation for preview mode (START)
                //----------------------------------------------------------------------------------------------------

                bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsPreview"]);
                int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
                ICP4.BusinessLogic.ICPCourseService.CourseConfiguration courseConfig = GetCourseConfiguration(Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]));
                int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["CurrentIndex"]);
                int totalSceneCount = 0;
                int visitedSceneCount = 0;
                double courseProgress = CalculateCourseProgressPercentageFromSequence(courseID, seqNo, Convert.ToInt32(System.Web.HttpContext.Current.Session["TotalNoOfViewableScenes"]), out visitedSceneCount, out totalSceneCount);
                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
                int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                if (isPreview)
                {
                    if (HttpContext.Current.Session["LearnerCourseCompletionStatus"] == null)
                    {
                        HttpContext.Current.Session["LearnerCourseCompletionStatus"] = new ICP4.BusinessLogic.ICPTrackingService.LearnerCourseCompletionStatus();
                    }

                    ICP4.BusinessLogic.ICPTrackingService.LearnerCourseCompletionStatus completionStats = (ICP4.BusinessLogic.ICPTrackingService.LearnerCourseCompletionStatus)HttpContext.Current.Session["LearnerCourseCompletionStatus"];

                    switch (mileStone)
                    {
                        case "ShowEmbeddedAcknowledgment":
                            completionStats.IsembeddedAcknowledgmentAchieved = true;
                            break;
                        case "ShowAssessmentScoreSummary":

                            CacheManager.CacheManager cacheManager = new CacheManager.CacheManager();
                            /*LCMS-8634 - Start*/
                            /*
                            string itemType = cacheManager.GetSequenceItemType(courseID, seqNo);
                            */
                            BusinessLogic.ICPCourseService.SequenceItem sequenceItem = cacheManager.GetRequestedItemFromQueueOnAppliationLevel(courseID, seqNo, source, courseConfigurationID);
                            String itemType = sequenceItem.SequenceItemType;

                            if (itemType == SequenceItemType.Exam)
                            {
                                itemType = sequenceItem.ExamType;    
                            }

                            ICPTrackingService.LearnerStatistics[] learnerStats = (ICPTrackingService.LearnerStatistics[])System.Web.HttpContext.Current.Session["AssessmentEndStats"];

                            if (learnerStats != null)
                            {
                                switch (itemType)
                                {
                                    case SequenceItemTypeName.PreAssessment:
                                        completionStats.IsPreAssessmentMasteryAchieved = learnerStats[learnerStats.Length - 1].IsPass;
                                        break;
                                    case SequenceItemTypeName.PostAssessment:                                        
                                        completionStats.IsPostAssessmentAttempted = true;
                                        completionStats.IsPostAssessmentMasteryAchieved = learnerStats[learnerStats.Length - 1].IsPass;                                        

                                        break;
                                    case SequenceItemTypeName.Quiz:

                                        if(System.Web.HttpContext.Current.Session["PassedQuizCount"] == null)
                                        {System.Web.HttpContext.Current.Session["PassedQuizCount"] = 0;}
                                        
                                        int passedQuizCount = (int)System.Web.HttpContext.Current.Session["PassedQuizCount"];

                                        if (learnerStats[learnerStats.Length - 1].IsPass)
                                        {System.Web.HttpContext.Current.Session["PassedQuizCount"] = ++passedQuizCount;}

                                        if (passedQuizCount >= GetValidQuizCount(courseID))
                                        {completionStats.IsQuizMasteryAchieved = true;}
                                        
                                        break;

                                } // SWITCH end
                            }    // IF end

                            break;
                        case "SubmitCourseEval":
                            completionStats.IsRespondToCourseEvaluationAchieved = true;
                            break;
                        case "EndOfCourseScene":
                            break;
                        case "BeginCourse":
                            break;

                    }
                    completionStats.IsCourseCompleted = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsCourseCompleted"]);                    

                    // These policies are not applicable for preview mode
                    // ---------------------------------------------------------
                    completionStats.IsMustCompleteWithinSpecifiedAmountOfTimeAfterRegDate = true;
                    completionStats.IsMustCompleteWithinSpecifiedAmountOfTimeaAfterFirstAccess = true;
                    completionStats.IsCompleteAfterNOUniqueCourseVisitAchieved = (courseConfig.CompletionCompleteAfterNOUniqueCourseVisit == 1) ? true : false;
                    // ----------------------------------------------------------


                    if (courseProgress >= 100)
                    {
                        completionStats.IsViewEverySceneInCourseAchieved = true;
                    }

                    HttpContext.Current.Session["LearnerCourseCompletionStatus"] = completionStats;
                    return;
                }

                //----------------------------------------------------------------------------------------------------
                // Implementation for preview mode (END)

                
                long learnerID = 0;
                long enrollmentID = 0;
                
                DateTime registrationDate = DateTime.Now;
                ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();

                IntegerationStatistics integerationStatistics = (IntegerationStatistics)HttpContext.Current.Session["IntegerationStatistics"];
                Integeration integeration = IntegerationFactory.GetObject(source);
                HttpContext.Current.Session["IntegerationStatistics"] = null;
                if (integerationStatistics != null && integerationStatistics.IntegerationStatisticsType == IntegerationStatisticsType.AssessmentCompletion)
                {
                    integeration.SynchStatsToExternalSystem(integerationStatistics);
                }

                if (System.Web.HttpContext.Current.Session["LearnerID"] != null)
                    long.TryParse(System.Web.HttpContext.Current.Session["LearnerID"].ToString(), out learnerID);

                if (System.Web.HttpContext.Current.Session["EnrollmentID"] != null)
                    long.TryParse(System.Web.HttpContext.Current.Session["EnrollmentID"].ToString(), out enrollmentID);


                if (System.Web.HttpContext.Current.Session["CourseRegAccessDateTime"] != null)
                    DateTime.TryParse(System.Web.HttpContext.Current.Session["CourseRegAccessDateTime"].ToString(), out registrationDate);

                
                trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                ICPTrackingService.LearnerStatistics learnerStatistics = new ICP4.BusinessLogic.ICPTrackingService.LearnerStatistics();

                int courseApprovalID = 0;
                if (System.Web.HttpContext.Current.Session["CourseApprovalID"] != null)
                {
                    courseApprovalID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseApprovalID"]);
                }

                ICP4.BusinessLogic.ICPTrackingService.LearnerCourseCompletionStatus learnerCourseCompletionStatus = trackingService.GetCourseCompletionStatus(courseID, CourseCompletionPolicyEntity2BizTranslator(courseConfig), learnerID, enrollmentID, GetValidQuizCount(courseID), registrationDate, courseProgress, courseApprovalID,source);

                if (courseProgress >= 100)
                {
                    learnerCourseCompletionStatus.IsViewEverySceneInCourseAchieved = true;
                }

                HttpContext.Current.Session["LearnerCourseCompletionStatus"] = learnerCourseCompletionStatus;
                
                integerationStatistics = new IntegerationStatistics();
                integerationStatistics.IntegerationStatisticsType = IntegerationStatisticsType.CourseCompletion;
                integerationStatistics.LearningSessionGuid = System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
                integerationStatistics.IsCourseCompleted = learnerCourseCompletionStatus.IsCourseCompleted;
                integerationStatistics.Enrollment_Id = enrollmentID;
                integerationStatistics.CourseGuid = "";
                integerationStatistics.PercentageCourseProgress = courseProgress;
                if (source == 1)
                {
                    integerationStatistics.AssessmentScore = -1;
                }

                if (integerationStatistics.IsCourseCompleted)
                {
                    integeration.SynchStatsToExternalSystem(integerationStatistics);
                    if (GetRedirectURLFromLearningSession(System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString()) != string.Empty)
                    {
                        System.Web.HttpContext.Current.Session["RedirectURL"] = GetRedirectURLFromLearningSession(System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString());
                    }
                }
            }
            catch (Exception exp)
            {
                ExceptionPolicyForLCMS.HandleException(exp, "ICPException");
            }

        }

        public ICPTrackingService.CourseCompletionPolicy CourseCompletionPolicyEntity2BizTranslator(ICP4.BusinessLogic.ICPCourseService.CourseConfiguration courseConfiguration)
        {
            ICPTrackingService.CourseCompletionPolicy courseCompletionPolicy = new ICP4.BusinessLogic.ICPTrackingService.CourseCompletionPolicy();

            courseCompletionPolicy.CompleteAfterNumberOfUniqueVisits = courseConfiguration.CompletionCompleteAfterNOUniqueCourseVisit;
            courseCompletionPolicy.EnableEmbeddedAknowledgement = courseConfiguration.EmbeddedAcknowledgmentEnabled;
            courseCompletionPolicy.MustCompleteWithInSpecifiedAmountOfDayAfterRegistration = courseConfiguration.CompletionMustCompleteWithinSpecifiedAmountOfTimeDay;
            courseCompletionPolicy.MustCompleteWithInSpecifiedAmountOfTime = courseConfiguration.CompletionMustCompleteWithinSpecifiedAmountOfTimeMinute;
            courseCompletionPolicy.MustCompleteWithInSpecifiedAmountOfTimeUnit = courseConfiguration.CompletionUnitOfMustCompleteWithInSpecifiedAmountOfTime;
            courseCompletionPolicy.PostAssessmentAttempted = courseConfiguration.CompletionPostAssessmentAttempted;
            courseCompletionPolicy.PostAssessmentMasteryAchived = courseConfiguration.CompletionPostAssessmentMastery;
            courseCompletionPolicy.PostAssessmentMasteryScore = courseConfiguration.PostAssessmentConfiguration.MasteryScore;
            courseCompletionPolicy.PostAssessmentScoreType = courseConfiguration.PostAssessmentConfiguration.ScoreType;
            courseCompletionPolicy.PreAssessmentMasteryScore = courseConfiguration.PreAssessmentConfiguration.MasteryScore;
            courseCompletionPolicy.PreAssessmentMasteryAchived = courseConfiguration.CompletionPreAssessmentMastery;
            courseCompletionPolicy.PreAssessmentScoreType = courseConfiguration.PreAssessmentConfiguration.ScoreType;
            courseCompletionPolicy.QuizMasteryScore = courseConfiguration.QuizConfiguration.MasteryScore;
            courseCompletionPolicy.QuizMasteryAchived = courseConfiguration.CompletionQuizMastery;
            courseCompletionPolicy.QuizScoreType = courseConfiguration.QuizConfiguration.ScoreType;
            courseCompletionPolicy.RespondToCourseEvaluation = courseConfiguration.CompletionRespondToCourseEvaluation;
            courseCompletionPolicy.ViewEverySceneInCourse = courseConfiguration.CompletionViewEverySceneInCourse;           

            return courseCompletionPolicy;
        }

        /// <summary>
        /// This method will check if learner Start Course within specified amount of time period after Registration date.
        /// </summary>
        /// <param name="MustStartWithinSpecifiedAmountOfTimeAfterRegistrationDate"></param>
        /// <param name="UnitMustStartWithinSpecifiedAmountOfTimeAfterRegistrationDate"></param>
        /// <returns></returns>
        public bool IsCourseStartWithinSpecifiedTimeAfterRegistrationDate(int MustStartWithinSpecifiedAmountOfTimeAfterRegistrationDate, string UnitMustStartWithinSpecifiedAmountOfTimeAfterRegistrationDate)
        {
            bool isCourseStartedWithinSpecifiedAmountOfTimeAfterRegistration = true;
            DateTime maximumDateTime = DateTime.Now;

            try
            {
                DateTime registrationDate = DateTime.Today;
                int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
                string regDateStr = string.Empty;
                if (Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]) == 0)
                {
                    DateTime.TryParse(System.Web.HttpContext.Current.Session["CourseRegAccessDateTime"].ToString(), out registrationDate);
                }
                else
                {
                    using (LCMS_VUConnectorService.LCMS_VUConnectorServiceService lCMS_VUConnectorServiceService = new ICP4.BusinessLogic.LCMS_VUConnectorService.LCMS_VUConnectorServiceService())
                    {
                        lCMS_VUConnectorServiceService.Url = ConfigurationManager.AppSettings["LCMS_VUConnectorService"];
                        lCMS_VUConnectorServiceService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                        ServicePointManager.CertificatePolicy = new CommonAPI.AcceptAllCertificatePolicy();
                        lCMS_VUConnectorServiceService.UseDefaultCredentials = true;

                        regDateStr = lCMS_VUConnectorServiceService.GetStudentCourseRegDate(enrollmentID);
                        DateTime.TryParse(regDateStr, out registrationDate);
                        System.Web.HttpContext.Current.Session["CourseRegAccessDateTime"] = registrationDate;
                    }

                }

                switch (UnitMustStartWithinSpecifiedAmountOfTimeAfterRegistrationDate)
                {
                    case TimeUnit.Minutes:
                        maximumDateTime = registrationDate.AddMinutes(MustStartWithinSpecifiedAmountOfTimeAfterRegistrationDate);
                        break;
                    case TimeUnit.Months:
                        maximumDateTime = registrationDate.AddMonths(MustStartWithinSpecifiedAmountOfTimeAfterRegistrationDate);
                        maximumDateTime = new DateTime(maximumDateTime.Year, maximumDateTime.Month, maximumDateTime.Day, 23, 59, 59);
                        break;
                    case TimeUnit.Days:
                        maximumDateTime = registrationDate.AddDays(MustStartWithinSpecifiedAmountOfTimeAfterRegistrationDate);
                        maximumDateTime = new DateTime(maximumDateTime.Year, maximumDateTime.Month, maximumDateTime.Day, 23, 59, 59);
                        break;
                    default:
                        maximumDateTime = registrationDate.AddMonths(MustStartWithinSpecifiedAmountOfTimeAfterRegistrationDate);
                        maximumDateTime = new DateTime(maximumDateTime.Year, maximumDateTime.Month, maximumDateTime.Day, 23, 59, 59);                        
                        break;
                }

                if (maximumDateTime < DateTime.Now)
                {
                    isCourseStartedWithinSpecifiedAmountOfTimeAfterRegistration = false;
                }
            }
            catch (Exception ex)
            {
                ExceptionPolicyForLCMS.HandleException(ex, "ICPException");
                isCourseStartedWithinSpecifiedAmountOfTimeAfterRegistration = true;
            }

            return isCourseStartedWithinSpecifiedAmountOfTimeAfterRegistration;
        }


        /// <summary>
        /// This method sends CreateAssessmentResultCommandObject command
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <returns>ShowCourseApproval command object</returns>
        public object CreateAssessmentResultCommandObject()
        {
            try
            {
                string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
                string learnerSessionID = System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
                string CorrectAnswerChoiceLabel = string.Empty;
                string CorrectAnswerChoiceColor = string.Empty;
                string CorrectAnswerChoiceHighlightColor = string.Empty;
                string IncorrectAnswerChoiceLabel = string.Empty;
                string IncorrectAnswerChoiceColor = string.Empty;
                string IncorrectAnswerChoiceHighlightColor = string.Empty;
                string assessmentResultContent = string.Empty;
                string assessmentResultContentPass = string.Empty;
                string assessmentResultContentFail = string.Empty;
                bool isPass = false;
                int lastAttemptNo = 0;
                bool actionTaken = false;
                long learnerStatisticsID = 0;
                int remediationCount = 0;

                //ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();                
                //trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                //trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                //ICPTrackingService.LearnerStatistics[] learnerStatistics = null;

                //CacheManager.CacheManager cacheManagerCC = new ICP4.BusinessLogic.CacheManager.CacheManager();
                //ICPCourseService.CourseConfiguration courseConfiguration = new ICP4.BusinessLogic.ICPCourseService.CourseConfiguration();
                //int courseConfigurationID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]);
                //courseConfiguration = cacheManagerCC.GetIFConfigurationExistInCache(courseConfigurationID);                

                //learnerStatistics = trackingService.GetPostAssessmentResult(learnerSessionID);
                //GetLastAssessmentResult(learnerStatistics, courseConfiguration.PostAssessmentConfiguration.MasteryScore, out isPass, out lastAttemptNo, out actionTaken, out learnerStatisticsID, out remediationCount);


                ICP4.CommunicationLogic.CommunicationCommand.ShowAssessmentResult.ShowAssessmentResult showAssessmentResult = new ICP4.CommunicationLogic.CommunicationCommand.ShowAssessmentResult.ShowAssessmentResult();
                ICP4.CommunicationLogic.CommunicationCommand.ShowAssessmentResult.AssessmentResultMessage assessmentResultMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowAssessmentResult.AssessmentResultMessage();
                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);

                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {
                    assessmentResultMessage.AssessmentResultMessageHeading = "";
                    assessmentResultMessage.AssessmentResultMessageImageUrl= "";
                    assessmentResultMessage.AssessmentResultMessageText= "";
                    assessmentResultMessage.TemplateassessmentResult = "";
                    
                    string templateAssessmentResult = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.TemplateAssessmetResult, brandCode, variant);

                    CorrectAnswerChoiceLabel = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ChartAssessmentResultPassLabel, brandCode, variant);
                    CorrectAnswerChoiceColor = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ChartAssessmentResultPassColor, brandCode, variant);
                    CorrectAnswerChoiceHighlightColor = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ChartAssessmentResultPassHighlightColor, brandCode, variant);
                    IncorrectAnswerChoiceLabel = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ChartAssessmentResultFailLabel, brandCode, variant);
                    IncorrectAnswerChoiceColor = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ChartAssessmentResultFailColor, brandCode, variant);
                    IncorrectAnswerChoiceHighlightColor = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ChartAssessmentResultFailHighlightColor, brandCode, variant);

                    templateAssessmentResult = templateAssessmentResult.Replace("#ASSESSMENTRESULT_IMAGE", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageAssessmetResult, brandCode, variant));
                    templateAssessmentResult = templateAssessmentResult.Replace("#ASSESSMENTRESULT_HEADING", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingAssessmetResult, brandCode, variant));
                    assessmentResultContent = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentAssessmetResult, brandCode, variant);
                    assessmentResultContentPass = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentPassAssessmentResult, brandCode, variant);
                    assessmentResultContentFail = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentFailAssessmentResult, brandCode, variant);
                    assessmentResultContent = assessmentResultContent.Replace("{0}", "");
                    //if (isPass)
                    //{
                    //    assessmentResultContent = assessmentResultContent.Replace("{0}", assessmentResultContentPass);
                    //}
                    //else
                    //{
                    //    assessmentResultContent = assessmentResultContent.Replace("{0}", assessmentResultContentFail);
                    //}                    

                    templateAssessmentResult = templateAssessmentResult.Replace("#ASSESSMENTRESULT_CONTENT", assessmentResultContent);
                    

                    ICPAssessmentService.AssessmentItemResult[] assessmentItemResults;
                    StringBuilder sb = new StringBuilder();
                    using (ICPAssessmentService.AssessmentService assessmentService = new ICP4.BusinessLogic.ICPAssessmentService.AssessmentService())
                    {
                        assessmentService.Url = ConfigurationManager.AppSettings["ICPAssessmentService"];
                        assessmentService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                        assessmentItemResults = assessmentService.GetLearnerAssessmentItemResults(enrollmentID, _360Training.BusinessEntities.AssessmentConfiguration.ASSESSMENTYPE_POSTASSESSMET);
                    }

                    string ChartData = string.Empty;
                    string ChartScript = string.Empty;

                    if (assessmentItemResults != null && assessmentItemResults.Length > 0)
                    {
                        
                        foreach (ICPAssessmentService.AssessmentItemResult assessmentItemResult in assessmentItemResults)
                        {
                            sb.Append("<tr>");
                            sb.Append("<td class='assessmentResultText assessmentResultborder' align='left'>&nbsp;&nbsp;&nbsp;" + assessmentItemResult.MajorCategory.ToString() + "</td>");
                            sb.Append("<td class='assessmentResultText assessmentResultborder' align='center'>" + string.Format("{0:0.00}", assessmentItemResult.AnswerCorrectPercentage) + " %</td>");
                            sb.Append("<td class='assessmentResultText assessmentResultborder' align='center' width='18%'><div id='canvasholder" + assessmentItemResult.AssessmentItemResultlID.ToString() + "'><canvas id='chartarea" + assessmentItemResult.AssessmentItemResultlID.ToString() + "' width='150' height='85'/></div></td>");
                            ChartData += "var pieData" + assessmentItemResult.AssessmentItemResultlID.ToString() + " = [{value: " + string.Format("{0:0.00}", assessmentItemResult.AnswerCorrectPercentage) + ",color:\"" + CorrectAnswerChoiceColor + "\",highlight: \"" + CorrectAnswerChoiceHighlightColor + "\",label: \"" + CorrectAnswerChoiceLabel + "\"},{value: " + string.Format("{0:0.00}", assessmentItemResult.AnswerInCorrectPercentage) + ",color: \"" + IncorrectAnswerChoiceColor + "\",highlight: \"" + IncorrectAnswerChoiceHighlightColor + "\",label: \"" + IncorrectAnswerChoiceLabel + "\"},];" + "\n"  ;
                            ChartScript += "ctx = document.getElementById('chartarea" + assessmentItemResult.AssessmentItemResultlID.ToString() + "').getContext('2d');" + "\n new Chart(ctx).Pie(pieData" + assessmentItemResult.AssessmentItemResultlID.ToString() + ");";
                            sb.Append("</tr>");                        
                        }                    
                    }
                    else
                    {
                        return null;
                    }                    

                    templateAssessmentResult = templateAssessmentResult.Replace("<ASSESSMENTRESULTLIST />", sb.ToString());                    
                    assessmentResultMessage.TemplateassessmentResult = templateAssessmentResult;
                    assessmentResultMessage.TemplateChartData = ChartData.ToString() + "\n" + ChartScript;
                }
                showAssessmentResult.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowAssessmentResult;
                showAssessmentResult.AssessmentResultMessage= assessmentResultMessage;
                return showAssessmentResult;
            }
            catch (Exception exp)
            {
                ExceptionPolicyForLCMS.HandleException(exp, "ICPException");
                return null;
            }
        }

        /// <summary>
        /// This method sends ShowCourseApproval command
        /// </summary>
        /// <param name="courseID">CourseID integer value</param>
        /// <returns>ShowCourseApproval command object</returns>
        public object CreateCourseApprovalCommandObject(int courseID, string learningSessionGUID)
        {
            try
            {
                string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
                string paramValue = string.Empty;
                string queryParam = string.Empty;
                string courseName = string.Empty;
                int courseapprovallength = Convert.ToInt32(ConfigurationManager.AppSettings["CourseApprovalTextLength"].ToString());   

                ICP4.CommunicationLogic.CommunicationCommand.ShowCourseApproval.ShowCourseApproval showCourseApproval = new ICP4.CommunicationLogic.CommunicationCommand.ShowCourseApproval.ShowCourseApproval();
                ICP4.CommunicationLogic.CommunicationCommand.ShowCourseApproval.CourseApprovalMessage courseApprovalMessage = new ICP4.CommunicationLogic.CommunicationCommand.ShowCourseApproval.CourseApprovalMessage();
                int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);

                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {
                    courseApprovalMessage.CourseApprovalMessageHeading = "";
                    courseApprovalMessage.CourseApprovalMessageImageUrl = "";
                    courseApprovalMessage.ContentCourseApprovalButton = "";
                    courseApprovalMessage.CourseApprovalMessageText = "";
                    string templatecourseapproval = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.TemplateCourseApproval, brandCode, variant);

                    templatecourseapproval = templatecourseapproval.Replace("#COURSEAPPROVAL_IMAGE", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageCourseApproval, brandCode, variant));
                    templatecourseapproval = templatecourseapproval.Replace("#COURSEAPPROVAL_HEADING", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingCourseApproval, brandCode, variant));
                    templatecourseapproval = templatecourseapproval.Replace("#COURSEAPPROVAL_CONTENT", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentCourseApproval, brandCode, variant));
                    templatecourseapproval = templatecourseapproval.Replace("#COURSEAPPROVAL_BUTTONNAME", cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ContentCourseApprovalButton, brandCode, variant));

                    ICPCourseService.CourseApproval[] courseApprovals;
                    StringBuilder sb = new StringBuilder();
                    using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
                    {
                        courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                        courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                        courseApprovals = courseService.GetCourseCourseApproval(courseID, learningSessionGUID);
                    }

                    if (courseApprovals != null && courseApprovals.Length > 0)
                    {
                        courseName = courseApprovals[0].CourseName; 
                        foreach (ICPCourseService.CourseApproval courseapproval in courseApprovals)
                        {
                            sb.Append("<tr>");

                            if (courseapproval.HoldingRegulator.Length > courseapprovallength)
                            {
                                sb.Append("<td class='courseapprovalborder'><span title='" + courseapproval.HoldingRegulator + "'>" + courseapproval.HoldingRegulator.Substring(0, courseapprovallength) + "...</span></td>");
                            }
                            else
                            {
                                sb.Append("<td class='courseapprovalborder'><span title='" + courseapproval.HoldingRegulator + "'>" + courseapproval.HoldingRegulator + "</span></td>");
                            }

                            if (courseapproval.CreditType.Length > courseapprovallength)
                            {
                                sb.Append("<td class='courseapprovalborder'><span title='" + courseapproval.CreditType + "'>" + courseapproval.CreditType.Substring(0, courseapprovallength) + "...</<span></td>");
                            }
                            else
                            {
                                sb.Append("<td class='courseapprovalborder'><span title='" + courseapproval.CreditType + "'>" + courseapproval.CreditType + "</<span></td>");
                            }

                            sb.Append("<td align='center' class='courseapprovalborder'>" + String.Format("{0:0.00}", courseapproval.ApprovedCourseHour) + "</td>");

                            if (courseapproval.CredentialName.Length > courseapprovallength)
                            {
                                sb.Append("<td class='courseapprovalborder'><span title='" + courseapproval.CredentialName + "'>" + courseapproval.CredentialName.Substring(0, courseapprovallength) + "...</<span></td>");
                            }
                            else
                            {
                                sb.Append("<td class='courseapprovalborder'><span title='" + courseapproval.CredentialName + "'>" + courseapproval.CredentialName + "</<span></td>");
                            }

                            sb.Append("<td class='courseapprovalborder'>" + courseapproval.CourseApprovalCode.ToString() + "</td>");
                            sb.Append("</tr>");
                        }
                    }
                    else
                    {
                        return null;
                    }

                    templatecourseapproval = templatecourseapproval.Replace("<CourseApprovalList />", sb.ToString());
                    courseApprovalMessage.TemplatecourseApproval = templatecourseapproval;
                    courseApprovalMessage.CourseName = courseName;
                }
                showCourseApproval.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowCourseApproval;
                showCourseApproval.CourseApprovalMessage = courseApprovalMessage;
                return showCourseApproval;
            }
            catch(Exception exp)
            {
                ExceptionPolicyForLCMS.HandleException(exp, "ICPException");
                return null;
            }
        }

        public bool CheckLearnerCourseApproval(int courseID, string learningSessionGUID) 
        {
            bool IsCourseApproval=false;
            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                IsCourseApproval = courseService.CheckLearnerCourseCourseApproval(courseID, learningSessionGUID); 
            }
            return IsCourseApproval;
        }

        public void SaveLearnerCourseApproval(int courseID, string learningSessionGUID, int CourseApprovalID)
        {            
            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                courseService.SaveLearnerCourseApproval(courseID,learningSessionGUID,CourseApprovalID);    
            }
        }

        public void SaveLearnerCourseMessage(int courseID, string learningSessionGUID)
        {
            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                courseService.SaveLearnerCourseMessage(courseID, learningSessionGUID);
            }
        }

        public int GetCourseConfigurationID(int courseID, int source) 
        {
            int courseConfigurationID = 0;
            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                int courseApproval = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseApprovalID"]);
                courseConfigurationID = courseService.GetCourseConfiguarationID(courseID, source, courseApproval); 
            }
            return courseConfigurationID;

        }

        /// <summary>
        /// This method sends ShowCourseApprovalAffidavit command
        /// </summary>        
        /// <returns>ShowCourseApprovalAffidavit command object</returns>
        private object CreateCourseApprovalAffidavitCommandObject(int affidivatID)
        {
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
            int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["currentindex"]);
            bool isDemoable = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]);
            string headingAffidavit = string.Empty;
            string AffidavitDownloadButtonText = string.Empty;
            string AffidavitContinueButtonText = string.Empty;
            string ImageCourseApprovalAffidavit = string.Empty;            
            string CourseApprovalAffidavitText = string.Empty;
            string TemplateCourseApprovalAffidavit = string.Empty;
            string Acknowledgement_Statement = "I understand I need a Proctor to monitor my Final Exam";

            ICP4.CommunicationLogic.CommunicationCommand.ShowCourseApprovalAffidavit.CourseApprovalAffidavit courseApprovalAffidavit = new ICP4.CommunicationLogic.CommunicationCommand.ShowCourseApprovalAffidavit.CourseApprovalAffidavit();
            ICP4.CommunicationLogic.CommunicationCommand.ShowCourseApprovalAffidavit.ShowCourseApprovalAffidavit showCourseApprovalAffidavit = new ICP4.CommunicationLogic.CommunicationCommand.ShowCourseApprovalAffidavit.ShowCourseApprovalAffidavit();

            ICPCourseService.Asset asset = new ICP4.BusinessLogic.ICPCourseService.Asset();
            
            ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService();
            courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
            courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
            asset = courseService.GetAffidavitAsset(affidivatID);
            string HTML = "";

            //LCMS-11217
            if (asset.AffidavitTemplateId > 0 && asset.AssetType == AssetType.Affidavit)
            {
                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {
                    headingAffidavit = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingAffidavit, brandCode, variant);
                    ImageCourseApprovalAffidavit = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageCourseApprovalAffidavit, brandCode, variant);
                    CourseApprovalAffidavitText = asset.DisplayText2.ToString();
                    TemplateCourseApprovalAffidavit = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.TemplateCourseApprovalAffidavit2, brandCode, variant);
                    Acknowledgement_Statement = asset.DisplayText3;

                    StringBuilder sb = new StringBuilder(TemplateCourseApprovalAffidavit);
                    sb.Replace("$VisualImage", ImageCourseApprovalAffidavit);
                    sb.Replace("$Heading", headingAffidavit);
                    sb.Replace("$Text", CourseApprovalAffidavitText);
                    sb.Replace("$ACKNOWLEDGEMENT", Acknowledgement_Statement);
                    HTML = sb.ToString();
                }
                courseApprovalAffidavit.IsDocuSignAffidavit = true;
            }
            else
            {
                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {
                    headingAffidavit = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingAffidavit, brandCode, variant);
                    AffidavitDownloadButtonText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AffidavitDownloadButtonText, brandCode, variant);
                    AffidavitContinueButtonText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.AffidavitContinueButtonText, brandCode, variant);
                    ImageCourseApprovalAffidavit = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageCourseApprovalAffidavit, brandCode, variant);
                    //CourseApprovalAffidavitText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.CourseApprovalAffidavitText, brandCode, variant);
                    //CourseApprovalAffidavitText = asset.ContentText.ToString();
                    //Abdus Samad 
                    //Course Approval Start
                    CourseApprovalAffidavitText = asset.DisplayText2.ToString() + cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.TemplateCourseApprovalAffidavit3, brandCode, variant);
                    //Course Approval Stop
                    TemplateCourseApprovalAffidavit = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.TemplateCourseApprovalAffidavit, brandCode, variant);
                    Acknowledgement_Statement = asset.DisplayText3;

                    StringBuilder sb = new StringBuilder(TemplateCourseApprovalAffidavit);
                    sb.Replace("$VisualImage", ImageCourseApprovalAffidavit);
                    sb.Replace("$Heading", headingAffidavit);
                    sb.Replace("$Text", CourseApprovalAffidavitText);
                    sb.Replace("$DownloadText", AffidavitDownloadButtonText);
                    sb.Replace("$ContinueText", AffidavitContinueButtonText);
                    sb.Replace("$ACKNOWLEDGEMENT", Acknowledgement_Statement);
                    HTML = sb.ToString();
                }
            }

            courseApprovalAffidavit.CourseID = courseID;
            courseApprovalAffidavit.AffidavitURL = ConfigurationManager.AppSettings["ICPFileSystem"].ToString() + asset.URL.ToString();
            courseApprovalAffidavit.TemplateHtml = HTML;
            courseApprovalAffidavit.TemplateHtml = courseApprovalAffidavit.TemplateHtml.Replace("\n", "");
            showCourseApprovalAffidavit.Affidavit = courseApprovalAffidavit;
            showCourseApprovalAffidavit.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowCourseApprovalAffidavit;
            return showCourseApprovalAffidavit;
        }

        private object CourseApprovalAffidavit() 
        {
            ///////////////////////////////////////////////////////////////////////////////
            // If Course have Course Approval then it should display affidavit screen if            
            // Affidavit is on, also this condition will execute for LMS if source=0

            int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
            int courseApproval = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseApprovalID"]);
            bool isCourseApprovalAffidavitAsk = Convert.ToBoolean(System.Web.HttpContext.Current.Session["AskedCourseApprovalAffidavit"]);
            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["isPreview"]);
            string learningSessionID = System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            ICPCourseService.CourseConfiguration courseConfiguration = GetCourseConfiguration(Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]));

            int lastAttemptNo = 0;
            bool isPass = false;
            bool actionTaken = false;
            long learnerStatisticsID = 0;
            int lastRemediationCount = 0;            

            ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();
            trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
            trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

            if (source == 0 && courseApproval > 0 && isPreview == false && isCourseApprovalAffidavitAsk == false)
            {
                ICPTrackingService.LearnerStatistics[] learnerStatisticsCourseApproval = null;
                learnerStatisticsCourseApproval = trackingService.GetPostAssessmentResult(learningSessionID);
                GetLastAssessmentResult(learnerStatisticsCourseApproval, courseConfiguration.PostAssessmentConfiguration.MasteryScore, out isPass, out lastAttemptNo, out actionTaken, out learnerStatisticsID, out lastRemediationCount);

                if (!isPass)
                {
                    using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
                    {
                        courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                        courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                        int affidavit = courseService.GetCourseApprovalAffidavit(courseID, courseApproval);
                        if (affidavit > 0)
                        {
                            return CreateCourseApprovalAffidavitCommandObject(affidavit);
                        }
                    }
                }
            }
            return null;            
        }

        private object LoadCourseApprovalAffidavit(object assessmentStartCommand)
        {
            bool affidavitAcknowledgment = false;
            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
                affidavitAcknowledgment = courseService.GetAffidavitAcknowledgmentStatus(enrollmentID);
            }

            

            //if (System.Web.HttpContext.Current.Session["isAffidavitChecked"] != null && (bool)System.Web.HttpContext.Current.Session["isAffidavitChecked"])
            if(affidavitAcknowledgment)
            {
                return SpecialPostAssessmentValidation(assessmentStartCommand);
            }
            else
            {
                System.Web.HttpContext.Current.Session["CurrentCommandProctor"] = assessmentStartCommand;
                object returncommand = CourseApprovalAffidavit();
                if (returncommand == null)
                {
                    //return assessmentStartCommand;
                    return SpecialPostAssessmentValidation(assessmentStartCommand);
                }
                else
                {
                    return returncommand;
                }
            }

            
            return null;
        }


        public object AuthenticateProctor(string proctorLogin, string proctorPassword)
        {

            ICP4.CommunicationLogic.CommunicationCommand.ShowProctorAuthenticationResult.ProctorAuthenticationResult proctorAuthenticationResult = new ICP4.CommunicationLogic.CommunicationCommand.ShowProctorAuthenticationResult.ProctorAuthenticationResult();
            ICP4.CommunicationLogic.CommunicationCommand.ShowProctorAuthenticationResult.ShowProctorAuthenticationResult showProctorAuthenticationResult = new ICP4.CommunicationLogic.CommunicationCommand.ShowProctorAuthenticationResult.ShowProctorAuthenticationResult();
            proctorAuthenticationResult.ErrorMessage = "";
            showProctorAuthenticationResult.ProctorAuthenticationResult = proctorAuthenticationResult;
            showProctorAuthenticationResult.CommandName = CommandNames.ShowProctorAuthenticationResult;
            int proctorLoginAttempt = 3;
            int.TryParse(ConfigurationManager.AppSettings["ProctorLoginAttempt"].ToString(), out proctorLoginAttempt);

            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsPreview"]);
            
            if (isPreview)
            {
                object assessmentStartCommand = System.Web.HttpContext.Current.Session["CurrentCommandProctor"];
                System.Web.HttpContext.Current.Session.Remove("CurrentCommandProctor");
                return assessmentStartCommand;
            }

            if (System.Web.HttpContext.Current.Session["ProctorFailedAttempts"] == null)
            {
                System.Web.HttpContext.Current.Session["ProctorFailedAttempts"] = 0;
            }

            int returnCode = 0;
            string errorMessage = "";
            string learningSessionID = System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            int learnerID = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerID"]);
            int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);

            try
            {
                using (ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
                {
                    trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                    trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                    returnCode = trackingService.AuthenticateProctor(courseID, learnerID, learningSessionID, proctorLogin, proctorPassword);

                }

                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {

                    string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                    string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();

                    switch (returnCode)
                    {
                        case 0:
                            object assessmentStartCommand = System.Web.HttpContext.Current.Session["CurrentCommandProctor"];
                            System.Web.HttpContext.Current.Session.Remove("CurrentCommandProctor");
                            System.Web.HttpContext.Current.Session.Remove("ProctorFailedAttempts");
                            return assessmentStartCommand;
                        case 1:
                        //errorMessage = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ProctorLoginScreenErrNoProctorsAssociated, brandCode, variant);
                        //break;
                        case 2:
                            //errorMessage = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ProctorLoginScreenErrCurrentProctorNotAssociated, brandCode, variant);
                            //break;

                            LockCourse(courseID, learnerID, enrollmentID, LockingReason.ProctorNotPartOfCredential);
                            System.Web.HttpContext.Current.Session["CourseLocked"] = true;
                            return CreateCourseLockedCommandObject(courseID, LockingReason.ProctorNotPartOfCredential);
                        case 3:
                            errorMessage = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ProctorLoginScreenErrInvalidProctorLogin, brandCode, variant);
                            break;
                        case 4:
                            errorMessage = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ProctorLoginScreenErrInvalidProctorPassword, brandCode, variant);
                            break;
                        case 5:
                            //errorMessage = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ProctorLoginScreenErrAccountNotActive, brandCode, variant);
                            LockCourse(courseID, learnerID, enrollmentID, LockingReason.ProctorAccountNotActive);
                            System.Web.HttpContext.Current.Session["CourseLocked"] = true;
                            return CreateCourseLockedCommandObject(courseID, LockingReason.ProctorAccountNotActive);
                        // break;
                    }


                    if (returnCode == 0)
                    {
                        System.Web.HttpContext.Current.Session.Remove("ProctorFailedAttempts");
                    }
                    else
                    {

                        System.Web.HttpContext.Current.Session["ProctorFailedAttempts"] = Convert.ToInt32(System.Web.HttpContext.Current.Session["ProctorFailedAttempts"]) + 1;
                        if (Convert.ToInt32(System.Web.HttpContext.Current.Session["ProctorFailedAttempts"]) >= proctorLoginAttempt)
                        {
                            LockCourse(courseID, learnerID, enrollmentID, LockingReason.ProctorLoginFailed);
                            System.Web.HttpContext.Current.Session["CourseLocked"] = true;
                            return CreateCourseLockedCommandObject(courseID, LockingReason.ProctorLoginFailed);
                        }
                    }

                    proctorAuthenticationResult.ErrorMessage = errorMessage;

                }
            }
            catch (Exception exp)
            {
                ExceptionPolicyForLCMS.HandleException(exp, "ICPException");
                proctorAuthenticationResult.ErrorMessage = "An error occured while authenticating proctor";
            }

            return showProctorAuthenticationResult;

        }


        public object AuthenticateSpecialPostAssessmentValidation(string learnerSessionID, string DRELicenseNumber, string DriverLicenseNumber)
        {

            ICP4.CommunicationLogic.CommunicationCommand.ShowSpecialPostAssessmentAuthenticationResult.SpecialPostAssessmentAuthenticationResult specialPostAssessmentAuthenticationResult = new ICP4.CommunicationLogic.CommunicationCommand.ShowSpecialPostAssessmentAuthenticationResult.SpecialPostAssessmentAuthenticationResult();
            ICP4.CommunicationLogic.CommunicationCommand.ShowSpecialPostAssessmentAuthenticationResult.ShowSpecialPostAssessmentAuthenticationResult showSpecialPostAssessmentAuthenticationResult = new ICP4.CommunicationLogic.CommunicationCommand.ShowSpecialPostAssessmentAuthenticationResult.ShowSpecialPostAssessmentAuthenticationResult();

            specialPostAssessmentAuthenticationResult.ErrorMessage = "";

            showSpecialPostAssessmentAuthenticationResult.SpecialPostAssessmentAuthenticationResult = specialPostAssessmentAuthenticationResult;
            showSpecialPostAssessmentAuthenticationResult.CommandName = CommandNames.ShowSpecialPostAssessmentAuthenticationResult;

            int proctorLoginAttempt = 3;
            int.TryParse(ConfigurationManager.AppSettings["CARealStateValidationAttempt"].ToString(), out proctorLoginAttempt);

            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsPreview"]);
            if (isPreview)
            {
                object assessmentStartCommand = System.Web.HttpContext.Current.Session["CurrentCommandProctor"];
                System.Web.HttpContext.Current.Session.Remove("CurrentCommandProctor");
                return assessmentStartCommand;
            }

            if (System.Web.HttpContext.Current.Session["ProctorFailedAttempts"] == null)
            {
                System.Web.HttpContext.Current.Session["ProctorFailedAttempts"] = 0;
            }

            int returnCode = 0;
            string errorMessage = "";
            string learningSessionID = System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            int learnerID = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerID"]);
            int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);

            try
            {
                using (ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
                {
                    trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                    trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                    returnCode = trackingService.AuthenticateSpecialPostAssessmentValidation(courseID, learnerID, learningSessionID, DRELicenseNumber, DriverLicenseNumber);

                }

                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {

                    string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                    string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();

                    switch (returnCode)
                    {
                        case 0:
                            object assessmentStartCommand = System.Web.HttpContext.Current.Session["CurrentCommandProctor"];
                            System.Web.HttpContext.Current.Session.Remove("CurrentCommandProctor");
                            System.Web.HttpContext.Current.Session.Remove("ProctorFailedAttempts");
                            return assessmentStartCommand;                        
                        case 1:
                            LockCourse(courseID, learnerID, enrollmentID, LockingReason.CourseApprovalNotAttachedWithCourse);
                            System.Web.HttpContext.Current.Session["CourseLocked"] = true;
                            return CreateCourseLockedCommandObject(courseID, LockingReason.CourseApprovalNotAttachedWithCourse);
                        case 2:
                            LockCourse(courseID, learnerID, enrollmentID, LockingReason.ReportingFieldNotAttachedWithCourseApproval);
                            System.Web.HttpContext.Current.Session["CourseLocked"] = true;
                            return CreateCourseLockedCommandObject(courseID, LockingReason.ReportingFieldNotAttachedWithCourseApproval);
                        case 3:
                            errorMessage = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.CARealStateValidationErrInvalidFields, brandCode, variant);
                            break;
                    }


                    if (returnCode == 0)
                    {
                        System.Web.HttpContext.Current.Session.Remove("ProctorFailedAttempts");
                    }
                    else
                    {

                        System.Web.HttpContext.Current.Session["ProctorFailedAttempts"] = Convert.ToInt32(System.Web.HttpContext.Current.Session["ProctorFailedAttempts"]) + 1;
                        if (Convert.ToInt32(System.Web.HttpContext.Current.Session["ProctorFailedAttempts"]) >= proctorLoginAttempt)
                        {
                            LockCourse(courseID, learnerID, enrollmentID, LockingReason.ReportingFieldMisMatch);
                            System.Web.HttpContext.Current.Session["CourseLocked"] = true;
                            return CreateCourseLockedCommandObject(courseID, LockingReason.ReportingFieldMisMatch);
                        }
                    }

                    specialPostAssessmentAuthenticationResult.ErrorMessage = errorMessage;

                }
            }
            catch (Exception exp)
            {
                ExceptionPolicyForLCMS.HandleException(exp, "ICPException");
                specialPostAssessmentAuthenticationResult.ErrorMessage = "An error occured while authenticating CA Real State Validation";
            }

            return showSpecialPostAssessmentAuthenticationResult;

        }


        public object AuthenticateNYInsuranceValidation(string learnerSessionID, string MonitorNumber)
        {

            ICP4.CommunicationLogic.CommunicationCommand.ShowSpecialPostAssessmentAuthenticationResult.SpecialPostAssessmentAuthenticationResult specialPostAssessmentAuthenticationResult = new ICP4.CommunicationLogic.CommunicationCommand.ShowSpecialPostAssessmentAuthenticationResult.SpecialPostAssessmentAuthenticationResult();
            ICP4.CommunicationLogic.CommunicationCommand.ShowSpecialPostAssessmentAuthenticationResult.ShowSpecialPostAssessmentAuthenticationResult showSpecialPostAssessmentAuthenticationResult = new ICP4.CommunicationLogic.CommunicationCommand.ShowSpecialPostAssessmentAuthenticationResult.ShowSpecialPostAssessmentAuthenticationResult();

            specialPostAssessmentAuthenticationResult.ErrorMessage = "";

            showSpecialPostAssessmentAuthenticationResult.SpecialPostAssessmentAuthenticationResult = specialPostAssessmentAuthenticationResult;
            showSpecialPostAssessmentAuthenticationResult.CommandName = CommandNames.ShowNYInsuranceAuthenticationResult;

            int NYInsuranceValidationAttempt = 3;
            int.TryParse(ConfigurationManager.AppSettings["NYInsuranceValidationAttempt"].ToString(), out NYInsuranceValidationAttempt);

            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsPreview"]);
            if (isPreview)
            {
                object assessmentStartCommand = System.Web.HttpContext.Current.Session["CurrentCommandProctor"];
                System.Web.HttpContext.Current.Session.Remove("CurrentCommandProctor");
                return assessmentStartCommand;
            }

            if (System.Web.HttpContext.Current.Session["ProctorFailedAttempts"] == null)
            {
                System.Web.HttpContext.Current.Session["ProctorFailedAttempts"] = 0;
            }

            int returnCode = 0;
            string errorMessage = "";
            string learningSessionID = System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            int learnerID = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerID"]);
            int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);

            try
            {
                using (ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
                {
                    trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                    trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                    returnCode = trackingService.AuthenticateNYInsuranceValidation(courseID, learnerID, learningSessionID, MonitorNumber);
                }

                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {

                    string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
                    string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();

                    switch (returnCode)
                    {
                        case 0:
                            object assessmentStartCommand = System.Web.HttpContext.Current.Session["CurrentCommandProctor"];
                            System.Web.HttpContext.Current.Session.Remove("CurrentCommandProctor");
                            System.Web.HttpContext.Current.Session.Remove("ProctorFailedAttempts");
                            return assessmentStartCommand;                        
                        case 1:
                            errorMessage = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.NYInsuranceValidationErrInvalidFields, brandCode, variant);
                            break;
                    }

                    if (returnCode == 0)
                    {
                        System.Web.HttpContext.Current.Session.Remove("ProctorFailedAttempts");
                    }
                    else
                    {

                        System.Web.HttpContext.Current.Session["ProctorFailedAttempts"] = Convert.ToInt32(System.Web.HttpContext.Current.Session["ProctorFailedAttempts"]) + 1;
                        if (Convert.ToInt32(System.Web.HttpContext.Current.Session["ProctorFailedAttempts"]) >= NYInsuranceValidationAttempt)
                        {
                            LockCourse(courseID, learnerID, enrollmentID, LockingReason.MonitorFieldMisMatch);
                            System.Web.HttpContext.Current.Session["CourseLocked"] = true;
                            return CreateCourseLockedCommandObject(courseID, LockingReason.MonitorFieldMisMatch);
                        }
                    }

                    specialPostAssessmentAuthenticationResult.ErrorMessage = errorMessage;

                }
            }
            catch (Exception exp)
            {
                ExceptionPolicyForLCMS.HandleException(exp, "ICPException");
                specialPostAssessmentAuthenticationResult.ErrorMessage = "An error occured while authenticating NY Insurance Validation";
            }

            return showSpecialPostAssessmentAuthenticationResult;

        }

        private string AssessmentMaxAttemptText(string attemptMessge, int attemptNumber) 
        {
            if (attemptNumber == 1)
            {
                attemptMessge = attemptMessge.Replace("attempts", "attempt"); 
            }
            return attemptMessge;

        }
        //public object LoadCourseSettings(int courseID)
        //{
        //    ICP4.CommunicationLogic.CommunicationCommand.ShowCourseSettings.ShowCourseSettings showCourseSettings = new ICP4.CommunicationLogic.CommunicationCommand.ShowCourseSettings.ShowCourseSettings();
        //    ICP4.CommunicationLogic.CommunicationCommand.ShowCourseSettings.CourseSettings courseSettings = new ICP4.CommunicationLogic.CommunicationCommand.ShowCourseSettings.CourseSettings();
        //    try
        //    {
        //        showCourseSettings.CommandName = CommandNames.ShowCourseSettings;
        //        courseSettings.ShowInstructorInfo = DisplayInstructorInfo(courseID);

        //        showCourseSettings.CourseSettings = courseSettings;
        //    }
        //    catch (Exception exp)
        //    {
        //        ExceptionPolicyForLCMS.HandleException(exp, "ICPException");
        //        throw exp;
        //    }
        //    return showCourseSettings;
        //}
        #region Instructor Info
        private bool DisplayInstructorInfo(ICPCourseService.CourseConfiguration courseConfiguration)
        {
            bool returnValue = false;
            try
            {
                if (courseConfiguration != null && courseConfiguration.InstructorInfoEnabled)
                    returnValue = true;

            }
            catch (Exception exp)
            {
                ExceptionPolicyForLCMS.HandleException(exp, "ICPException");
                returnValue = false;
            }
            return returnValue;
        }
        #endregion

		 //LCMS-10392
        public string GetCourseKeywords(int courseID)
        {
            string courseKeywords = null;
            using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                courseKeywords = courseService.GetCourseKeywords(courseID);
            }
            return courseKeywords;
        }

        #region LCMS-11281

        public object LoadDocuSignRequirement(object assessmentStartCommand)
        {
            System.Web.HttpContext.Current.Session["CurrentCommandDocuSign"] = assessmentStartCommand;
            object returncommand = DocuSignRequirement();
            if (returncommand != null)
            {
                return returncommand;
            }
            
            return null;
        }

        private object DocuSignRequirement() 
        {
            ///////////////////////////////////////////////////////////////////////////////
            // If Course have Course Approval then it should display affidavit screen if            
            // Affidavit is on, also this condition will execute for LMS if source=0

            int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
            int courseApproval = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseApprovalID"]);
            //bool isCourseApprovalAffidavitAsk = Convert.ToBoolean(System.Web.HttpContext.Current.Session["AskedCourseApprovalAffidavit"]);
            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["isPreview"]);
            string learningSessionID = System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            ICPCourseService.CourseConfiguration courseConfiguration = GetCourseConfiguration(Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]));
                       
            ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();
            trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
            trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

            if (source == 0 && courseApproval > 0 && isPreview == false )
            {   
                    using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
                    {
                        courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                        courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                        int affidavit = courseService.GetCourseApprovalAffidavit(courseID, courseApproval);
                        if (affidavit > 0)
                        {
                            return CreateDocuSignRequirementCommandObject(affidavit);
                        }
                    }
            }
            return null;            
        }

        private bool LoadDisplayText1()
        {
            int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
            int courseApproval = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseApprovalID"]);
            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["isPreview"]);
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);

            ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();
            trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
            trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

            if (source == 0 && courseApproval > 0 && isPreview == false)
            {
                using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
                {
                    courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                    courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                    int affidavit = courseService.GetCourseApprovalAffidavit(courseID, courseApproval);
                    if (affidavit > 0)
                    {
                        return true;
                    }
                }
            }
            return false ;
        }

        private object CreateDocuSignRequirementCommandObject(int affidivatID)
        {
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
            int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["currentindex"]);
            bool isDemoable = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]);
            string headingRequirementAffidavit = string.Empty;
            string AffidavitDownloadButtonText = string.Empty;
            string AffidavitContinueButtonText = string.Empty;
            string ImageCourseApprovalAffidavit = string.Empty;
            string DocuSignAffidavitRequirement = string.Empty;
            string TemplateDocuSignAffidavitRequirement = string.Empty;
            string ImageDocuSignAffidavitRequirement = string.Empty;

            ICP4.CommunicationLogic.CommunicationCommand.ShowDocuSignRequirementAffidavit.DocuSignRequirementAffidavit requirementAffidavit = new ICP4.CommunicationLogic.CommunicationCommand.ShowDocuSignRequirementAffidavit.DocuSignRequirementAffidavit();
            ICP4.CommunicationLogic.CommunicationCommand.ShowDocuSignRequirementAffidavit.ShowDocuSignRequirementAffidavit showDocuSignRequirementAffidavit = new ICP4.CommunicationLogic.CommunicationCommand.ShowDocuSignRequirementAffidavit.ShowDocuSignRequirementAffidavit();

            ICPCourseService.Asset asset = new ICP4.BusinessLogic.ICPCourseService.Asset();

            ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService();
            courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
            courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
            asset = courseService.GetAffidavitAsset(affidivatID);
            string HTML = "";

            //LCMS-11217
            if (/*asset.AffidavitTemplateId > 0 && */asset.AssetType == AssetType.Affidavit)
            {
                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {
                    headingRequirementAffidavit = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingRequirementAffidavit, brandCode, variant);
                    DocuSignAffidavitRequirement = asset.DisplayText1.ToString();
                    TemplateDocuSignAffidavitRequirement = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.TemplateDocuSignAffidavitRequirement, brandCode, variant);
                    ImageDocuSignAffidavitRequirement = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageCourseApprovalAffidavit, brandCode, variant);

                    StringBuilder sb = new StringBuilder(TemplateDocuSignAffidavitRequirement);
                    sb.Replace("$Heading", headingRequirementAffidavit);
                    sb.Replace("$Text", DocuSignAffidavitRequirement);
                    sb.Replace("$VisualImage", ImageDocuSignAffidavitRequirement);
                    HTML = sb.ToString();
                }
                requirementAffidavit.IsDocuSignAffidavit = true;
            }
            else
            {
                return null;
            }


            requirementAffidavit.CourseID = courseID;
            requirementAffidavit.AffidavitURL = ConfigurationManager.AppSettings["ICPFileSystem"].ToString() + asset.URL.ToString();
            requirementAffidavit.TemplateHtml = HTML;
            requirementAffidavit.TemplateHtml = requirementAffidavit.TemplateHtml.Replace("\n", "");
            showDocuSignRequirementAffidavit.Affidavit = requirementAffidavit;
            showDocuSignRequirementAffidavit.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowDocuSignRequirementAffidavit;
            return showDocuSignRequirementAffidavit;
        }

        public object GetCommandObjectIfEndofCoruse(int courseID,int seqNo)
        {
            object returnCommand = new object();

            ICPCourseService.SequenceItem sequenceItem = null;

            try
            {
                sequenceItem = GetSequenceItem(courseID, seqNo);
                returnCommand = LoadSequenceItemIntoCommand(courseID, seqNo, sequenceItem, true);
                return returnCommand;
            }
            catch 
            {
                returnCommand= null;
                
            }

            return returnCommand;
            

        }
        #endregion 
        #region LCMS-11282
        public void SaveAffidavitAcknowledgmentStatus(bool courseApprovalAffidavitStatus)
        {
            int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
            using (ICPCourseService.CourseService courseService = new ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                courseService.SaveAffidavitAcknowledgmentStatus(courseApprovalAffidavitStatus, enrollmentID);
            }
        }
        #endregion
        #region LCMS-11283

        public object LoadDocuSignProcess(object docuSignProcessCommand)
        {
            System.Web.HttpContext.Current.Session["CurrentCommandDocuSignProcess"] = docuSignProcessCommand;
            object returncommand = DocuSignProcess();
            if (returncommand != null)
            {
                return returncommand;
            }
            else
            {
                return SpecialLoadCourseCertificateCommand(docuSignProcessCommand);
            }

            return null;
        }

        private object DocuSignProcess()
        {
            ///////////////////////////////////////////////////////////////////////////////
            // If Course have Course Approval then it should display affidavit screen if            
            // Affidavit is on, also this condition will execute for LMS if source=0

            int source = Convert.ToInt32(System.Web.HttpContext.Current.Session["Source"]);
            int courseApproval = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseApprovalID"]);
            //bool isCourseApprovalAffidavitAsk = Convert.ToBoolean(System.Web.HttpContext.Current.Session["AskedCourseApprovalAffidavit"]);
            bool isPreview = Convert.ToBoolean(System.Web.HttpContext.Current.Session["isPreview"]);
            string learningSessionID = System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            ICPCourseService.CourseConfiguration courseConfiguration = GetCourseConfiguration(Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseConfigurationID"]));

            int lastAttemptNo = 0;
            bool isPass = false;
            bool actionTaken = false;
            long learnerStatisticsID = 0;
            int lastRemediationCount = 0; 

            ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService();
            trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
            trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

            if (source == 0 && courseApproval > 0 && isPreview == false)
            {
                ICPTrackingService.LearnerStatistics[] learnerStatisticsCourseApproval = null;
                learnerStatisticsCourseApproval = trackingService.GetPostAssessmentResult(learningSessionID);
                GetLastAssessmentResult(learnerStatisticsCourseApproval, courseConfiguration.PostAssessmentConfiguration.MasteryScore, out isPass, out lastAttemptNo, out actionTaken, out learnerStatisticsID, out lastRemediationCount);

                if (isPass)
                {
                    using (ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService())
                    {
                        courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                        courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                        int affidavit = courseService.GetCourseApprovalAffidavit(courseID, courseApproval);
                        if (affidavit > 0)
                        {
                            return CreateDocuSignProcessCommandObject(affidavit);
                        }
                    }
                }
            }
            return null;
        }

        private object CreateDocuSignProcessCommandObject(int affidivatID)
        {
            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            string brandCode = System.Web.HttpContext.Current.Session["BrandCode"].ToString();
            string variant = System.Web.HttpContext.Current.Session["Variant"].ToString();
            int seqNo = Convert.ToInt32(System.Web.HttpContext.Current.Session["currentindex"]);
            bool isDemoable = Convert.ToBoolean(System.Web.HttpContext.Current.Session["IsDemoable"]);
                        
            string learnerSessionId = System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
            int studentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerID"]);
            int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);

            string headingDocuSignProcess = string.Empty;
            string AffidavitDownloadButtonText = string.Empty;
            string AffidavitContinueButtonText = string.Empty;
            string ImageCourseApprovalAffidavit = string.Empty;
            string DocuSignProcessText = string.Empty;
            string TemplateDocuSignProcess = string.Empty;
            string URL = string.Empty; 
            bool isLearnerSigned = false;

            ICP4.CommunicationLogic.CommunicationCommand.ShowDocuSignProcess.DocuSignProcess docuSignProcess = new ICP4.CommunicationLogic.CommunicationCommand.ShowDocuSignProcess.DocuSignProcess();
            ICP4.CommunicationLogic.CommunicationCommand.ShowDocuSignProcess.ShowDocuSignProcess showDocuSignProcess = new ICP4.CommunicationLogic.CommunicationCommand.ShowDocuSignProcess.ShowDocuSignProcess();

            ICPCourseService.Asset asset = new ICP4.BusinessLogic.ICPCourseService.Asset();

            ICPCourseService.CourseService courseService = new ICP4.BusinessLogic.ICPCourseService.CourseService();
            courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
            courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
            asset = courseService.GetAffidavitAsset(affidivatID);
            string HTML = "";          

            //LCMS-11217
            if (asset.AffidavitTemplateId > 0 && asset.AssetType == AssetType.Affidavit)
            {                 
                using( ICP4.BusinessLogic.ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
                   {

                     trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                     trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                     isLearnerSigned = trackingService.GetEnvelopStatusAgainstDocuSignRole(enrollmentID, ConfigurationManager.AppSettings["RollNameForLearner"]);

                    }            
                             
                using (CacheManager.CacheManager cacheManager = new ICP4.BusinessLogic.CacheManager.CacheManager())
                {
                    headingDocuSignProcess = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.HeadingDocuSignProcess, brandCode, variant);
                    //DocuSignProcessText = asset.DisplayText3.ToString();
                    DocuSignProcessText = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.DocuSignProcessText, brandCode, variant);

                    if (isLearnerSigned == true)
                    {

                        TemplateDocuSignProcess = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.TemplateDocuSignProcessForDualSigner, brandCode, variant);
                        docuSignProcess.IsDocuSignDualSigner = true;
                    }

                    else
                    {

                        TemplateDocuSignProcess = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.TemplateDocuSignProcess, brandCode, variant);
                    }
                    
                    string ImageDocuSignProcess = cacheManager.GetResourceValueByResourceKey(BrandManager.ResourceKeyNames.ImageCourseApprovalAffidavit, brandCode, variant);
                    StringBuilder sb = new StringBuilder(TemplateDocuSignProcess);
                    sb.Replace("$Heading", headingDocuSignProcess);
                    sb.Replace("$VisualImage", ImageDocuSignProcess);
                    //sb.Replace("$Text", DocuSignProcess);
                    HTML = sb.ToString();
                    docuSignProcess.SceneText = DocuSignProcessText;
                    URL="?courseID={0}&learnerID={1}&enrollmentID={2}&learningSessionGUID={3}";
                    URL = URL.Replace("{0}", courseID.ToString());
                    URL = URL.Replace("{1}", studentID.ToString());
                    URL = URL.Replace("{2}", enrollmentID.ToString());
                    URL = URL.Replace("{3}", learnerSessionId.ToString());
                    docuSignProcess.URL = URL;
                }
            
                docuSignProcess.IsDocuSignAffidavit = true;
            }
            else
            {
                return null;
            }


            docuSignProcess.CourseID = courseID;
            docuSignProcess.AffidavitURL = ConfigurationManager.AppSettings["ICPFileSystem"].ToString() + asset.URL.ToString();
            docuSignProcess.TemplateHtml = HTML;
            docuSignProcess.TemplateHtml = docuSignProcess.TemplateHtml.Replace("\n", "");
            showDocuSignProcess.Affidavit = docuSignProcess;
            showDocuSignProcess.CommandName = ICP4.CommunicationLogic.CommunicationCommand.CommandNames.ShowDocuSignProcess;
            return showDocuSignProcess;
        }

        public object SpecialLoadCourseCertificateCommand(object docuSignProcessCommand)
        {
            return docuSignProcessCommand;
        }

        public _360Training.BusinessEntities.DocuSignLearner GetLearnerData()
        {
            _360Training.BusinessEntities.DocuSignLearner docuSignLearnerData = new _360Training.BusinessEntities.DocuSignLearner();

            int courseID = Convert.ToInt32(System.Web.HttpContext.Current.Session["CourseID"]);
            string learnerSessionId= System.Web.HttpContext.Current.Session["LearnerSessionID"].ToString();
            int studentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["LearnerID"]);
            int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);

            using (ICPCourseService.CourseService courseService = new ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                ICPCourseService.DocuSignLearner  dsl = courseService.GetLearnerData(courseID, learnerSessionId, studentID, enrollmentID);
                
                
                docuSignLearnerData.CourseName = dsl.CourseName;
                docuSignLearnerData.LearnerName = dsl.LearnerName;
                docuSignLearnerData.LearnerEmail = dsl.LearnerEmail;                
                docuSignLearnerData.TemplateId = dsl.TemplateId;
                docuSignLearnerData.CreditHours = dsl.CreditHours;
                docuSignLearnerData.CertificateNumber = dsl.CertificateNumber;
                docuSignLearnerData.StartDate = dsl.StartDate;
                docuSignLearnerData.RegistrationDate = dsl.RegistrationDate;
                docuSignLearnerData.ApprovalNumber = dsl.ApprovalNumber;
                docuSignLearnerData.ApprovedCourseName = dsl.ApprovedCourseName;
                docuSignLearnerData.ApprovedCreditHours = dsl.ApprovedCreditHours;
                docuSignLearnerData.LastPostTestDate = dsl.LastPostTestDate;
                docuSignLearnerData.FinalExamScore = dsl.FinalExamScore;

                docuSignLearnerData.DateofBirth = dsl.DateofBirth;
                docuSignLearnerData.LicenseNumber = dsl.LicenseNumber;
                docuSignLearnerData.LicenseType = dsl.LicenseType;
                docuSignLearnerData.NationProducerNumber = dsl.NationProducerNumber;
                docuSignLearnerData.NERCCertificateNumber = dsl.NERCCertificateNumber;
                docuSignLearnerData.SocialSecurityNumber = dsl.SocialSecurityNumber;
                docuSignLearnerData.LicenseExpirationDate = dsl.LicenseExpirationDate;
                docuSignLearnerData.City = dsl.City;
                docuSignLearnerData.State = dsl.State;
                docuSignLearnerData.ZipCode = dsl.ZipCode;
                docuSignLearnerData.Phone = dsl.Phone;
                docuSignLearnerData.Address = dsl.Address;      
                docuSignLearnerData.CertificateExpiryDate = dsl.CertificateExpiryDate;
              
          
            }

            return docuSignLearnerData;
        }
        public void SaveEnvelopeId(string EnvelopeId)
        {
            
            int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);

            using (ICPCourseService.CourseService courseService = new ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                courseService.SaveEnvelopeId(enrollmentID, EnvelopeId);
            }
        }
        public string GetEnvelopeId()
        {
            string envelopeId = string.Empty;
            int enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);

            using (ICPCourseService.CourseService courseService = new ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                envelopeId= courseService.GetEnvelopeId(enrollmentID);
            }
            return envelopeId;
        }
        public void SaveStatusAfterDocuSignProcessComplete()
        {
            int enrollmentID = 0;
            if (System.Web.HttpContext.Current.Session["EnrollmentID"] != null)
            {
                enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Session["EnrollmentID"]);
            }
            else
            {
                if (System.Web.HttpContext.Current.Request.QueryString["enrollmentID"] != null)
                {
                    enrollmentID = Convert.ToInt32(System.Web.HttpContext.Current.Request.QueryString["enrollmentID"]);
                }

            }
            using (ICPCourseService.CourseService courseService = new ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                courseService.SaveStatusAfterDocuSignProcessComplete(enrollmentID);
            }
        }
        public int SaveStatusAfterDocuSignProcessComplete(string EnvelopeId)
        {
            int enrollmentID = 0;
            using (ICPCourseService.CourseService courseService = new ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                enrollmentID = courseService.SaveStatusAfterDocuSignProcessCompleted(EnvelopeId);
            }
            return enrollmentID;
        }

        public _360Training.BusinessEntities.CourseInfo GetCourseInformation(int EnrollmentId)
        {
            _360Training.BusinessEntities.CourseInfo courseInformationData = new _360Training.BusinessEntities.CourseInfo();

                   
            using (ICPCourseService.CourseService courseService = new ICPCourseService.CourseService())
            {
                courseService.Url = ConfigurationManager.AppSettings["ICPCourseService"];
                courseService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);

                ICPCourseService.CourseInfo courseInfo = courseService.GetCourseInformation(EnrollmentId);

                courseInformationData.CourseApprovalId = courseInfo.CourseApprovalId;
                courseInformationData.CourseConfigId = courseInfo.CourseConfigId;
                courseInformationData.CourseId = courseInfo.CourseId;
                courseInformationData.LearnerId = courseInfo.LearnerId;
                courseInformationData.LearnerSessionGuid = courseInfo.LearnerSessionGuid;
         
            }
            return courseInformationData;
        }



        #endregion 
    
        //LCMS-12526
        //Abdus Samad
        //Start
       
        public ICP4.BusinessLogic.ICPTrackingService.LearnerProfile GetLearnerInformationForChatForHelp(int enrollmentID)
        {
            ICP4.BusinessLogic.ICPTrackingService.LearnerProfile serviceLearnerProfile;

            using (TrackingService trackingService = new TrackingService())
            {
                trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];

                serviceLearnerProfile = trackingService.GetUserProfileInformation(enrollmentID);
            }
            return serviceLearnerProfile;
        }

        //Stop

        public bool CheckForJSEnabledForCourse(string courseId)
        {
           string strValue = ConfigurationManager.AppSettings["JSPlayerCourseIDs"];
          
           bool result = false;

          if(strValue.Contains(courseId))
          {
          
              result = true;
          }
          else
          {
              result  = false;
          }

          return result;
        }

        public string GetRedirectURLFromLearningSession(string learningSessionID)
        {
            string redirectURL = null;
            using (TrackingService trackingService = new TrackingService())
            {
                trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                redirectURL = trackingService.GetLearningSessionRedirectURL(learningSessionID);
            }
            return redirectURL;
        }

        //This will check if redirect to Legacy should be stop
        public bool CheckForLegacyRedirectionStatus()
        {
            bool boolValue = Convert.ToBoolean(ConfigurationManager.AppSettings["LegacyShutDown"]);

            return boolValue;
        }

        //Abdus Samad LCMS-13553
        //Start
        public string CoursePlayerEndSession(string learnerSessionID, int courseID)
        {

            using (ICP4.BusinessLogic.ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
            {
                string iResult = string.Empty;

                trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);


                ICP4.BusinessLogic.ICPTrackingService.LearningSessionInformation learningSessionInfo = new ICP4.BusinessLogic.ICPTrackingService.LearningSessionInformation();
                learningSessionInfo = trackingService.CheckIfLearningSessionOpen(learnerSessionID);

                using (CourseManager courseManager = new CourseManager())
                {
                    if (learningSessionInfo.LearningSessionOutputID != string.Empty && learningSessionInfo.LearningSessionOutputID != null)
                    {
                        //courseManager.EndSession(courseID, learningSessionInfo.LearningSessionOutputID, DateTime.Now, learningSessionInfo.OldLearningSessionStartTime, true);
                        EndSessionForCookies(courseID, learningSessionInfo.LearningSessionOutputID, DateTime.Now, learningSessionInfo.OldLearningSessionStartTime, true);
                    }
                }
            }

            return string.Empty;

        }


        public void EndSessionForCookies(int courseID, string learnerSessionID, DateTime endTime, DateTime oldLearningSessionStartTime, bool EndingLearningSession)
        {
            using (ICPTrackingService.TrackingService trackingService = new ICP4.BusinessLogic.ICPTrackingService.TrackingService())
            {
                trackingService.Url = ConfigurationManager.AppSettings["ICPTrackingService"];
                trackingService.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["ICPCourseServiceTimeout"]);
                            
                double percentageCourseProgress = 0.0;
                ICPTrackingService.LearnerCourseTrackInfo learnerCourseTrackInfo = new ICP4.BusinessLogic.ICPTrackingService.LearnerCourseTrackInfo();
                learnerCourseTrackInfo = GetPreviousInfo(learnerSessionID);
                int enrollmentID = learnerCourseTrackInfo.EnrollmentID;
                int totalTimeSpent = 0;
                int strtotalTimeSpentFromStoredProcedure = 0;
               
                strtotalTimeSpentFromStoredProcedure = trackingService.GetTotalTimeSpent(learnerSessionID, enrollmentID);

                if (strtotalTimeSpentFromStoredProcedure != 0)
                {
                    totalTimeSpent = strtotalTimeSpentFromStoredProcedure;
                }

                else
                {
                    //Check to make sure the cookie exists
                    HttpCookie cookie = HttpContext.Current.Request.Cookies["StudentTimeSpendCookies"];
                    if (cookie != null && cookie.Values != null && !String.IsNullOrEmpty(cookie.Value.ToString()))
                    {
                        //String strCookieValue = cookie.Value.ToString();  
                        totalTimeSpent = Convert.ToInt32(cookie.Value);
                    }
                }                

                trackingService.EndSession(learnerSessionID, endTime, totalTimeSpent, percentageCourseProgress, enrollmentID);
            }
            //Cookies Expiration mechanism
            HttpCookie _userInfoCookies = new HttpCookie("StudentTimeSpendCookies");
            //Adding Expire Time of cookies before existing cookies time
            _userInfoCookies.Expires = DateTime.Now.AddDays(-1);
            //Adding cookies to current web response
            HttpContext.Current.Response.Cookies.Add(_userInfoCookies);
        
        }
        //Stop
     
    }

}

        #endregion
