//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4959
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4959.
// 
#pragma warning disable 1591

namespace ICP4.BusinessLogic.LCMS_VUConnectorService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LCMS_VUConnectorService.cfcSoapBinding", Namespace="http://iCP4.vu3")]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CFCInvocationException))]
    public partial class LCMS_VUConnectorServiceService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UpdateCourseStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetASVOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStudentCourseCompDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStudentCourseIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllASVsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEOCInstructionWithASVOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStudentCourseRegDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllVerticalsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStudentCourseDateTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishCourseWithPackageOperationCompleted;
        
        private System.Threading.SendOrPostCallback echoStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsLegacyCourseDemoableOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishCourseOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllClientsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllStatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEOCInstructionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStudentCourseStatusOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public LCMS_VUConnectorServiceService() {
            this.Url = global::ICP4.BusinessLogic.Properties.Settings.Default.ICP4_BusinessLogic_LCMS_VUConnectorService_LCMS_VUConnectorServiceService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UpdateCourseStatusCompletedEventHandler UpdateCourseStatusCompleted;
        
        /// <remarks/>
        public event GetASVCompletedEventHandler GetASVCompleted;
        
        /// <remarks/>
        public event GetStudentCourseCompDateCompletedEventHandler GetStudentCourseCompDateCompleted;
        
        /// <remarks/>
        public event GetStudentCourseIDCompletedEventHandler GetStudentCourseIDCompleted;
        
        /// <remarks/>
        public event GetAllASVsCompletedEventHandler GetAllASVsCompleted;
        
        /// <remarks/>
        public event GetEOCInstructionWithASVCompletedEventHandler GetEOCInstructionWithASVCompleted;
        
        /// <remarks/>
        public event GetStudentCourseRegDateCompletedEventHandler GetStudentCourseRegDateCompleted;
        
        /// <remarks/>
        public event GetAllVerticalsCompletedEventHandler GetAllVerticalsCompleted;
        
        /// <remarks/>
        public event GetStudentCourseDateTimeCompletedEventHandler GetStudentCourseDateTimeCompleted;
        
        /// <remarks/>
        public event PublishCourseWithPackageCompletedEventHandler PublishCourseWithPackageCompleted;
        
        /// <remarks/>
        public event echoStringCompletedEventHandler echoStringCompleted;
        
        /// <remarks/>
        public event IsLegacyCourseDemoableCompletedEventHandler IsLegacyCourseDemoableCompleted;
        
        /// <remarks/>
        public event PublishCourseCompletedEventHandler PublishCourseCompleted;
        
        /// <remarks/>
        public event GetAllClientsCompletedEventHandler GetAllClientsCompleted;
        
        /// <remarks/>
        public event GetAllStatesCompletedEventHandler GetAllStatesCompleted;
        
        /// <remarks/>
        public event GetEOCInstructionCompletedEventHandler GetEOCInstructionCompleted;
        
        /// <remarks/>
        public event GetStudentCourseStatusCompletedEventHandler GetStudentCourseStatusCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://iCP4.vu3", ResponseNamespace="http://iCP4.vu3")]
        [return: System.Xml.Serialization.SoapElementAttribute("UpdateCourseStatusReturn")]
        public bool UpdateCourseStatus(string CourseGUID, double EnrollmentID, double CourseStatus, double LCMSTimeSpent, double PercentComplete, double FinalExamScore, bool IsFinalExamPassed) {
            object[] results = this.Invoke("UpdateCourseStatus", new object[] {
                        CourseGUID,
                        EnrollmentID,
                        CourseStatus,
                        LCMSTimeSpent,
                        PercentComplete,
                        FinalExamScore,
                        IsFinalExamPassed});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateCourseStatusAsync(string CourseGUID, double EnrollmentID, double CourseStatus, double LCMSTimeSpent, double PercentComplete, double FinalExamScore, bool IsFinalExamPassed) {
            this.UpdateCourseStatusAsync(CourseGUID, EnrollmentID, CourseStatus, LCMSTimeSpent, PercentComplete, FinalExamScore, IsFinalExamPassed, null);
        }
        
        /// <remarks/>
        public void UpdateCourseStatusAsync(string CourseGUID, double EnrollmentID, double CourseStatus, double LCMSTimeSpent, double PercentComplete, double FinalExamScore, bool IsFinalExamPassed, object userState) {
            if ((this.UpdateCourseStatusOperationCompleted == null)) {
                this.UpdateCourseStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCourseStatusOperationCompleted);
            }
            this.InvokeAsync("UpdateCourseStatus", new object[] {
                        CourseGUID,
                        EnrollmentID,
                        CourseStatus,
                        LCMSTimeSpent,
                        PercentComplete,
                        FinalExamScore,
                        IsFinalExamPassed}, this.UpdateCourseStatusOperationCompleted, userState);
        }
        
        private void OnUpdateCourseStatusOperationCompleted(object arg) {
            if ((this.UpdateCourseStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCourseStatusCompleted(this, new UpdateCourseStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://iCP4.vu3", ResponseNamespace="http://iCP4.vu3")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetASVReturn")]
        public double GetASV(string courseGuid, double student_id) {
            object[] results = this.Invoke("GetASV", new object[] {
                        courseGuid,
                        student_id});
            return ((double)(results[0]));
        }
        
        /// <remarks/>
        public void GetASVAsync(string courseGuid, double student_id) {
            this.GetASVAsync(courseGuid, student_id, null);
        }
        
        /// <remarks/>
        public void GetASVAsync(string courseGuid, double student_id, object userState) {
            if ((this.GetASVOperationCompleted == null)) {
                this.GetASVOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetASVOperationCompleted);
            }
            this.InvokeAsync("GetASV", new object[] {
                        courseGuid,
                        student_id}, this.GetASVOperationCompleted, userState);
        }
        
        private void OnGetASVOperationCompleted(object arg) {
            if ((this.GetASVCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetASVCompleted(this, new GetASVCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://iCP4.vu3", ResponseNamespace="http://iCP4.vu3")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetStudentCourseCompDateReturn")]
        public string GetStudentCourseCompDate(double Enrollment_id) {
            object[] results = this.Invoke("GetStudentCourseCompDate", new object[] {
                        Enrollment_id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetStudentCourseCompDateAsync(double Enrollment_id) {
            this.GetStudentCourseCompDateAsync(Enrollment_id, null);
        }
        
        /// <remarks/>
        public void GetStudentCourseCompDateAsync(double Enrollment_id, object userState) {
            if ((this.GetStudentCourseCompDateOperationCompleted == null)) {
                this.GetStudentCourseCompDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStudentCourseCompDateOperationCompleted);
            }
            this.InvokeAsync("GetStudentCourseCompDate", new object[] {
                        Enrollment_id}, this.GetStudentCourseCompDateOperationCompleted, userState);
        }
        
        private void OnGetStudentCourseCompDateOperationCompleted(object arg) {
            if ((this.GetStudentCourseCompDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStudentCourseCompDateCompleted(this, new GetStudentCourseCompDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://iCP4.vu3", ResponseNamespace="http://iCP4.vu3")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetStudentCourseIDReturn")]
        public double GetStudentCourseID(double courseId, double student_id, double epoch) {
            object[] results = this.Invoke("GetStudentCourseID", new object[] {
                        courseId,
                        student_id,
                        epoch});
            return ((double)(results[0]));
        }
        
        /// <remarks/>
        public void GetStudentCourseIDAsync(double courseId, double student_id, double epoch) {
            this.GetStudentCourseIDAsync(courseId, student_id, epoch, null);
        }
        
        /// <remarks/>
        public void GetStudentCourseIDAsync(double courseId, double student_id, double epoch, object userState) {
            if ((this.GetStudentCourseIDOperationCompleted == null)) {
                this.GetStudentCourseIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStudentCourseIDOperationCompleted);
            }
            this.InvokeAsync("GetStudentCourseID", new object[] {
                        courseId,
                        student_id,
                        epoch}, this.GetStudentCourseIDOperationCompleted, userState);
        }
        
        private void OnGetStudentCourseIDOperationCompleted(object arg) {
            if ((this.GetStudentCourseIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStudentCourseIDCompleted(this, new GetStudentCourseIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://iCP4.vu3", ResponseNamespace="http://iCP4.vu3")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetAllASVsReturn")]
        public object[] GetAllASVs(double clientID) {
            object[] results = this.Invoke("GetAllASVs", new object[] {
                        clientID});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllASVsAsync(double clientID) {
            this.GetAllASVsAsync(clientID, null);
        }
        
        /// <remarks/>
        public void GetAllASVsAsync(double clientID, object userState) {
            if ((this.GetAllASVsOperationCompleted == null)) {
                this.GetAllASVsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllASVsOperationCompleted);
            }
            this.InvokeAsync("GetAllASVs", new object[] {
                        clientID}, this.GetAllASVsOperationCompleted, userState);
        }
        
        private void OnGetAllASVsOperationCompleted(object arg) {
            if ((this.GetAllASVsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllASVsCompleted(this, new GetAllASVsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://iCP4.vu3", ResponseNamespace="http://iCP4.vu3")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetEOCInstructionWithASVReturn")]
        public string GetEOCInstructionWithASV(string courseGuid, double student_id, double studentcourse_id) {
            object[] results = this.Invoke("GetEOCInstructionWithASV", new object[] {
                        courseGuid,
                        student_id,
                        studentcourse_id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEOCInstructionWithASVAsync(string courseGuid, double student_id, double studentcourse_id) {
            this.GetEOCInstructionWithASVAsync(courseGuid, student_id, studentcourse_id, null);
        }
        
        /// <remarks/>
        public void GetEOCInstructionWithASVAsync(string courseGuid, double student_id, double studentcourse_id, object userState) {
            if ((this.GetEOCInstructionWithASVOperationCompleted == null)) {
                this.GetEOCInstructionWithASVOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEOCInstructionWithASVOperationCompleted);
            }
            this.InvokeAsync("GetEOCInstructionWithASV", new object[] {
                        courseGuid,
                        student_id,
                        studentcourse_id}, this.GetEOCInstructionWithASVOperationCompleted, userState);
        }
        
        private void OnGetEOCInstructionWithASVOperationCompleted(object arg) {
            if ((this.GetEOCInstructionWithASVCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEOCInstructionWithASVCompleted(this, new GetEOCInstructionWithASVCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://iCP4.vu3", ResponseNamespace="http://iCP4.vu3")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetStudentCourseRegDateReturn")]
        public string GetStudentCourseRegDate(double Enrollment_id) {
            object[] results = this.Invoke("GetStudentCourseRegDate", new object[] {
                        Enrollment_id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetStudentCourseRegDateAsync(double Enrollment_id) {
            this.GetStudentCourseRegDateAsync(Enrollment_id, null);
        }
        
        /// <remarks/>
        public void GetStudentCourseRegDateAsync(double Enrollment_id, object userState) {
            if ((this.GetStudentCourseRegDateOperationCompleted == null)) {
                this.GetStudentCourseRegDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStudentCourseRegDateOperationCompleted);
            }
            this.InvokeAsync("GetStudentCourseRegDate", new object[] {
                        Enrollment_id}, this.GetStudentCourseRegDateOperationCompleted, userState);
        }
        
        private void OnGetStudentCourseRegDateOperationCompleted(object arg) {
            if ((this.GetStudentCourseRegDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStudentCourseRegDateCompleted(this, new GetStudentCourseRegDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://iCP4.vu3", ResponseNamespace="http://iCP4.vu3")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetAllVerticalsReturn")]
        public object[] GetAllVerticals(double clientID) {
            object[] results = this.Invoke("GetAllVerticals", new object[] {
                        clientID});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllVerticalsAsync(double clientID) {
            this.GetAllVerticalsAsync(clientID, null);
        }
        
        /// <remarks/>
        public void GetAllVerticalsAsync(double clientID, object userState) {
            if ((this.GetAllVerticalsOperationCompleted == null)) {
                this.GetAllVerticalsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllVerticalsOperationCompleted);
            }
            this.InvokeAsync("GetAllVerticals", new object[] {
                        clientID}, this.GetAllVerticalsOperationCompleted, userState);
        }
        
        private void OnGetAllVerticalsOperationCompleted(object arg) {
            if ((this.GetAllVerticalsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllVerticalsCompleted(this, new GetAllVerticalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://iCP4.vu3", ResponseNamespace="http://iCP4.vu3")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetStudentCourseDateTimeReturn")]
        public string GetStudentCourseDateTime(double Enrollment_id) {
            object[] results = this.Invoke("GetStudentCourseDateTime", new object[] {
                        Enrollment_id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetStudentCourseDateTimeAsync(double Enrollment_id) {
            this.GetStudentCourseDateTimeAsync(Enrollment_id, null);
        }
        
        /// <remarks/>
        public void GetStudentCourseDateTimeAsync(double Enrollment_id, object userState) {
            if ((this.GetStudentCourseDateTimeOperationCompleted == null)) {
                this.GetStudentCourseDateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStudentCourseDateTimeOperationCompleted);
            }
            this.InvokeAsync("GetStudentCourseDateTime", new object[] {
                        Enrollment_id}, this.GetStudentCourseDateTimeOperationCompleted, userState);
        }
        
        private void OnGetStudentCourseDateTimeOperationCompleted(object arg) {
            if ((this.GetStudentCourseDateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStudentCourseDateTimeCompleted(this, new GetStudentCourseDateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://iCP4.vu3", ResponseNamespace="http://iCP4.vu3")]
        [return: System.Xml.Serialization.SoapElementAttribute("PublishCourseWithPackageReturn")]
        public bool PublishCourseWithPackage(
                    string Name, 
                    string Description, 
                    double hour, 
                    string LCMSCourseGUID, 
                    double Cost, 
                    double TimeOutDays, 
                    double Type, 
                    double Tier, 
                    double Available, 
                    double VerticalID, 
                    double ClientID, 
                    double StateID, 
                    double AsvID, 
                    double CommType, 
                    double Commission, 
                    double Delivery, 
                    double MSRP, 
                    string IsDemoable) {
            object[] results = this.Invoke("PublishCourseWithPackage", new object[] {
                        Name,
                        Description,
                        hour,
                        LCMSCourseGUID,
                        Cost,
                        TimeOutDays,
                        Type,
                        Tier,
                        Available,
                        VerticalID,
                        ClientID,
                        StateID,
                        AsvID,
                        CommType,
                        Commission,
                        Delivery,
                        MSRP,
                        IsDemoable});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PublishCourseWithPackageAsync(
                    string Name, 
                    string Description, 
                    double hour, 
                    string LCMSCourseGUID, 
                    double Cost, 
                    double TimeOutDays, 
                    double Type, 
                    double Tier, 
                    double Available, 
                    double VerticalID, 
                    double ClientID, 
                    double StateID, 
                    double AsvID, 
                    double CommType, 
                    double Commission, 
                    double Delivery, 
                    double MSRP, 
                    string IsDemoable) {
            this.PublishCourseWithPackageAsync(Name, Description, hour, LCMSCourseGUID, Cost, TimeOutDays, Type, Tier, Available, VerticalID, ClientID, StateID, AsvID, CommType, Commission, Delivery, MSRP, IsDemoable, null);
        }
        
        /// <remarks/>
        public void PublishCourseWithPackageAsync(
                    string Name, 
                    string Description, 
                    double hour, 
                    string LCMSCourseGUID, 
                    double Cost, 
                    double TimeOutDays, 
                    double Type, 
                    double Tier, 
                    double Available, 
                    double VerticalID, 
                    double ClientID, 
                    double StateID, 
                    double AsvID, 
                    double CommType, 
                    double Commission, 
                    double Delivery, 
                    double MSRP, 
                    string IsDemoable, 
                    object userState) {
            if ((this.PublishCourseWithPackageOperationCompleted == null)) {
                this.PublishCourseWithPackageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishCourseWithPackageOperationCompleted);
            }
            this.InvokeAsync("PublishCourseWithPackage", new object[] {
                        Name,
                        Description,
                        hour,
                        LCMSCourseGUID,
                        Cost,
                        TimeOutDays,
                        Type,
                        Tier,
                        Available,
                        VerticalID,
                        ClientID,
                        StateID,
                        AsvID,
                        CommType,
                        Commission,
                        Delivery,
                        MSRP,
                        IsDemoable}, this.PublishCourseWithPackageOperationCompleted, userState);
        }
        
        private void OnPublishCourseWithPackageOperationCompleted(object arg) {
            if ((this.PublishCourseWithPackageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishCourseWithPackageCompleted(this, new PublishCourseWithPackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://iCP4.vu3", ResponseNamespace="http://iCP4.vu3")]
        [return: System.Xml.Serialization.SoapElementAttribute("echoStringReturn")]
        public string echoString(string input) {
            object[] results = this.Invoke("echoString", new object[] {
                        input});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void echoStringAsync(string input) {
            this.echoStringAsync(input, null);
        }
        
        /// <remarks/>
        public void echoStringAsync(string input, object userState) {
            if ((this.echoStringOperationCompleted == null)) {
                this.echoStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnechoStringOperationCompleted);
            }
            this.InvokeAsync("echoString", new object[] {
                        input}, this.echoStringOperationCompleted, userState);
        }
        
        private void OnechoStringOperationCompleted(object arg) {
            if ((this.echoStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.echoStringCompleted(this, new echoStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://iCP4.vu3", ResponseNamespace="http://iCP4.vu3")]
        [return: System.Xml.Serialization.SoapElementAttribute("IsLegacyCourseDemoableReturn")]
        public bool IsLegacyCourseDemoable(string CourseGUID) {
            object[] results = this.Invoke("IsLegacyCourseDemoable", new object[] {
                        CourseGUID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsLegacyCourseDemoableAsync(string CourseGUID) {
            this.IsLegacyCourseDemoableAsync(CourseGUID, null);
        }
        
        /// <remarks/>
        public void IsLegacyCourseDemoableAsync(string CourseGUID, object userState) {
            if ((this.IsLegacyCourseDemoableOperationCompleted == null)) {
                this.IsLegacyCourseDemoableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsLegacyCourseDemoableOperationCompleted);
            }
            this.InvokeAsync("IsLegacyCourseDemoable", new object[] {
                        CourseGUID}, this.IsLegacyCourseDemoableOperationCompleted, userState);
        }
        
        private void OnIsLegacyCourseDemoableOperationCompleted(object arg) {
            if ((this.IsLegacyCourseDemoableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsLegacyCourseDemoableCompleted(this, new IsLegacyCourseDemoableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://iCP4.vu3", ResponseNamespace="http://iCP4.vu3")]
        [return: System.Xml.Serialization.SoapElementAttribute("PublishCourseReturn")]
        public bool PublishCourse(string Name, string Description, double hour, string LCMSCourseGUID) {
            object[] results = this.Invoke("PublishCourse", new object[] {
                        Name,
                        Description,
                        hour,
                        LCMSCourseGUID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PublishCourseAsync(string Name, string Description, double hour, string LCMSCourseGUID) {
            this.PublishCourseAsync(Name, Description, hour, LCMSCourseGUID, null);
        }
        
        /// <remarks/>
        public void PublishCourseAsync(string Name, string Description, double hour, string LCMSCourseGUID, object userState) {
            if ((this.PublishCourseOperationCompleted == null)) {
                this.PublishCourseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishCourseOperationCompleted);
            }
            this.InvokeAsync("PublishCourse", new object[] {
                        Name,
                        Description,
                        hour,
                        LCMSCourseGUID}, this.PublishCourseOperationCompleted, userState);
        }
        
        private void OnPublishCourseOperationCompleted(object arg) {
            if ((this.PublishCourseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishCourseCompleted(this, new PublishCourseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://iCP4.vu3", ResponseNamespace="http://iCP4.vu3")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetAllClientsReturn")]
        public object[] GetAllClients() {
            object[] results = this.Invoke("GetAllClients", new object[0]);
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllClientsAsync() {
            this.GetAllClientsAsync(null);
        }
        
        /// <remarks/>
        public void GetAllClientsAsync(object userState) {
            if ((this.GetAllClientsOperationCompleted == null)) {
                this.GetAllClientsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllClientsOperationCompleted);
            }
            this.InvokeAsync("GetAllClients", new object[0], this.GetAllClientsOperationCompleted, userState);
        }
        
        private void OnGetAllClientsOperationCompleted(object arg) {
            if ((this.GetAllClientsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllClientsCompleted(this, new GetAllClientsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://iCP4.vu3", ResponseNamespace="http://iCP4.vu3")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetAllStatesReturn")]
        public object[] GetAllStates(double clientID) {
            object[] results = this.Invoke("GetAllStates", new object[] {
                        clientID});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllStatesAsync(double clientID) {
            this.GetAllStatesAsync(clientID, null);
        }
        
        /// <remarks/>
        public void GetAllStatesAsync(double clientID, object userState) {
            if ((this.GetAllStatesOperationCompleted == null)) {
                this.GetAllStatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllStatesOperationCompleted);
            }
            this.InvokeAsync("GetAllStates", new object[] {
                        clientID}, this.GetAllStatesOperationCompleted, userState);
        }
        
        private void OnGetAllStatesOperationCompleted(object arg) {
            if ((this.GetAllStatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllStatesCompleted(this, new GetAllStatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://iCP4.vu3", ResponseNamespace="http://iCP4.vu3")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetEOCInstructionReturn")]
        public string GetEOCInstruction(double ASV) {
            object[] results = this.Invoke("GetEOCInstruction", new object[] {
                        ASV});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEOCInstructionAsync(double ASV) {
            this.GetEOCInstructionAsync(ASV, null);
        }
        
        /// <remarks/>
        public void GetEOCInstructionAsync(double ASV, object userState) {
            if ((this.GetEOCInstructionOperationCompleted == null)) {
                this.GetEOCInstructionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEOCInstructionOperationCompleted);
            }
            this.InvokeAsync("GetEOCInstruction", new object[] {
                        ASV}, this.GetEOCInstructionOperationCompleted, userState);
        }
        
        private void OnGetEOCInstructionOperationCompleted(object arg) {
            if ((this.GetEOCInstructionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEOCInstructionCompleted(this, new GetEOCInstructionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://iCP4.vu3", ResponseNamespace="http://iCP4.vu3")]
        [return: System.Xml.Serialization.SoapElementAttribute("GetStudentCourseStatusReturn")]
        public double GetStudentCourseStatus(double Enrollment_id) {
            object[] results = this.Invoke("GetStudentCourseStatus", new object[] {
                        Enrollment_id});
            return ((double)(results[0]));
        }
        
        /// <remarks/>
        public void GetStudentCourseStatusAsync(double Enrollment_id) {
            this.GetStudentCourseStatusAsync(Enrollment_id, null);
        }
        
        /// <remarks/>
        public void GetStudentCourseStatusAsync(double Enrollment_id, object userState) {
            if ((this.GetStudentCourseStatusOperationCompleted == null)) {
                this.GetStudentCourseStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStudentCourseStatusOperationCompleted);
            }
            this.InvokeAsync("GetStudentCourseStatus", new object[] {
                        Enrollment_id}, this.GetStudentCourseStatusOperationCompleted, userState);
        }
        
        private void OnGetStudentCourseStatusOperationCompleted(object arg) {
            if ((this.GetStudentCourseStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStudentCourseStatusCompleted(this, new GetStudentCourseStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://rpc.xml.coldfusion")]
    public partial class CFCInvocationException {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void UpdateCourseStatusCompletedEventHandler(object sender, UpdateCourseStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateCourseStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateCourseStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetASVCompletedEventHandler(object sender, GetASVCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetASVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetASVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetStudentCourseCompDateCompletedEventHandler(object sender, GetStudentCourseCompDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStudentCourseCompDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStudentCourseCompDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetStudentCourseIDCompletedEventHandler(object sender, GetStudentCourseIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStudentCourseIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStudentCourseIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAllASVsCompletedEventHandler(object sender, GetAllASVsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllASVsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllASVsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetEOCInstructionWithASVCompletedEventHandler(object sender, GetEOCInstructionWithASVCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEOCInstructionWithASVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEOCInstructionWithASVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetStudentCourseRegDateCompletedEventHandler(object sender, GetStudentCourseRegDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStudentCourseRegDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStudentCourseRegDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAllVerticalsCompletedEventHandler(object sender, GetAllVerticalsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllVerticalsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllVerticalsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetStudentCourseDateTimeCompletedEventHandler(object sender, GetStudentCourseDateTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStudentCourseDateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStudentCourseDateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void PublishCourseWithPackageCompletedEventHandler(object sender, PublishCourseWithPackageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublishCourseWithPackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PublishCourseWithPackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void echoStringCompletedEventHandler(object sender, echoStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class echoStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal echoStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void IsLegacyCourseDemoableCompletedEventHandler(object sender, IsLegacyCourseDemoableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsLegacyCourseDemoableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsLegacyCourseDemoableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void PublishCourseCompletedEventHandler(object sender, PublishCourseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PublishCourseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PublishCourseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAllClientsCompletedEventHandler(object sender, GetAllClientsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllClientsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllClientsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAllStatesCompletedEventHandler(object sender, GetAllStatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllStatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllStatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetEOCInstructionCompletedEventHandler(object sender, GetEOCInstructionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEOCInstructionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEOCInstructionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetStudentCourseStatusCompletedEventHandler(object sender, GetStudentCourseStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStudentCourseStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStudentCourseStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591